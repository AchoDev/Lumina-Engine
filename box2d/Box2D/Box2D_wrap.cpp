/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p__b2Vec2Array swig_types[0]
#define SWIGTYPE_p_b2AABB swig_types[1]
#define SWIGTYPE_p_b2AssertException swig_types[2]
#define SWIGTYPE_p_b2BlockAllocator swig_types[3]
#define SWIGTYPE_p_b2Body swig_types[4]
#define SWIGTYPE_p_b2BodyDef swig_types[5]
#define SWIGTYPE_p_b2BroadPhase swig_types[6]
#define SWIGTYPE_p_b2ChainShape swig_types[7]
#define SWIGTYPE_p_b2CircleShape swig_types[8]
#define SWIGTYPE_p_b2ClipVertex swig_types[9]
#define SWIGTYPE_p_b2Color swig_types[10]
#define SWIGTYPE_p_b2Contact swig_types[11]
#define SWIGTYPE_p_b2ContactEdge swig_types[12]
#define SWIGTYPE_p_b2ContactFeature swig_types[13]
#define SWIGTYPE_p_b2ContactFilter swig_types[14]
#define SWIGTYPE_p_b2ContactID swig_types[15]
#define SWIGTYPE_p_b2ContactImpulse swig_types[16]
#define SWIGTYPE_p_b2ContactListener swig_types[17]
#define SWIGTYPE_p_b2ContactManager swig_types[18]
#define SWIGTYPE_p_b2ContactPoint swig_types[19]
#define SWIGTYPE_p_b2DestructionListener swig_types[20]
#define SWIGTYPE_p_b2DistanceInput swig_types[21]
#define SWIGTYPE_p_b2DistanceJoint swig_types[22]
#define SWIGTYPE_p_b2DistanceJointDef swig_types[23]
#define SWIGTYPE_p_b2DistanceOutput swig_types[24]
#define SWIGTYPE_p_b2DistanceProxy swig_types[25]
#define SWIGTYPE_p_b2Draw swig_types[26]
#define SWIGTYPE_p_b2DrawExtended swig_types[27]
#define SWIGTYPE_p_b2EdgeShape swig_types[28]
#define SWIGTYPE_p_b2Filter swig_types[29]
#define SWIGTYPE_p_b2Fixture swig_types[30]
#define SWIGTYPE_p_b2FixtureDef swig_types[31]
#define SWIGTYPE_p_b2FixtureProxy swig_types[32]
#define SWIGTYPE_p_b2FrictionJoint swig_types[33]
#define SWIGTYPE_p_b2FrictionJointDef swig_types[34]
#define SWIGTYPE_p_b2GearJoint swig_types[35]
#define SWIGTYPE_p_b2GearJointDef swig_types[36]
#define SWIGTYPE_p_b2Jacobian swig_types[37]
#define SWIGTYPE_p_b2Joint swig_types[38]
#define SWIGTYPE_p_b2JointDef swig_types[39]
#define SWIGTYPE_p_b2JointEdge swig_types[40]
#define SWIGTYPE_p_b2Manifold swig_types[41]
#define SWIGTYPE_p_b2ManifoldPoint swig_types[42]
#define SWIGTYPE_p_b2MassData swig_types[43]
#define SWIGTYPE_p_b2Mat22 swig_types[44]
#define SWIGTYPE_p_b2Mat33 swig_types[45]
#define SWIGTYPE_p_b2MotorJoint swig_types[46]
#define SWIGTYPE_p_b2MotorJointDef swig_types[47]
#define SWIGTYPE_p_b2MouseJoint swig_types[48]
#define SWIGTYPE_p_b2MouseJointDef swig_types[49]
#define SWIGTYPE_p_b2Pair swig_types[50]
#define SWIGTYPE_p_b2PolygonShape swig_types[51]
#define SWIGTYPE_p_b2Position swig_types[52]
#define SWIGTYPE_p_b2PrismaticJoint swig_types[53]
#define SWIGTYPE_p_b2PrismaticJointDef swig_types[54]
#define SWIGTYPE_p_b2Profile swig_types[55]
#define SWIGTYPE_p_b2PulleyJoint swig_types[56]
#define SWIGTYPE_p_b2PulleyJointDef swig_types[57]
#define SWIGTYPE_p_b2QueryCallback swig_types[58]
#define SWIGTYPE_p_b2RayCastCallback swig_types[59]
#define SWIGTYPE_p_b2RayCastInput swig_types[60]
#define SWIGTYPE_p_b2RayCastOutput swig_types[61]
#define SWIGTYPE_p_b2RevoluteJoint swig_types[62]
#define SWIGTYPE_p_b2RevoluteJointDef swig_types[63]
#define SWIGTYPE_p_b2RopeJoint swig_types[64]
#define SWIGTYPE_p_b2RopeJointDef swig_types[65]
#define SWIGTYPE_p_b2Rot swig_types[66]
#define SWIGTYPE_p_b2Shape swig_types[67]
#define SWIGTYPE_p_b2SolverData swig_types[68]
#define SWIGTYPE_p_b2Sweep swig_types[69]
#define SWIGTYPE_p_b2TOIInput swig_types[70]
#define SWIGTYPE_p_b2TOIOutput swig_types[71]
#define SWIGTYPE_p_b2TimeStep swig_types[72]
#define SWIGTYPE_p_b2Transform swig_types[73]
#define SWIGTYPE_p_b2TreeNode swig_types[74]
#define SWIGTYPE_p_b2Vec2 swig_types[75]
#define SWIGTYPE_p_b2Vec3 swig_types[76]
#define SWIGTYPE_p_b2Velocity swig_types[77]
#define SWIGTYPE_p_b2Version swig_types[78]
#define SWIGTYPE_p_b2WeldJoint swig_types[79]
#define SWIGTYPE_p_b2WeldJointDef swig_types[80]
#define SWIGTYPE_p_b2WheelJoint swig_types[81]
#define SWIGTYPE_p_b2WheelJointDef swig_types[82]
#define SWIGTYPE_p_b2World swig_types[83]
#define SWIGTYPE_p_b2WorldManifold swig_types[84]
#define SWIGTYPE_p_char swig_types[85]
#define SWIGTYPE_p_double swig_types[86]
#define SWIGTYPE_p_f_p_b2Contact_p_b2BlockAllocator__void swig_types[87]
#define SWIGTYPE_p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact swig_types[88]
#define SWIGTYPE_p_float swig_types[89]
#define SWIGTYPE_p_int swig_types[90]
#define SWIGTYPE_p_short swig_types[91]
#define SWIGTYPE_p_signed_char swig_types[92]
#define SWIGTYPE_p_unsigned_char swig_types[93]
#define SWIGTYPE_p_unsigned_int swig_types[94]
#define SWIGTYPE_p_unsigned_short swig_types[95]
static swig_type_info *swig_types[97];
static swig_module_info swig_module = {swig_types, 96, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _Box2D.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__Box2D

#else
#  define SWIG_init    init_Box2D

#endif
#define SWIG_name    "_Box2D"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


    #include "Box2D/Box2D.h"


    // Wrap toi settings
    extern int32 b2_toiMaxIters, b2_toiMaxRootIters;

    // Add support for == and != in Python for shapes, joints, and bodies.
    bool __jointeq(b2Joint* a, b2Joint* b) {
        return a==b;
    }
    bool __bodyeq(b2Body* a, b2Body* b) {
        return a==b;
    }
    bool __shapeeq(b2Shape* a, b2Shape* b) {
        return a==b;
    }
    bool __fixtureeq(b2Fixture* a, b2Fixture* b) {
        return a==b;
    }

    // Modified from the b2PolygonShape constructor
    // Should be as accurate as the original version
    b2Vec2 __b2ComputeCentroid(const b2Vec2* vs, int32 count) {
        b2Vec2 c; c.Set(0.0f, 0.0f);
        if (count < 3 || count > b2_maxPolygonVertices) {
            PyErr_SetString(PyExc_ValueError, "Vertex count must be >= 3 and <= b2_maxPolygonVertices");
            return c;
        }

        float32 area = 0.0f;

        // pRef is the reference point for forming triangles.
        // It's location doesn't change the result (except for rounding error).
        b2Vec2 pRef(0.0f, 0.0f);

        const float32 inv3 = 1.0f / 3.0f;

        for (int32 i = 0; i < count; ++i)
        {
            // Triangle vertices.
            b2Vec2 p1 = pRef;
            b2Vec2 p2 = vs[i];
            b2Vec2 p3 = i + 1 < count ? vs[i+1] : vs[0];

            b2Vec2 e1 = p2 - p1;
            b2Vec2 e2 = p3 - p1;

            float32 D = b2Cross(e1, e2);

            float32 triangleArea = 0.5f * D;
            area += triangleArea;

            // Area weighted centroid
            c += triangleArea * inv3 * (p1 + p2 + p3);
        }

        // Centroid
        if (area <= b2_epsilon) {
            PyErr_SetString(PyExc_ValueError, "ComputeCentroid: area <= FLT_EPSILON");
            return c;
        }

        c *= 1.0f / area;
        return c;
    }

    bool b2CheckVertices(b2Vec2* vertices, int32 count, bool additional_checks=true) {
        // Get the vertices transformed into the body frame.
        if (count < 2 || count > b2_maxPolygonVertices) {
            PyErr_SetString(PyExc_ValueError, "Vertex count must be >= 2 and <= b2_maxPolygonVertices");
            return false;
        }

        // Compute normals. Ensure the edges have non-zero length.
        b2Vec2 m_normals[b2_maxPolygonVertices];
        for (int32 i = 0; i < count; ++i)
        {
            int32 i1 = i;
            int32 i2 = i + 1 < count ? i + 1 : 0;
            b2Vec2 edge = vertices[i2] - vertices[i1];
            if (edge.LengthSquared() <= b2_epsilon * b2_epsilon) {
                PyErr_SetString(PyExc_ValueError, "edge.LengthSquared < FLT_EPSILON**2");
                return false;
            }
            
            m_normals[i] = b2Cross(edge, 1.0f);
            m_normals[i].Normalize();
        }

        // Compute the polygon centroid.
        b2Vec2 m_centroid = __b2ComputeCentroid(vertices, count);

        if (!additional_checks)
            return true;

        // Ensure the polygon is convex and the interior
        // is to the left of each edge.
        for (int32 i = 0; i < count; ++i)
        {
            int32 i1 = i;
            int32 i2 = i + 1 < count ? i + 1 : 0;
            b2Vec2 edge = vertices[i2] - vertices[i1];

            for (int32 j = 0; j < count; ++j)
            {
                // Don not check vertices on the current edge.
                if (j == i1 || j == i2)
                {
                    continue;
                }
                
                b2Vec2 r = vertices[j] - vertices[i1];

                // Your polygon is non-convex (it has an indentation) or
                // has colinear edges.
                float32 s = b2Cross(edge, r);
                if (s <= 0.0f) {
                    PyErr_SetString(PyExc_ValueError, "Your polygon is non-convex (it has an indentation) or has colinear edges.");
                    return false;
                }
            }
        }

        return true;
    }

    bool b2CheckPolygon(b2PolygonShape *shape, bool additional_checks=true) {
        if (!shape)
            return false;

        return b2CheckVertices(shape->m_vertices, shape->m_count, additional_checks);
    }

    /* As of Box2D SVN r191, these functions are no longer in b2Math.h,
       so re-add them here for backwards compatibility */
    #define RAND_LIMIT      32767      
    // Random number in range [-1,1]
    float32 b2Random()      
    {      
            float32 r = (float32)(rand() & (RAND_LIMIT));      
            r /= RAND_LIMIT;      
            r = 2.0f * r - 1.0f;      
            return r;      
    }      
          
    /// Random floating point number in range [lo, hi]      
    float32 b2Random(float32 lo, float32 hi)      
    {      
            float32 r = (float32)(rand() & (RAND_LIMIT));      
            r /= RAND_LIMIT;      
            r = (hi - lo) * r + lo;      
            return r;      
    }



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


    b2DistanceOutput* _b2Distance(b2Shape* shapeA, int idxA, b2Shape* shapeB, int idxB, b2Transform& transformA, b2Transform& transformB, bool useRadii=true) {
        if (!shapeA || !shapeB)
            return NULL;

        b2DistanceInput input;
        b2DistanceOutput* out=new b2DistanceOutput;
        b2SimplexCache cache;

        input.proxyA.Set(shapeA, idxA);
        input.proxyB.Set(shapeB, idxB);
        input.transformA = transformA;
        input.transformB = transformB;
        input.useRadii = useRadii;

        cache.count=0;
        b2Distance(out, &cache, &input);
        return out;
    }
    b2DistanceOutput* _b2Distance(b2DistanceInput* input) {
        if (!input)
            return NULL;

        b2DistanceOutput* out=new b2DistanceOutput;
        b2SimplexCache cache;
        cache.count=0;
        b2Distance(out, &cache, input);
        return out;
    }


#define pybox2d_float_from_sequence(_sequence, _num, _dest, _err_msg) \
    {                                                                 \
        PyObject* item=PySequence_GetItem(_sequence, _num);           \
        int res=SWIG_AsVal_float(item, _dest);                        \
        Py_XDECREF(item);                                             \
        if (!SWIG_IsOK(res)) {                                        \
            PyErr_SetString(PyExc_TypeError,_err_msg);                \
            SWIG_fail;                                                \
        }                                                             \
    }



    PyObject* b2GetPointStates(const b2Manifold* manifold1, const b2Manifold* manifold2) {
        PyObject* ret=NULL;
        b2PointState state1[b2_maxManifoldPoints], state2[b2_maxManifoldPoints];

        if (!manifold1 || !manifold2)
            return NULL;

        b2GetPointStates(state1, state2, manifold1, manifold2);

        ret = PyTuple_New(2);
        
        int state1_length=-1, state2_length=-1;
        PyObject* state1_t=Py_None;
        PyObject* state2_t=Py_None;
        for (int i=0; i < b2_maxManifoldPoints; i++) {
            if (state1[i]==b2_nullState && state1_length==0)
                state1_length=i;
                if (state2_length > -1)
                    break;
            if (state2[i]==b2_nullState && state2_length==0)
                state2_length=i;
                if (state1_length > -1)
                    break;
        }

        if (state1_length < 0)
            state1_length = b2_maxManifoldPoints;
        if (state2_length < 0)
            state2_length = b2_maxManifoldPoints;

        if (state1_length > -1)
            state1_t=PyTuple_New(state1_length);
        else
            Py_INCREF(state1_t);

        if (state2_length > -1)
            state2_t=PyTuple_New(state2_length);
        else
            Py_INCREF(state2_t);

        PyTuple_SetItem(ret, 0, state1_t);
        PyTuple_SetItem(ret, 1, state2_t);

        for (int i=0; i < b2Max(state1_length, state2_length); i++) {
            if (i < state1_length)
                PyTuple_SetItem(state1_t, i, SWIG_From_int(state1[i]));
            if (i < state2_length)
                PyTuple_SetItem(state2_t, i, SWIG_From_int(state2[i]));
        }
        return ret;
   }


    class b2ContactPoint
    {
    public:
        b2ContactPoint() : fixtureA(NULL), fixtureB(NULL), state(b2_nullState) {
            normal.SetZero();
            position.SetZero();
        }
        ~b2ContactPoint() {}

        b2Fixture* fixtureA;
        b2Fixture* fixtureB;
        b2Vec2 normal;
        b2Vec2 position;
        b2PointState state;
    };

SWIGINTERN long b2ContactPoint___hash__(b2ContactPoint *self){ return (long)self; }

  #define SWIG_From_long   PyInt_FromLong 


    b2TOIOutput* _b2TimeOfImpact(b2Shape* shapeA, int idxA, b2Shape* shapeB, int idxB, b2Sweep& sweepA, b2Sweep& sweepB, float32 tMax) {
        b2TOIInput input;
        b2TOIOutput* out=new b2TOIOutput;

        input.proxyA.Set(shapeA, idxA);
        input.proxyB.Set(shapeB, idxB);
        input.sweepA = sweepA;
        input.sweepB = sweepB;
        input.tMax = tMax;

        b2TimeOfImpact(out, &input);
        return out;
    }
    b2TOIOutput* _b2TimeOfImpact(b2TOIInput* input) {
        b2TOIOutput* out=new b2TOIOutput;
        b2TimeOfImpact(out, input);
        return out;
    }

SWIGINTERN long b2AssertException___hash__(b2AssertException *self){ return (long)self; }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}




SWIGINTERN long b2Version___hash__(b2Version *self){ return (long)self; }
SWIGINTERN long b2Vec2___hash__(b2Vec2 *self){ return (long)self; }
SWIGINTERN b2Vec2 *new_b2Vec2__SWIG_1(){
        return new b2Vec2(0.0f, 0.0f);
    }
SWIGINTERN b2Vec2 *new_b2Vec2__SWIG_2(b2Vec2 &other){
        return new b2Vec2(other.x, other.y);
    }
SWIGINTERN float32 b2Vec2_cross__SWIG_0(b2Vec2 *self,b2Vec2 &other){
        return self->x * other.y - self->y * other.x;
    }
SWIGINTERN b2Vec2 b2Vec2_cross__SWIG_1(b2Vec2 *self,float32 s){
        return b2Vec2(s * self->y, -s * self->x);
    }
SWIGINTERN float32 b2Vec2___getitem__(b2Vec2 *self,int i){
        if (i==0) 
            return self->x;
        else if (i==1) 
            return self->y;
        PyErr_SetString(PyExc_IndexError, "Index must be in (0,1)");
        return 0.0f;
    }
SWIGINTERN void b2Vec2___setitem__(b2Vec2 *self,int i,float32 value){
        if (i==0) 
            self->x=value;
        else if (i==1) 
            self->y=value;
        else
            PyErr_SetString(PyExc_IndexError, "Index must be in (0,1)");
    }
SWIGINTERN bool b2Vec2___equ(b2Vec2 *self,b2Vec2 &other){
        return (self->x == other.x && self->y == other.y);
    }
SWIGINTERN float32 b2Vec2_dot(b2Vec2 *self,b2Vec2 &other){
        return self->x * other.x + self->y * other.y;
    }
SWIGINTERN b2Vec2 b2Vec2___truediv__(b2Vec2 *self,float32 a){ //python 3k
        return b2Vec2(self->x / a, self->y / a);
    }
SWIGINTERN b2Vec2 b2Vec2___div__(b2Vec2 *self,float32 a){
        return b2Vec2(self->x / a, self->y / a);
    }
SWIGINTERN b2Vec2 b2Vec2___mul__(b2Vec2 *self,float32 a){
        return b2Vec2(self->x * a, self->y * a);
    }
SWIGINTERN b2Vec2 b2Vec2___add__(b2Vec2 *self,b2Vec2 *other){
        return b2Vec2(self->x + other->x, self->y + other->y);
    }
SWIGINTERN b2Vec2 b2Vec2___sub__(b2Vec2 *self,b2Vec2 *other){
        return b2Vec2(self->x - other->x, self->y - other->y);
    }
SWIGINTERN b2Vec2 b2Vec2___rmul__(b2Vec2 *self,float32 a){
        return b2Vec2(self->x * a, self->y * a);
    }
SWIGINTERN b2Vec2 b2Vec2___rdiv__(b2Vec2 *self,float32 a){
        return b2Vec2(self->x / a, self->y / a);
    }
SWIGINTERN void b2Vec2___div_float(b2Vec2 *self,float32 a){
        self->x /= a;
        self->y /= a;
    }
SWIGINTERN long b2Vec3___hash__(b2Vec3 *self){ return (long)self; }
SWIGINTERN b2Vec3 *new_b2Vec3__SWIG_1(){
        return new b2Vec3(0.0f, 0.0f, 0.0f);
    }
SWIGINTERN b2Vec3 *new_b2Vec3__SWIG_2(b2Vec3 &other){
        return new b2Vec3(other.x, other.y, other.z);
    }
SWIGINTERN b2Vec3 *new_b2Vec3__SWIG_3(b2Vec2 &other){
        return new b2Vec3(other.x, other.y, 0.0f);
    }
SWIGINTERN b2Vec3 b2Vec3_cross(b2Vec3 *self,b2Vec3 &b){
        return b2Vec3(self->y * b.z - self->z * b.y, self->z * b.x - self->x * b.z, self->x * b.y - self->y * b.x);
    }
SWIGINTERN float32 b2Vec3___getitem__(b2Vec3 *self,int i){
        if (i==0) 
            return self->x;
        else if (i==1) 
            return self->y;
        else if (i==2) 
            return self->z;
        PyErr_SetString(PyExc_IndexError, "Index must be in (0,1,2)");
        return 0.0f;
    }
SWIGINTERN void b2Vec3___setitem__(b2Vec3 *self,int i,float32 value){
        if (i==0) 
            self->x=value;
        else if (i==1) 
            self->y=value;
        else if (i==2) 
            self->z=value;
        else
            PyErr_SetString(PyExc_IndexError, "Index must be in (0,1,2)");
    }
SWIGINTERN bool b2Vec3___IsValid(b2Vec3 *self){
        return b2IsValid(self->x) && b2IsValid(self->y) && b2IsValid(self->z);
    }
SWIGINTERN float32 b2Vec3___Length(b2Vec3 *self){
        return b2Sqrt(self->x * self->x + self->y * self->y + self->z * self->z);
    }
SWIGINTERN float32 b2Vec3___LengthSquared(b2Vec3 *self){
        return (self->x * self->x + self->y * self->y + self->z * self->z);
    }
SWIGINTERN b2Vec3 b2Vec3___truediv__(b2Vec3 *self,float32 a){
        return b2Vec3(self->x / a, self->y / a, self->z / a);
    }
SWIGINTERN b2Vec3 b2Vec3___div__(b2Vec3 *self,float32 a){
        return b2Vec3(self->x / a, self->y / a, self->z / a);
    }
SWIGINTERN b2Vec3 b2Vec3___mul__(b2Vec3 *self,float32 a){
        return b2Vec3(self->x * a, self->y * a, self->z * a);
    }
SWIGINTERN b2Vec3 b2Vec3___add__(b2Vec3 *self,b2Vec3 *other){
        return b2Vec3(self->x + other->x, self->y + other->y, self->z + other->z);
    }
SWIGINTERN b2Vec3 b2Vec3___sub__(b2Vec3 *self,b2Vec3 *other){
        return b2Vec3(self->x - other->x, self->y - other->y, self->z - other->z);
    }
SWIGINTERN b2Vec3 b2Vec3___rmul__(b2Vec3 *self,float32 a){
        return b2Vec3(self->x * a, self->y * a, self->z * a);
    }
SWIGINTERN b2Vec3 b2Vec3___rdiv__(b2Vec3 *self,float32 a){
        return b2Vec3(self->x / a, self->y / a, self->z / a);
    }
SWIGINTERN void b2Vec3___div_float(b2Vec3 *self,float32 a){
        self->x /= a;
        self->y /= a;
        self->z /= a;
    }
SWIGINTERN long b2Mat22___hash__(b2Mat22 *self){ return (long)self; }
SWIGINTERN b2Mat22 *new_b2Mat22__SWIG_2(){
        return new b2Mat22(b2Vec2(1.0f, 0.0f), b2Vec2(0.0f, 1.0f));
    }
SWIGINTERN float32 b2Mat22___GetAngle(b2Mat22 const *self){
        return b2Atan2(self->ex.y, self->ex.x);
    }
SWIGINTERN void b2Mat22___SetAngle__SWIG_1(b2Mat22 *self,float32 angle){
        float32 c = cosf(angle), s = sinf(angle);
        self->ex.x = c; self->ey.x = -s;
        self->ex.y = s; self->ey.y = c;
    }
SWIGINTERN b2Vec2 b2Mat22___mul____SWIG_0(b2Mat22 *self,b2Vec2 *v){
        return b2Vec2(self->ex.x * v->x + self->ey.x * v->y,
                      self->ex.y * v->x + self->ey.y * v->y);
    }
SWIGINTERN b2Mat22 b2Mat22___mul____SWIG_1(b2Mat22 *self,b2Mat22 *m){
        return b2Mat22(b2Mul(*(self), m->ex), b2Mul(*(self), m->ey));
    }
SWIGINTERN b2Mat22 b2Mat22___add__(b2Mat22 *self,b2Mat22 *m){
        return b2Mat22(self->ex + m->ex, self->ey + m->ey);
    }
SWIGINTERN b2Mat22 b2Mat22___sub__(b2Mat22 *self,b2Mat22 *m){
        return b2Mat22(self->ex - m->ex, self->ey - m->ey);
    }
SWIGINTERN void b2Mat22___iadd(b2Mat22 *self,b2Mat22 *m){
        self->ex += m->ex;
        self->ey += m->ey;
    }
SWIGINTERN void b2Mat22___isub(b2Mat22 *self,b2Mat22 *m){
        self->ex -= m->ex;
        self->ey -= m->ey;
    }
SWIGINTERN long b2Mat33___hash__(b2Mat33 *self){ return (long)self; }
SWIGINTERN b2Mat33 *new_b2Mat33__SWIG_1(){
        return new b2Mat33(b2Vec3(1.0f, 0.0f, 0.0f),
                           b2Vec3(0.0f, 1.0f, 0.0f),
                           b2Vec3(0.0f, 0.0f, 1.0f));
    }
SWIGINTERN b2Vec3 b2Mat33___mul__(b2Mat33 *self,b2Vec3 &v){
        return v.x * self->ex + v.y * self->ey + v.z * self->ez;
    }
SWIGINTERN b2Mat33 b2Mat33___add__(b2Mat33 *self,b2Mat33 *other){
        return b2Mat33(self->ex + other->ex, self->ey + other->ey, self->ez + other->ez);
    }
SWIGINTERN b2Mat33 b2Mat33___sub__(b2Mat33 *self,b2Mat33 *other){
        return b2Mat33(self->ex - other->ex, self->ey - other->ey, self->ez - other->ez);
    }
SWIGINTERN void b2Mat33___iadd(b2Mat33 *self,b2Mat33 *other){
        self->ex += other->ex;
        self->ey += other->ey;
        self->ez += other->ez;
    }
SWIGINTERN void b2Mat33___isub(b2Mat33 *self,b2Mat33 *other){
        self->ex -= other->ex;
        self->ey -= other->ey;
        self->ez -= other->ez;
    }
SWIGINTERN b2Vec2 b2Rot___mul__(b2Rot *self,b2Vec2 &v){
        return b2Mul(*(self), v);
    }
SWIGINTERN long b2Transform___hash__(b2Transform *self){ return (long)self; }
SWIGINTERN b2Rot b2Transform___get_rotation_matrix(b2Transform *self){
        return self->q;
    }
SWIGINTERN b2Vec2 b2Transform___mul__(b2Transform *self,b2Vec2 &v){
        float32 x = (self->q.c * v.x - self->q.s * v.y) + self->p.x;
        float32 y = (self->q.s * v.x + self->q.c * v.y) + self->p.y;

        return b2Vec2(x, y);
    }
SWIGINTERN long b2Sweep___hash__(b2Sweep *self){ return (long)self; }
SWIGINTERN b2Transform *b2Sweep_GetTransform__SWIG_1(b2Sweep *self,float32 alpha){
        b2Transform* out=new b2Transform;
        self->GetTransform(out, alpha);
        return out;
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN long b2ContactFeature___hash__(b2ContactFeature *self){ return (long)self; }
SWIGINTERN long b2ContactID___hash__(b2ContactID *self){ return (long)self; }
SWIGINTERN long b2ManifoldPoint___hash__(b2ManifoldPoint *self){ return (long)self; }
SWIGINTERN long b2Manifold___hash__(b2Manifold *self){ return (long)self; }
SWIGINTERN b2ManifoldPoint *b2Manifold___GetPoint(b2Manifold *self,int i){
        if (i >= b2_maxManifoldPoints || i >= self->pointCount)
            return NULL;
        return &( self->points[i] );
    }
SWIGINTERN long b2WorldManifold___hash__(b2WorldManifold *self){ return (long)self; }
SWIGINTERN PyObject *b2WorldManifold___get_points(b2WorldManifold *self){
        PyObject* ret=PyTuple_New(b2_maxManifoldPoints);
        PyObject* point;
        for (int i=0; i < b2_maxManifoldPoints; i++) {
            point = PyTuple_New(2);
            PyTuple_SetItem(point, 0, SWIG_From_double((float32)self->points[i].x));
            PyTuple_SetItem(point, 1, SWIG_From_double((float32)self->points[i].y));

            PyTuple_SetItem(ret, i, point);
        }
        return ret;
    }
SWIGINTERN long b2ClipVertex___hash__(b2ClipVertex *self){ return (long)self; }
SWIGINTERN long b2RayCastInput___hash__(b2RayCastInput *self){ return (long)self; }
SWIGINTERN long b2RayCastOutput___hash__(b2RayCastOutput *self){ return (long)self; }
SWIGINTERN long b2AABB___hash__(b2AABB *self){ return (long)self; }
SWIGINTERN bool b2AABB___contains____SWIG_1(b2AABB *self,b2Vec2 const &point){
        //If point is in aabb (including a small buffer around it), return true.
        if (point.x < (self->upperBound.x + FLT_EPSILON) &&
            point.x > (self->lowerBound.x - FLT_EPSILON) &&
            point.y < (self->upperBound.y + FLT_EPSILON) &&
            point.y > (self->lowerBound.y - FLT_EPSILON))
                return true;
        return false;
    }
SWIGINTERN bool b2AABB_overlaps(b2AABB *self,b2AABB const &aabb2){
        //If aabb and aabb2 overlap, return true. (modified from b2BroadPhase::InRange)
        b2Vec2 d = b2Max(self->lowerBound - aabb2.upperBound, aabb2.lowerBound - self->upperBound);
        return b2Max(d.x, d.y) < 0.0f;
    }

typedef b2Vec2 _b2Vec2Array;


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN _b2Vec2Array *new__b2Vec2Array(size_t nelements){
    return (new b2Vec2[nelements]());
  }
SWIGINTERN void delete__b2Vec2Array(_b2Vec2Array *self){
    delete[] self;
  }
SWIGINTERN b2Vec2 _b2Vec2Array___getitem__(_b2Vec2Array *self,size_t index){
    return self[index];
  }
SWIGINTERN void _b2Vec2Array___setitem__(_b2Vec2Array *self,size_t index,b2Vec2 value){
    self[index] = value;
  }
SWIGINTERN b2Vec2 *_b2Vec2Array_cast(_b2Vec2Array *self){
    return self;
  }
SWIGINTERN _b2Vec2Array *_b2Vec2Array_frompointer(b2Vec2 *t){
    return static_cast< _b2Vec2Array * >(t);
  }
SWIGINTERN long b2Color___hash__(b2Color *self){ return (long)self; }
SWIGINTERN b2Color *new_b2Color__SWIG_2(b2Color &other){
        return new b2Color(other.r, other.g, other.b);
    }
SWIGINTERN PyObject *b2Color___get_bytes(b2Color *self){
        PyObject* ret=PyList_New(3);
        PyList_SetItem(ret, 0, SWIG_From_int((int)(255*self->r)));
        PyList_SetItem(ret, 1, SWIG_From_int((int)(255*self->g)));
        PyList_SetItem(ret, 2, SWIG_From_int((int)(255*self->b)));
        return ret;
    }
SWIGINTERN float32 b2Color___getitem__(b2Color *self,int i){
        if (i==0) 
            return self->r;
        else if (i==1) 
            return self->g;
        else if (i==2) 
            return self->b;

        PyErr_SetString(PyExc_IndexError, "Index must be in (0,1,2)");
        return 0.0f;
    }
SWIGINTERN void b2Color___setitem__(b2Color *self,int i,float32 value){
        if (i==0) 
            self->r=value;
        else if (i==1) 
            self->g=value;
        else if (i==2) 
            self->b=value;
        else
            PyErr_SetString(PyExc_IndexError, "Index must be in (0,1,2)");
    }
SWIGINTERN b2Color b2Color___truediv__(b2Color *self,float32 a){
        return b2Color(self->r / a, self->g / a, self->b / a);
    }
SWIGINTERN b2Color b2Color___add__(b2Color *self,b2Color &o){
        return b2Color(self->r + o.r, self->g + o.g, self->b + o.b);
    }
SWIGINTERN b2Color b2Color___sub__(b2Color *self,b2Color &o){
        return b2Color(self->r - o.r, self->g - o.g, self->b - o.b);
    }
SWIGINTERN b2Color b2Color___div__(b2Color *self,float32 a){
        return b2Color(self->r / a, self->g / a, self->b / a);
    }
SWIGINTERN b2Color b2Color___rmul__(b2Color *self,float32 a){
        return b2Color(self->r * a, self->g * a, self->b * a);
    }
SWIGINTERN b2Color b2Color___mul__(b2Color *self,float32 a){
        return b2Color(self->r * a, self->g * a, self->b * a);
    }
SWIGINTERN void b2Color___isub(b2Color *self,b2Color &o){
        self->r -= o.r;
        self->g -= o.g;
        self->b -= o.b;
    }
SWIGINTERN void b2Color___itruediv(b2Color *self,b2Color &o){
        self->r /= o.r;
        self->g /= o.g;
        self->b /= o.b;
    }
SWIGINTERN void b2Color___idiv(b2Color *self,b2Color &o){
        self->r /= o.r;
        self->g /= o.g;
        self->b /= o.b;
    }
SWIGINTERN void b2Color___imul(b2Color *self,b2Color &o){
        self->r *= o.r;
        self->g *= o.g;
        self->b *= o.b;
    }
SWIGINTERN void b2Color___iadd(b2Color *self,b2Color &o){
        self->r += o.r;
        self->g += o.g;
        self->b += o.b;
    }
SWIGINTERN bool b2Color___equ(b2Color *self,b2Color &b){
        return (self->r == b.r && self->g==b.g && self->b==b.b);
    }
SWIGINTERN long b2Draw___hash__(b2Draw *self){ return (long)self; }

    class b2DrawExtended : public b2Draw {
    public:
        bool convertVertices;
        b2Vec2 center;
        b2Vec2 offset;
        float32 zoom;
        b2Vec2 screenSize;
        bool flipY, flipX;

        PyObject* __Convert(const b2Vec2* verts, int32 vertexCount) {
            PyObject* ret=PyTuple_New(vertexCount);
            if (GetFlags() & 0x1000) {
                // Convert the verts
                PyObject* vertex;
                long x, y;
                for (int i=0; i < vertexCount; i++) {
                    vertex = PyTuple_New(2);

                    x=(long)((verts[i].x * zoom) - offset.x);
                    if (flipX) { x = (long)screenSize.x - x; }

                    y=(long)(((verts[i].y * zoom) - offset.y));
                    if (flipY) { y = (long)screenSize.y - y; }

                    PyTuple_SetItem(vertex, 0, SWIG_From_long(x));
                    PyTuple_SetItem(vertex, 1, SWIG_From_long(y));

                    PyTuple_SetItem(ret, i, vertex);
                }
            } else {
                // Pass the verts in as-is
                PyObject* vertex;
                for (int i=0; i < vertexCount; i++) {
                    vertex = PyTuple_New(2);
                    PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)verts[i].x));
                    PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)verts[i].y));

                    PyTuple_SetItem(ret, i, vertex);
                }
            }
            return ret;
        }

        PyObject* to_screen(b2Vec2& point) {
            long x=(long)((point.x * zoom) - offset.x);
            if (flipX) { x = (long)screenSize.x - x; }

            long y=(long)(((point.y * zoom) - offset.y));
            if (flipY) { y = (long)screenSize.y - y; }

            PyObject* ret = PyTuple_New(2);
            PyTuple_SetItem(ret, 0, SWIG_From_long(x));
            PyTuple_SetItem(ret, 1, SWIG_From_long(y));
            return ret;

        }

        virtual void DrawPolygon(const b2Vec2* conv_vertices, int32 vertexCount, const b2Color& color) = 0;
        virtual void DrawSolidPolygon(const b2Vec2* conv_vertices, int32 vertexCount, const b2Color& color) = 0;
        virtual void DrawCircle(const b2Vec2& conv_p1, float32 radius, const b2Color& color) = 0;
        virtual void DrawSolidCircle(const b2Vec2& conv_p1, float32 radius, const b2Vec2& axis, const b2Color& color) = 0;
        virtual void DrawSegment(const b2Vec2& conv_p1, const b2Vec2& conv_p2, const b2Color& color) = 0;
        virtual void DrawTransform(const b2Transform& xf) = 0;

        void __SetFlags(uint32 flags) {
            if (convertVertices)
                SetFlags(0x1000 | flags);
            else 
                SetFlags(flags);
        }

        virtual ~b2DrawExtended() { }
        b2DrawExtended() : convertVertices(false), flipY(false), flipX(false) {
            center.SetZero();
            offset.SetZero();
            zoom=1.0;
            screenSize.SetZero();
            SetFlags(convertVertices ? 0x1000 : 0x00);
        }

    };

SWIGINTERN long b2DrawExtended___hash__(b2DrawExtended *self){ return (long)self; }
SWIGINTERN long b2MassData___hash__(b2MassData *self){ return (long)self; }
SWIGINTERN long b2Shape___hash__(b2Shape *self){ return (long)self; }
SWIGINTERN long b2CircleShape___hash__(b2CircleShape *self){ return (long)self; }
SWIGINTERN long b2EdgeShape___hash__(b2EdgeShape *self){ return (long)self; }
SWIGINTERN long b2ChainShape___hash__(b2ChainShape *self){ return (long)self; }
SWIGINTERN PyObject *b2ChainShape___get_vertices(b2ChainShape *self){
        if (!self->m_vertices) {
            Py_INCREF(Py_None);
            return Py_None;
        }

        PyObject* ret=PyList_New(self->m_count);
        PyObject* vertex;

        for (int i=0; i < self->m_count; i++) {
            vertex = PyTuple_New(2);
            PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)self->m_vertices[i].x));
            PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)self->m_vertices[i].y));
            PyList_SetItem(ret, i, vertex);
        }
        return ret;
    }
SWIGINTERN void b2ChainShape___create(b2ChainShape *self,_b2Vec2Array *v,int c,bool loop){
        if (v) {
            if (loop)
                self->CreateLoop(v, c);
            else
                self->CreateChain(v, c);
        }
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN b2Vec2 const *b2ChainShape___get_vertex(b2ChainShape *self,uint16 vnum){
        if (vnum >= self->m_count) return NULL;
        return &(self->m_vertices[vnum]);
    }
SWIGINTERN int32 b2ChainShape___get_count(b2ChainShape *self){
        return self->m_count;
    }
SWIGINTERN long b2PolygonShape___hash__(b2PolygonShape *self){ return (long)self; }
SWIGINTERN PyObject *b2PolygonShape___get_vertices(b2PolygonShape *self){
        PyObject* ret=PyList_New(self->m_count);
        PyObject* vertex;
        for (int i=0; i < self->m_count; i++) {
            vertex = PyTuple_New(2);
            PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)self->m_vertices[i].x));
            PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)self->m_vertices[i].y));
            PyList_SetItem(ret, i, vertex);
        }
        return ret;
    }
SWIGINTERN PyObject *b2PolygonShape___get_normals(b2PolygonShape *self){
        PyObject* ret=PyList_New(self->m_count);
        PyObject* vertex;
        for (int i=0; i < self->m_count; i++) {
            vertex = PyTuple_New(2);
            PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)self->m_normals[i].x));
            PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)self->m_normals[i].y));
            PyList_SetItem(ret, i, vertex);
        }
        return ret;
    }
SWIGINTERN b2Vec2 const *b2PolygonShape___get_vertex(b2PolygonShape *self,uint16 vnum){
        if (vnum >= 16) return NULL;
        return &( self->m_vertices[vnum] );
    }
SWIGINTERN b2Vec2 const *b2PolygonShape___get_normal(b2PolygonShape *self,uint16 vnum){
        if (vnum >= 16) return NULL;
        return &( self->m_normals[vnum] );
    }
SWIGINTERN void b2PolygonShape_set_vertex__SWIG_0(b2PolygonShape *self,uint16 vnum,b2Vec2 &value){
        if (vnum < 16)
            self->m_vertices[vnum].Set(value.x, value.y);
    }
SWIGINTERN void b2PolygonShape_set_vertex__SWIG_1(b2PolygonShape *self,uint16 vnum,float32 x,float32 y){
        if (vnum < 16)
            self->m_vertices[vnum].Set(x, y);
    }
SWIGINTERN void b2PolygonShape___set_vertices_internal__SWIG_1(b2PolygonShape *self){
        self->Set(self->m_vertices, self->m_count);
    }
SWIGINTERN long b2Pair___hash__(b2Pair *self){ return (long)self; }
SWIGINTERN long b2BroadPhase___hash__(b2BroadPhase *self){ return (long)self; }
SWIGINTERN long b2DistanceProxy___hash__(b2DistanceProxy *self){ return (long)self; }
SWIGINTERN long b2DistanceInput___hash__(b2DistanceInput *self){ return (long)self; }
SWIGINTERN long b2DistanceOutput___hash__(b2DistanceOutput *self){ return (long)self; }
SWIGINTERN long b2TOIInput___hash__(b2TOIInput *self){ return (long)self; }
SWIGINTERN long b2TOIOutput___hash__(b2TOIOutput *self){ return (long)self; }
SWIGINTERN long b2BodyDef___hash__(b2BodyDef *self){ return (long)self; }
SWIGINTERN PyObject *b2BodyDef___GetUserData(b2BodyDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2BodyDef___SetUserData(b2BodyDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2BodyDef_ClearUserData(b2BodyDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN long b2Body___hash__(b2Body *self){ return (long)self; }
SWIGINTERN void b2Body_DestroyFixture(b2Body *self,b2Fixture *fixture){
        void *userData = fixture->GetUserData();
        self->DestroyFixture(fixture);
        Py_XDECREF((PyObject*)userData);
    }
SWIGINTERN b2Fixture *b2Body___CreateFixture__SWIG_1(b2Body *self,b2FixtureDef *defn){
        b2Fixture* ret;
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);
        ret=self->CreateFixture(defn);
        return ret;
    }
SWIGINTERN PyObject *b2Body___GetUserData(b2Body *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Body___SetUserData(b2Body *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Body_ClearUserData(b2Body *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }

SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN long b2Filter___hash__(b2Filter *self){ return (long)self; }
SWIGINTERN long b2FixtureDef___hash__(b2FixtureDef *self){ return (long)self; }
SWIGINTERN PyObject *b2FixtureDef___GetUserData(b2FixtureDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2FixtureDef___SetUserData(b2FixtureDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2FixtureDef_ClearUserData(b2FixtureDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN long b2FixtureProxy___hash__(b2FixtureProxy *self){ return (long)self; }
SWIGINTERN long b2Fixture___hash__(b2Fixture *self){ return (long)self; }
SWIGINTERN PyObject *b2Fixture___GetUserData(b2Fixture *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Fixture___SetUserData(b2Fixture *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Fixture_ClearUserData(b2Fixture *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }
SWIGINTERN void delete_b2Fixture(b2Fixture *self){
    }
SWIGINTERN long b2DestructionListener___hash__(b2DestructionListener *self){ return (long)self; }
SWIGINTERN long b2ContactFilter___hash__(b2ContactFilter *self){ return (long)self; }
SWIGINTERN long b2ContactImpulse___hash__(b2ContactImpulse *self){ return (long)self; }
SWIGINTERN PyObject *b2ContactImpulse___get_normal_impulses(b2ContactImpulse *self){
        PyObject* ret = PyTuple_New(self->count);
        for (int i=0; i < self->count; i++)
            PyTuple_SetItem(ret, i, SWIG_From_double((float32)(self->normalImpulses[i])));
        return ret;
    }
SWIGINTERN PyObject *b2ContactImpulse___get_tangent_impulses(b2ContactImpulse *self){
        PyObject* ret = PyTuple_New(self->count);
        for (int i=0; i < self->count; i++)
            PyTuple_SetItem(ret, i, SWIG_From_double((float32)(self->tangentImpulses[i])));
        return ret;
    }
SWIGINTERN long b2ContactListener___hash__(b2ContactListener *self){ return (long)self; }
SWIGINTERN long b2QueryCallback___hash__(b2QueryCallback *self){ return (long)self; }
SWIGINTERN long b2RayCastCallback___hash__(b2RayCastCallback *self){ return (long)self; }
SWIGINTERN long b2ContactManager___hash__(b2ContactManager *self){ return (long)self; }
SWIGINTERN long b2World___hash__(b2World *self){ return (long)self; }
SWIGINTERN b2Body *b2World___CreateBody(b2World *self,b2BodyDef *defn){
        b2Body* ret;
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);
        ret=self->CreateBody(defn);
        return ret;
    }
SWIGINTERN b2Joint *b2World___CreateJoint(b2World *self,b2JointDef *defn){
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);

        return self->CreateJoint(defn);
    }
SWIGINTERN void b2World_DestroyBody(b2World *self,b2Body *body){
        void *userData = body->GetUserData();
        self->DestroyBody(body);
        Py_XDECREF((PyObject*)userData);
    }
SWIGINTERN void b2World_DestroyJoint(b2World *self,b2Joint *joint){
        void *userData = joint->GetUserData();
        self->DestroyJoint(joint);
        Py_XDECREF((PyObject*)userData);
    }
SWIGINTERN long b2ContactEdge___hash__(b2ContactEdge *self){ return (long)self; }
SWIGINTERN long b2Contact___hash__(b2Contact *self){ return (long)self; }
SWIGINTERN long b2Jacobian___hash__(b2Jacobian *self){ return (long)self; }
SWIGINTERN long b2JointEdge___hash__(b2JointEdge *self){ return (long)self; }
SWIGINTERN long b2JointDef___hash__(b2JointDef *self){ return (long)self; }
SWIGINTERN PyObject *b2JointDef___GetUserData(b2JointDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2JointDef___SetUserData(b2JointDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2JointDef_ClearUserData(b2JointDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN long b2Joint___hash__(b2Joint *self){ return (long)self; }
SWIGINTERN PyObject *b2Joint___GetUserData(b2Joint *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Joint___SetUserData(b2Joint *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Joint_ClearUserData(b2Joint *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }
SWIGINTERN long b2DistanceJointDef___hash__(b2DistanceJointDef *self){ return (long)self; }
SWIGINTERN long b2DistanceJoint___hash__(b2DistanceJoint *self){ return (long)self; }
SWIGINTERN long b2FrictionJointDef___hash__(b2FrictionJointDef *self){ return (long)self; }
SWIGINTERN long b2FrictionJoint___hash__(b2FrictionJoint *self){ return (long)self; }
SWIGINTERN long b2GearJointDef___hash__(b2GearJointDef *self){ return (long)self; }
SWIGINTERN long b2GearJoint___hash__(b2GearJoint *self){ return (long)self; }
SWIGINTERN long b2MouseJointDef___hash__(b2MouseJointDef *self){ return (long)self; }
SWIGINTERN long b2MouseJoint___hash__(b2MouseJoint *self){ return (long)self; }
SWIGINTERN long b2PrismaticJointDef___hash__(b2PrismaticJointDef *self){ return (long)self; }
SWIGINTERN long b2PrismaticJoint___hash__(b2PrismaticJoint *self){ return (long)self; }
SWIGINTERN long b2PulleyJointDef___hash__(b2PulleyJointDef *self){ return (long)self; }
SWIGINTERN long b2PulleyJoint___hash__(b2PulleyJoint *self){ return (long)self; }
SWIGINTERN long b2RevoluteJointDef___hash__(b2RevoluteJointDef *self){ return (long)self; }
SWIGINTERN long b2RevoluteJoint___hash__(b2RevoluteJoint *self){ return (long)self; }
SWIGINTERN long b2RopeJointDef___hash__(b2RopeJointDef *self){ return (long)self; }
SWIGINTERN long b2RopeJoint___hash__(b2RopeJoint *self){ return (long)self; }
SWIGINTERN long b2WeldJointDef___hash__(b2WeldJointDef *self){ return (long)self; }
SWIGINTERN long b2WeldJoint___hash__(b2WeldJoint *self){ return (long)self; }
SWIGINTERN long b2WheelJointDef___hash__(b2WheelJointDef *self){ return (long)self; }
SWIGINTERN long b2WheelJoint___hash__(b2WheelJoint *self){ return (long)self; }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Box2D_wrap.h"

SwigDirector_b2Draw::SwigDirector_b2Draw(PyObject *self): b2Draw(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2Draw *)this, this);  }
SwigDirector_b2Draw::~SwigDirector_b2Draw() {
}

void SwigDirector_b2Draw::DrawPolygon(b2Vec2 const *vertices,int32 vertexCount,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(vertexCount); PyObject* vertex; for (int i=0; i < vertexCount; i++) {
      vertex = PyTuple_New(2); PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)vertices[i].x));
      PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)vertices[i].y)); PyTuple_SetItem(obj0, i, vertex); }  } 
  swig::SwigVar_PyObject obj1; obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) { Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "DrawPolygon";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawPolygon'"); }  }  }
void SwigDirector_b2Draw::DrawSolidPolygon(b2Vec2 const *vertices,int32 vertexCount,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(vertexCount); PyObject* vertex; for (int i=0; i < vertexCount; i++) {
      vertex = PyTuple_New(2); PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)vertices[i].x));
      PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)vertices[i].y)); PyTuple_SetItem(obj0, i, vertex); }  } 
  swig::SwigVar_PyObject obj1; obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) { Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char *const swig_method_name = "DrawSolidPolygon";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSolidPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawSolidPolygon'"); }  }  }
void SwigDirector_b2Draw::DrawCircle(b2Vec2 const &center,float32 radius,b2Color const &color) { swig::SwigVar_PyObject obj0; {
    obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)center.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)center.y)); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 2; const char *const swig_method_name = "DrawCircle";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawCircle'"); }  }  }
void SwigDirector_b2Draw::DrawSolidCircle(b2Vec2 const &center,float32 radius,b2Vec2 const &axis,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)center.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)center.y)); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2; { obj2 = PyTuple_New(2);
    PyTuple_SetItem( obj2, 0, SWIG_From_double((float32)axis.x)); PyTuple_SetItem( obj2, 1, SWIG_From_double((float32)axis.y)); }
   swig::SwigVar_PyObject obj3; obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) { Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 3; const char *const swig_method_name = "DrawSolidCircle";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSolidCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawSolidCircle'"); }  }  }
void SwigDirector_b2Draw::DrawSegment(b2Vec2 const &p1,b2Vec2 const &p2,b2Color const &color) { swig::SwigVar_PyObject obj0; {
    obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)p1.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)p1.y)); }  swig::SwigVar_PyObject obj1; { obj1 = PyTuple_New(2);
    PyTuple_SetItem( obj1, 0, SWIG_From_double((float32)p2.x)); PyTuple_SetItem( obj1, 1, SWIG_From_double((float32)p2.y)); } 
  swig::SwigVar_PyObject obj2; obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) { Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 4; const char *const swig_method_name = "DrawSegment";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSegment");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawSegment'"); }  }  }
void SwigDirector_b2Draw::DrawTransform(b2Transform const &xf) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&xf), SWIGTYPE_p_b2Transform,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2Draw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 5; const char *const swig_method_name = "DrawTransform";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawTransform");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2Draw.DrawTransform'"); }  }  }
SwigDirector_b2DrawExtended::SwigDirector_b2DrawExtended(PyObject *self): b2DrawExtended(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2DrawExtended *)this, this);  }
SwigDirector_b2DrawExtended::~SwigDirector_b2DrawExtended() {
}

void SwigDirector_b2DrawExtended::DrawPolygon(b2Vec2 const *conv_vertices,int32 vertexCount,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = this->__Convert(conv_vertices, vertexCount); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "DrawPolygon";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawPolygon'"); }  }  }
void SwigDirector_b2DrawExtended::DrawSolidPolygon(b2Vec2 const *conv_vertices,int32 vertexCount,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = this->__Convert(conv_vertices, vertexCount); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char *const swig_method_name = "DrawSolidPolygon";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSolidPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawSolidPolygon'"); }  }  }
void SwigDirector_b2DrawExtended::DrawCircle(b2Vec2 const &conv_p1,float32 radius,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = this->to_screen((b2Vec2&)conv_p1); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 2; const char *const swig_method_name = "DrawCircle";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawCircle'"); }  }  }
void SwigDirector_b2DrawExtended::DrawSolidCircle(b2Vec2 const &conv_p1,float32 radius,b2Vec2 const &axis,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = this->to_screen((b2Vec2&)conv_p1); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2; { obj2 = PyTuple_New(2);
    PyTuple_SetItem( obj2, 0, SWIG_From_double((float32)axis.x)); PyTuple_SetItem( obj2, 1, SWIG_From_double((float32)axis.y)); }
   swig::SwigVar_PyObject obj3; obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 3; const char *const swig_method_name = "DrawSolidCircle";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSolidCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawSolidCircle'"); }  }  }
void SwigDirector_b2DrawExtended::DrawSegment(b2Vec2 const &conv_p1,b2Vec2 const &conv_p2,b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = this->to_screen((b2Vec2&)conv_p1); }  swig::SwigVar_PyObject obj1; {
    obj1 = this->to_screen((b2Vec2&)conv_p2); }  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 4; const char *const swig_method_name = "DrawSegment";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawSegment");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawSegment'"); }  }  }
void SwigDirector_b2DrawExtended::DrawTransform(b2Transform const &xf) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&xf), SWIGTYPE_p_b2Transform,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DrawExtended.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 5; const char *const swig_method_name = "DrawTransform";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("DrawTransform");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DrawExtended.DrawTransform'"); }  }  }
SwigDirector_b2DestructionListener::SwigDirector_b2DestructionListener(PyObject *self): b2DestructionListener(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2DestructionListener *)this, this);  }
SwigDirector_b2DestructionListener::~SwigDirector_b2DestructionListener() {
}

void SwigDirector_b2DestructionListener::SayGoodbye(b2Joint *joint) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(joint), SWIGTYPE_p_b2Joint,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DestructionListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "SayGoodbye";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("SayGoodbye");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DestructionListener.SayGoodbye'"); }  }  }
void SwigDirector_b2DestructionListener::SayGoodbye(b2Fixture *fixture) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fixture), SWIGTYPE_p_b2Fixture,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DestructionListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char *const swig_method_name = "SayGoodbye";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("SayGoodbye");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DestructionListener.SayGoodbye'"); }  }  }
SwigDirector_b2ContactFilter::SwigDirector_b2ContactFilter(PyObject *self): b2ContactFilter(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2ContactFilter *)this, this);  }
SwigDirector_b2ContactFilter::~SwigDirector_b2ContactFilter() {
}

bool SwigDirector_b2ContactFilter::ShouldCollide(b2Fixture *fixtureA,b2Fixture *fixtureB) {
  bool c_result = SwigValueInit< bool >() ; swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fixtureA), SWIGTYPE_p_b2Fixture,  0 ); swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(fixtureB), SWIGTYPE_p_b2Fixture,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactFilter.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "ShouldCollide";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("ShouldCollide");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactFilter.ShouldCollide'"); }  }  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val); if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'"); }
   c_result = static_cast< bool >(swig_val); return (bool) c_result; }
SwigDirector_b2ContactListener::SwigDirector_b2ContactListener(PyObject *self): b2ContactListener(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2ContactListener *)this, this);  }
SwigDirector_b2ContactListener::~SwigDirector_b2ContactListener() {
}

void SwigDirector_b2ContactListener::BeginContact(b2Contact *contact) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(contact), SWIGTYPE_p_b2Contact,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "BeginContact";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("BeginContact");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.BeginContact'"); }  }  }
void SwigDirector_b2ContactListener::EndContact(b2Contact *contact) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(contact), SWIGTYPE_p_b2Contact,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char *const swig_method_name = "EndContact";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("EndContact");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.EndContact'"); }  }  }
void SwigDirector_b2ContactListener::PreSolve(b2Contact *contact,b2Manifold const *oldManifold) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(contact), SWIGTYPE_p_b2Contact,  0 ); swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(oldManifold), SWIGTYPE_p_b2Manifold,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 2; const char *const swig_method_name = "PreSolve";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("PreSolve");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.PreSolve'"); }  }  }
void SwigDirector_b2ContactListener::PostSolve(b2Contact *contact,b2ContactImpulse const *impulse) {
  swig::SwigVar_PyObject obj0; obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(contact), SWIGTYPE_p_b2Contact,  0 );
  swig::SwigVar_PyObject obj1; obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(impulse), SWIGTYPE_p_b2ContactImpulse,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 3; const char *const swig_method_name = "PostSolve";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("PostSolve");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.PostSolve'"); }  }  }
SwigDirector_b2QueryCallback::SwigDirector_b2QueryCallback(PyObject *self): b2QueryCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2QueryCallback *)this, this);  }
SwigDirector_b2QueryCallback::~SwigDirector_b2QueryCallback() {
}

bool SwigDirector_b2QueryCallback::ReportFixture(b2Fixture *fixture) { bool c_result = SwigValueInit< bool >() ;
  swig::SwigVar_PyObject obj0; obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fixture), SWIGTYPE_p_b2Fixture,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2QueryCallback.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "ReportFixture";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("ReportFixture");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2QueryCallback.ReportFixture'"); }  }  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val); if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'"); }
   c_result = static_cast< bool >(swig_val); return (bool) c_result; }
SwigDirector_b2RayCastCallback::SwigDirector_b2RayCastCallback(PyObject *self): b2RayCastCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2RayCastCallback *)this, this);  }
SwigDirector_b2RayCastCallback::~SwigDirector_b2RayCastCallback() {
}

float32 SwigDirector_b2RayCastCallback::ReportFixture(b2Fixture *fixture,b2Vec2 const &point,b2Vec2 const &normal,float32 fraction) {
  float32 c_result = SwigValueInit< float32 >() ; swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fixture), SWIGTYPE_p_b2Fixture,  0 ); swig::SwigVar_PyObject obj1; {
    obj1 = PyTuple_New(2); PyTuple_SetItem( obj1, 0, SWIG_From_double((float32)point.x));
    PyTuple_SetItem( obj1, 1, SWIG_From_double((float32)point.y)); }  swig::SwigVar_PyObject obj2; { obj2 = PyTuple_New(2);
    PyTuple_SetItem( obj2, 0, SWIG_From_double((float32)normal.x));
    PyTuple_SetItem( obj2, 1, SWIG_From_double((float32)normal.y)); }  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_float(static_cast< float >(fraction)); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2RayCastCallback.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char *const swig_method_name = "ReportFixture";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("ReportFixture");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2RayCastCallback.ReportFixture'"); }  } 
  float swig_val; int swig_res = SWIG_AsVal_float(result, &swig_val); if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""float32""'"); }
   c_result = static_cast< float32 >(swig_val); return (float32) c_result; }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int Swig_var_b2_toiMaxIters_set(PyObject *_val) { { int val; int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) { SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_toiMaxIters""' of type '""int32""'"); } 
    b2_toiMaxIters = static_cast< int32 >(val); }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_toiMaxIters_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_toiMaxIters)); return pyobj; }
SWIGINTERN int Swig_var_b2_toiMaxRootIters_set(PyObject *_val) { { int val; int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) { SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_toiMaxRootIters""' of type '""int32""'"); }
     b2_toiMaxRootIters = static_cast< int32 >(val); }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_toiMaxRootIters_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_toiMaxRootIters)); return pyobj; }
SWIGINTERN PyObject *_wrap___jointeq(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"a",  (char *)"b",  NULL } ;
  bool result; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__jointeq", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__jointeq" "', argument " "1"" of type '" "b2Joint *""'");  } 
  arg1 = reinterpret_cast< b2Joint * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__jointeq" "', argument " "2"" of type '" "b2Joint *""'");  } 
  arg2 = reinterpret_cast< b2Joint * >(argp2); { try { result = (bool)__jointeq(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___bodyeq(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"a",  (char *)"b",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__bodyeq", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__bodyeq" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__bodyeq" "', argument " "2"" of type '" "b2Body *""'");  } 
  arg2 = reinterpret_cast< b2Body * >(argp2); { try { result = (bool)__bodyeq(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___shapeeq(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"a",  (char *)"b",  NULL } ;
  bool result; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__shapeeq", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__shapeeq" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__shapeeq" "', argument " "2"" of type '" "b2Shape *""'");  } 
  arg2 = reinterpret_cast< b2Shape * >(argp2); { try { result = (bool)__shapeeq(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___fixtureeq(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"a",  (char *)"b",  NULL } ;
  bool result; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__fixtureeq", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__fixtureeq" "', argument " "1"" of type '" "b2Fixture *""'");  } 
  arg1 = reinterpret_cast< b2Fixture * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__fixtureeq" "', argument " "2"" of type '" "b2Fixture *""'");  } 
  arg2 = reinterpret_cast< b2Fixture * >(argp2); { try { result = (bool)__fixtureeq(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2ComputeCentroid(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"vs",  (char *)"count",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__b2ComputeCentroid", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2ComputeCentroid" "', argument " "1"" of type '" "b2Vec2 const *""'");  }
   arg1 = reinterpret_cast< b2Vec2 * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__b2ComputeCentroid" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); { try { result = __b2ComputeCentroid((b2Vec2 const *)arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2CheckVertices(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int32 arg2 ; bool arg3 = (bool) true ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; bool val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"vertices",  (char *)"count",  (char *)"additional_checks",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:b2CheckVertices", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CheckVertices" "', argument " "1"" of type '" "b2Vec2 *""'");  } 
  arg1 = reinterpret_cast< b2Vec2 * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2CheckVertices" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); if (obj2) { ecode3 = SWIG_AsVal_bool(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2CheckVertices" "', argument " "3"" of type '" "bool""'"); }  
    arg3 = static_cast< bool >(val3); }  { try { result = (bool)b2CheckVertices(arg1,arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CheckPolygon(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; bool arg2 = (bool) true ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"shape",  (char *)"additional_checks",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:b2CheckPolygon", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CheckPolygon" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); if (obj1) { ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2CheckPolygon" "', argument " "2"" of type '" "bool""'"); }  
    arg2 = static_cast< bool >(val2); }  { try { result = (bool)b2CheckPolygon(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (!result)  SWIG_fail; else
    resultobj = SWIG_From_bool(static_cast< bool >(result)); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Random__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; float32 result; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try { result = (float32)b2Random(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Random__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Random" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Random" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = (float32)b2Random(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Random(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Random", 0, 2, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_b2Random__SWIG_0(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 2) { PyObject *retobj = _wrap_b2Random__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Random'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Random()\n" "    b2Random(float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap__b2Distance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; int arg2 ; b2Shape *arg3 = (b2Shape *) 0 ; int arg4 ; b2Transform *arg5 = 0 ;
  b2Transform *arg6 = 0 ; bool arg7 = (bool) true ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ; int res6 = 0 ;
  bool val7 ; int ecode7 = 0 ; b2DistanceOutput *result = 0 ; if ((nobjs < 6) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Distance" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_b2Distance" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_b2Distance" "', argument " "3"" of type '" "b2Shape *""'");  } 
  arg3 = reinterpret_cast< b2Shape * >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_b2Distance" "', argument " "4"" of type '" "int""'"); }  
  arg4 = static_cast< int >(val4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "_b2Distance" "', argument " "5"" of type '" "b2Transform &""'");  } 
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_b2Distance" "', argument " "5"" of type '" "b2Transform &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "_b2Distance" "', argument " "6"" of type '" "b2Transform &""'");  } 
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_b2Distance" "', argument " "6"" of type '" "b2Transform &""'"); }
   arg6 = reinterpret_cast< b2Transform * >(argp6); if (swig_obj[6]) { ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "_b2Distance" "', argument " "7"" of type '" "bool""'"); }  
    arg7 = static_cast< bool >(val7); }  { try {
      result = (b2DistanceOutput *)_b2Distance(arg1,arg2,arg3,arg4,*arg5,*arg6,arg7); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap__b2Distance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2DistanceOutput *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Distance" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); { try { result = (b2DistanceOutput *)_b2Distance(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap__b2Distance(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[8] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "_b2Distance", 0, 7, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap__b2Distance__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if ((argc >= 6) && (argc <= 7)) { PyObject *retobj = _wrap__b2Distance__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function '_b2Distance'.\n"
  "  Possible C/C++ prototypes are:\n" "    _b2Distance(b2Shape *,int,b2Shape *,int,b2Transform &,b2Transform &,bool)\n"
  "    _b2Distance(b2DistanceInput *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2GetPointStates(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2Manifold *arg2 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"manifold1",  (char *)"manifold2",  NULL } ; PyObject *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2GetPointStates", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GetPointStates" "', argument " "1"" of type '" "b2Manifold const *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GetPointStates" "', argument " "2"" of type '" "b2Manifold const *""'");  }
   arg2 = reinterpret_cast< b2Manifold * >(argp2); { try {
      result = (PyObject *)b2GetPointStates((b2Manifold const *)arg1,(b2Manifold const *)arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactPoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ContactPoint", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ContactPoint *)new b2ContactPoint(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactPoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactPoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactPoint" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_fixtureA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactPoint_fixtureA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_fixtureA_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Fixture, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactPoint_fixtureA_set" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); if (arg1) (arg1)->fixtureA = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_fixtureA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Fixture *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_fixtureA_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Fixture *) ((arg1)->fixtureA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_fixtureB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactPoint_fixtureB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_fixtureB_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Fixture, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactPoint_fixtureB_set" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); if (arg1) (arg1)->fixtureB = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_fixtureB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Fixture *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_fixtureB_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Fixture *) ((arg1)->fixtureB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_normal_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactPoint_normal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_normal_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_position_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactPoint_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_position_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_state_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2PointState arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactPoint_state_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_state_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactPoint_state_set" "', argument " "2"" of type '" "b2PointState""'"); }
    arg2 = static_cast< b2PointState >(val2); if (arg1) (arg1)->state = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_state_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2PointState result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_state_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2PointState) ((arg1)->state);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint___hash__" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); { try { result = (long)b2ContactPoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactPoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap__b2TimeOfImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; int arg2 ; b2Shape *arg3 = (b2Shape *) 0 ; int arg4 ;
  b2Sweep *arg5 = 0 ; b2Sweep *arg6 = 0 ; float32 arg7 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ; int res6 = 0 ;
  float val7 ; int ecode7 = 0 ; b2TOIOutput *result = 0 ; if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2TimeOfImpact" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_b2TimeOfImpact" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_b2TimeOfImpact" "', argument " "3"" of type '" "b2Shape *""'");  } 
  arg3 = reinterpret_cast< b2Shape * >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_b2TimeOfImpact" "', argument " "4"" of type '" "int""'"); }  
  arg4 = static_cast< int >(val4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2Sweep,  0 ); if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "_b2TimeOfImpact" "', argument " "5"" of type '" "b2Sweep &""'");  } 
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_b2TimeOfImpact" "', argument " "5"" of type '" "b2Sweep &""'"); }
   arg5 = reinterpret_cast< b2Sweep * >(argp5); res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_b2Sweep,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "_b2TimeOfImpact" "', argument " "6"" of type '" "b2Sweep &""'");  } 
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_b2TimeOfImpact" "', argument " "6"" of type '" "b2Sweep &""'"); }
   arg6 = reinterpret_cast< b2Sweep * >(argp6); ecode7 = SWIG_AsVal_float(swig_obj[6], &val7); if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "_b2TimeOfImpact" "', argument " "7"" of type '" "float32""'"); }  
  arg7 = static_cast< float32 >(val7); { try { result = (b2TOIOutput *)_b2TimeOfImpact(arg1,arg2,arg3,arg4,*arg5,*arg6,arg7); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TOIOutput, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap__b2TimeOfImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2TOIOutput *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2TimeOfImpact" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); { try { result = (b2TOIOutput *)_b2TimeOfImpact(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TOIOutput, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap__b2TimeOfImpact(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[8] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "_b2TimeOfImpact", 0, 7, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap__b2TimeOfImpact__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 7) {
    PyObject *retobj = _wrap__b2TimeOfImpact__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function '_b2TimeOfImpact'.\n"
  "  Possible C/C++ prototypes are:\n" "    _b2TimeOfImpact(b2Shape *,int,b2Shape *,int,b2Sweep &,b2Sweep &,float32)\n"
  "    _b2TimeOfImpact(b2TOIInput *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2AssertException___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AssertException *arg1 = (b2AssertException *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AssertException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AssertException___hash__" "', argument " "1"" of type '" "b2AssertException *""'");  }
   arg1 = reinterpret_cast< b2AssertException * >(argp1); { try { result = (long)b2AssertException___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2AssertException(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AssertException *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2AssertException", 0, 0, 0)) SWIG_fail; { try {
      result = (b2AssertException *)new b2AssertException(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AssertException, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2AssertException(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AssertException *arg1 = (b2AssertException *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AssertException, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2AssertException" "', argument " "1"" of type '" "b2AssertException *""'");  }
   arg1 = reinterpret_cast< b2AssertException * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2AssertException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2AssertException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2AssertException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Alloc(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0; int32 arg1 ;
  int val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"size",  NULL } ; void *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2Alloc", kwnames, &obj0)) SWIG_fail; ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Alloc" "', argument " "1"" of type '" "int32""'"); }  
  arg1 = static_cast< int32 >(val1); { try { result = (void *)b2Alloc(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (!result) resultobj=Py_None; else resultobj=(PyObject*)result;
    Py_INCREF(resultobj); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Free(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"mem",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2Free", kwnames, &obj0)) SWIG_fail; { arg1 = obj0;
    Py_INCREF((PyObject*)arg1); }  { try { b2Free(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Log(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ; void *arg2 = 0 ; int res1 ; char *buf1 = 0 ; int alloc1 = 0 ; PyObject * obj0 = 0 ;
  char * kwnames[] = { (char *)"string",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2Log", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Log" "', argument " "1"" of type '" "char const *""'"); } 
  arg1 = reinterpret_cast< char * >(buf1); { try { b2Log((char const *)arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_major_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Version_major_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_major_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_major_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->major = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_major_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_major_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->major);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_minor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Version_minor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_minor_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_minor_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->minor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_minor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_minor_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->minor);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_revision_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Version_revision_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_revision_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_revision_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->revision = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_revision_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_revision_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->revision);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version___hash__" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); { try { result = (long)b2Version___hash__(arg1); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Version(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Version *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Version", 0, 0, 0)) SWIG_fail; { try { result = (b2Version *)new b2Version(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Version, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Version(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Version" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Version_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Version, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Version_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_version_set(PyObject *_val) { { void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_b2Version,  0  | 0); if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_version""' of type '""b2Version""'"); }  if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2_version""' of type '""b2Version""'"); }
     else { b2Version * temp; temp  = reinterpret_cast< b2Version * >(argp); b2_version = *temp;
      if (SWIG_IsNewObj(res)) delete temp; }  }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_version_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2_version), SWIGTYPE_p_b2Version,  0 ); return pyobj; }
SWIGINTERN PyObject *_wrap_b2IsValid(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0; float32 arg1 ;
  float val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"x",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2IsValid", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2IsValid" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); { try { result = (bool)b2IsValid(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2InvSqrt(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0; float32 arg1 ;
  float val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"x",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2InvSqrt", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2InvSqrt" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); { try { result = (float32)b2InvSqrt(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; b2Vec2 *result = 0 ;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Vec2" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Vec2" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = (b2Vec2 *)new b2Vec2(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_SetZero(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_SetZero" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { try { (arg1)->SetZero(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float32 arg3 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"x_",  (char *)"y_",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Vec2_Set", kwnames, &obj0, &obj1, &obj2)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_Set" "', argument " "self"" of type '" "b2Vec2 *""'");  }  }
   ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec2_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); { try { (arg1)->Set(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___neg__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail;
  swig_obj[0] = args; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___neg__" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  { try { result = ((b2Vec2 const *)arg1)->operator -(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; int32 arg2 ; int val2 ; int ecode2 = 0 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___call__" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___call__" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); { try { result = (float32)((b2Vec2 const *)arg1)->operator ()(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; int32 arg2 ; int val2 ; int ecode2 = 0 ; float32 *result = 0 ;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___call__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___call__" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); { try { result = (float32 *) &(arg1)->operator ()(arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___call__(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Vec2___call__", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2Vec2___call____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 2) {
    PyObject *retobj = _wrap_b2Vec2___call____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Vec2___call__'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec2::operator ()(int32) const\n" "    b2Vec2::operator ()(int32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec2___add_vector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___add_vector", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add_vector" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add_vector" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->operator +=((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___sub_vector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___sub_vector", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub_vector" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub_vector" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->operator -=((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___mul_float(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___mul_float", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___mul_float" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___mul_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->operator *=(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___Length(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___Length" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  { try { result = (float32)((b2Vec2 const *)arg1)->Length(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___LengthSquared(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___LengthSquared" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  { try { result = (float32)((b2Vec2 const *)arg1)->LengthSquared(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_Normalize(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_Normalize" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { try { result = (float32)(arg1)->Normalize(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___IsValid(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___IsValid" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  { try { result = (bool)((b2Vec2 const *)arg1)->IsValid(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___Skew(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail;
  swig_obj[0] = args; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___Skew" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  { try { result = ((b2Vec2 const *)arg1)->Skew(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_x_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Vec2_x_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_x_set" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_x_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->x = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_x_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_x_get" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  result = (float32) ((arg1)->x); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_y_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Vec2_y_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_y_set" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_y_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->y = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_y_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_y_get" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  result = (float32) ((arg1)->y); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___hash__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { try { result = (long)b2Vec2___hash__(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Vec2 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Vec2 *)new_b2Vec2__SWIG_1(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; b2Vec2 *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Vec2" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { try { result = (b2Vec2 *)new_b2Vec2__SWIG_2(*arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Vec2", 0, 2, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Vec2__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 1) { PyObject *retobj = _wrap_new_b2Vec2__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 2) {
    PyObject *retobj = _wrap_new_b2Vec2__SWIG_0(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Vec2'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec2::b2Vec2(float32,float32)\n" "    b2Vec2::b2Vec2()\n"
  "    b2Vec2::b2Vec2(b2Vec2 &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = (float32)b2Vec2_cross__SWIG_0(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ;
  SwigValueWrapper< b2Vec2 > result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_cross" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec2_cross__SWIG_1(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Vec2_cross", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[1]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_1; return _wrap_b2Vec2_cross__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    PyObject *retobj = _wrap_b2Vec2_cross__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Vec2_cross'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec2::cross(b2Vec2 &)\n" "    b2Vec2::cross(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec2___getitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int arg2 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"i",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___getitem__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___getitem__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___getitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); { try { result = (float32)b2Vec2___getitem__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int arg2 ; float32 arg3 ; int val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"value",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Vec2___setitem__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___setitem__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___setitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec2___setitem__" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { b2Vec2___setitem__(arg1,arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___equ(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___equ", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___equ" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___equ" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = (bool)b2Vec2___equ(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_dot(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2_dot", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_dot" "', argument " "self"" of type '" "b2Vec2 *""'");  }  }
   {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_dot" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = (float32)b2Vec2_dot(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___truediv__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___truediv__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___truediv__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___truediv__" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = b2Vec2___truediv__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___div__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___div__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___div__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___div__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec2___div__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___mul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___mul__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___mul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec2___mul__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___add__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___add__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add__" "', argument " "other"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Vec2___add__(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___sub__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___sub__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub__" "', argument " "other"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Vec2___sub__(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___rmul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___rmul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___rmul__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___rmul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec2___rmul__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___rdiv__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___rdiv__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___rdiv__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___rdiv__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec2___rdiv__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec2___div_float(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec2___div_float", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___div_float" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___div_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { b2Vec2___div_float(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Vec2(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Vec2" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Vec2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Vec2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Vec2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float32 arg3 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ; b2Vec3 *result = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Vec3" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Vec3" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Vec3" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); { try { result = (b2Vec3 *)new b2Vec3(arg1,arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_SetZero(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_SetZero" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { (arg1)->SetZero(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float32 arg3 ; float32 arg4 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"x_",  (char *)"y_",  (char *)"z_",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Vec3_Set", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_Set" "', argument " "self"" of type '" "b2Vec3 *""'");  }  }
   ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec3_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Vec3_Set" "', argument " "4"" of type '" "float32""'"); }  
  arg4 = static_cast< float32 >(val4); { try { (arg1)->Set(arg2,arg3,arg4); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___neg__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec3 > result; if (!args) SWIG_fail;
  swig_obj[0] = args; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___neg__" "', argument " "self"" of type '" "b2Vec3 const *""'");  }
     }  { try { result = ((b2Vec3 const *)arg1)->operator -(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___add_vector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___add_vector", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___add_vector" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___add_vector" "', argument " "v"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->operator +=((b2Vec3 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___sub_vector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___sub_vector", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___sub_vector" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___sub_vector" "', argument " "v"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->operator -=((b2Vec3 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___mul_float(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"s",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___mul_float", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___mul_float" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___mul_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->operator *=(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_x_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Vec3_x_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_x_set" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_x_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->x = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_x_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_x_get" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  result = (float32) ((arg1)->x); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_y_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Vec3_y_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_y_set" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_y_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->y = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_y_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_y_get" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  result = (float32) ((arg1)->y); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_z_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Vec3_z_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_z_set" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_z_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->z = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_z_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Vec3 *arg1 = (b2Vec3 *) 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_z_get" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  result = (float32) ((arg1)->z); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___hash__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { result = (long)b2Vec3___hash__(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Vec3 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Vec3 *)new_b2Vec3__SWIG_1(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = 0 ; b2Vec3 temp1 ; b2Vec3 *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[0], 2, &temp1.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Vec3" "', argument " "other"" of type '" "b2Vec3 &""'"); 
        SWIG_fail; }  temp1 =(b2Vec3&) *arg1; }  arg1 = &temp1; }  { try { result = (b2Vec3 *)new_b2Vec3__SWIG_2(*arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; b2Vec3 *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Vec3" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { try { result = (b2Vec3 *)new_b2Vec3__SWIG_3(*arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Vec3", 0, 3, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Vec3__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 1) { int _v = 0; { { _v = (PySequence_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec3, 0)) ) ? 1 : 0; } }  if (!_v) goto check_2;
    return _wrap_new_b2Vec3__SWIG_2(self, argc, argv);}  check_2: if (argc == 1) {
    PyObject *retobj = _wrap_new_b2Vec3__SWIG_3(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 3) { PyObject *retobj = _wrap_new_b2Vec3__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Vec3'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec3::b2Vec3(float32,float32,float32)\n" "    b2Vec3::b2Vec3()\n"
  "    b2Vec3::b2Vec3(b2Vec3 &)\n" "    b2Vec3::b2Vec3(b2Vec2 &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec3_cross(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3_cross", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_cross" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_cross" "', argument " "b"" of type '" "b2Vec3 &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { result = b2Vec3_cross(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___getitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; int arg2 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"i",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___getitem__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___getitem__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___getitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); { try { result = (float32)b2Vec3___getitem__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; int arg2 ; float32 arg3 ; int val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"value",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Vec3___setitem__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___setitem__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___setitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec3___setitem__" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { b2Vec3___setitem__(arg1,arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___IsValid(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___IsValid" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { result = (bool)b2Vec3___IsValid(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___Length(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___Length" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { result = (float32)b2Vec3___Length(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___LengthSquared(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___LengthSquared" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { result = (float32)b2Vec3___LengthSquared(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___truediv__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___truediv__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___truediv__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___truediv__" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = b2Vec3___truediv__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___div__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___div__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___div__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___div__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec3___div__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___mul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___mul__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___mul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec3___mul__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___add__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___add__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___add__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___add__" "', argument " "other"" of type '" "b2Vec3 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { result = b2Vec3___add__(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___sub__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___sub__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___sub__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___sub__" "', argument " "other"" of type '" "b2Vec3 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { result = b2Vec3___sub__(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___rmul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___rmul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___rmul__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___rmul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec3___rmul__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___rdiv__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___rdiv__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___rdiv__" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___rdiv__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Vec3___rdiv__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Vec3___div_float(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Vec3___div_float", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___div_float" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___div_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { b2Vec3___div_float(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Vec3(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Vec3" "', argument " "self"" of type '" "b2Vec3 *""'");  }
     }  { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Vec3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Vec3, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Vec3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Mat22 *result = 0 ;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat22" "', argument " "c1"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat22" "', argument " "c2"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (b2Mat22 *)new b2Mat22((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float32 arg3 ; float32 arg4 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; b2Mat22 *result = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Mat22" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Mat22" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Mat22" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_b2Mat22" "', argument " "4"" of type '" "float32""'"); }  
  arg4 = static_cast< float32 >(val4); { try { result = (b2Mat22 *)new b2Mat22(arg1,arg2,arg3,arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___SetAngle__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 temp3 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___SetAngle" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___SetAngle" "', argument " "c1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(swig_obj[2])) {
      if (PySequence_Size(swig_obj[2]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[2]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[2], 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[2], 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___SetAngle" "', argument " "c2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  { try { (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_SetIdentity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_SetIdentity" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { (arg1)->SetIdentity(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_SetZero(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_SetZero" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { (arg1)->SetZero(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___GetInverse(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Mat22 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___GetInverse" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { result = ((b2Mat22 const *)arg1)->GetInverse(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_Solve(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat22_Solve", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Solve" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Solve" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = ((b2Mat22 const *)arg1)->Solve((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Mat22_col1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_set" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_set" "', argument " "ex"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->ex = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_get" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = (b2Vec2 *)& ((arg1)->ex);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Mat22_col2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_set" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_set" "', argument " "ey"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->ey = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_get" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = (b2Vec2 *)& ((arg1)->ey);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___hash__" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { result = (long)b2Mat22___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Mat22 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Mat22 *)new_b2Mat22__SWIG_2(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[5] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Mat22", 0, 4, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Mat22__SWIG_2(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 2) { PyObject *retobj = _wrap_new_b2Mat22__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 4) {
    PyObject *retobj = _wrap_new_b2Mat22__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Mat22'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat22::b2Mat22(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Mat22::b2Mat22(float32,float32,float32,float32)\n" "    b2Mat22::b2Mat22()\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mat22___GetAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___GetAngle" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { result = (float32)b2Mat22___GetAngle((b2Mat22 const *)arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___SetAngle__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___SetAngle" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Mat22___SetAngle" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { b2Mat22___SetAngle__SWIG_1(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___SetAngle(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Mat22___SetAngle", 0, 3, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2Mat22___SetAngle__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_b2Mat22___SetAngle__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Mat22___SetAngle'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat22::Set(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Mat22::__SetAngle(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mat22___mul____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___mul__" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___mul__" "', argument " "v"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mat22___mul____SWIG_0(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat22___mul____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; SwigValueWrapper< b2Mat22 > result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___mul__" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat22___mul__" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { result = b2Mat22___mul____SWIG_1(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat22___mul__(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Mat22___mul__", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; {
      { _v = (PySequence_Check(argv[1]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_1; return _wrap_b2Mat22___mul____SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    PyObject *retobj = _wrap_b2Mat22___mul____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail: Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat22___add__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"m",  NULL } ;
  SwigValueWrapper< b2Mat22 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat22___add__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___add__" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat22___add__" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { result = b2Mat22___add__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat22___sub__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"m",  NULL } ;
  SwigValueWrapper< b2Mat22 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat22___sub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___sub__" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat22___sub__" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { result = b2Mat22___sub__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat22___iadd(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"m",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat22___iadd", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___iadd" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat22___iadd" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { b2Mat22___iadd(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22___isub(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"m",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat22___isub", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22___isub" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat22___isub" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { b2Mat22___isub(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Mat22(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Mat22" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Mat22_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Mat22, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Mat22_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Mat33__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 *arg3 = 0 ; b2Vec3 temp1 ; b2Vec3 temp2 ; b2Vec3 temp3 ; b2Mat33 *result = 0 ;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail; {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[0], 2, &temp1.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat33" "', argument " "c1"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp1 =(b2Vec3&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat33" "', argument " "c2"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(swig_obj[2])) {
      if (PySequence_Size(swig_obj[2]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[2]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[2], 0, &temp3.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[2], 1, &temp3.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[2], 2, &temp3.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[2]==Py_None) { temp3.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat33" "', argument " "c3"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp3 =(b2Vec3&) *arg3; }  arg3 = &temp3; }  { try {
      result = (b2Mat33 *)new b2Mat33((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2,(b2Vec3 const &)*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_SetZero(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_SetZero" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); { try { (arg1)->SetZero(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_Solve33(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33_Solve33", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve33" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve33" "', argument " "b"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Mat33 const *)arg1)->Solve33((b2Vec3 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_Solve22(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33_Solve22", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve22" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve22" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = ((b2Mat33 const *)arg1)->Solve22((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_GetInverse22(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"M",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33_GetInverse22", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_GetInverse22" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_GetInverse22" "', argument " "2"" of type '" "b2Mat33 *""'");  }
   arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { ((b2Mat33 const *)arg1)->GetInverse22(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_GetSymInverse33(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"M",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33_GetSymInverse33", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_GetSymInverse33" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_GetSymInverse33" "', argument " "2"" of type '" "b2Mat33 *""'");  }
   arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { ((b2Mat33 const *)arg1)->GetSymInverse33(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Mat33_col1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col1_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col1_set" "', argument " "ex"" of type '" "b2Vec3 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->ex = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col1_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->ex);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Mat33_col2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col2_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col2_set" "', argument " "ey"" of type '" "b2Vec3 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->ey = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col2_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->ey);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col3_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Mat33_col3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col3_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col3_set" "', argument " "ez"" of type '" "b2Vec3 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->ez = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col3_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col3_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->ez);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___hash__" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); { try { result = (long)b2Mat33___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat33__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Mat33 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Mat33 *)new_b2Mat33__SWIG_1(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat33(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Mat33", 0, 3, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Mat33__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 3) { PyObject *retobj = _wrap_new_b2Mat33__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Mat33'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat33::b2Mat33(b2Vec3 const &,b2Vec3 const &,b2Vec3 const &)\n"
  "    b2Mat33::b2Mat33()\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mat33___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ; SwigValueWrapper< b2Vec3 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___mul__" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___mul__" "', argument " "v"" of type '" "b2Vec3 &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mat33___mul__(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat33___add__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ;
  SwigValueWrapper< b2Mat33 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33___add__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___add__" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33___add__" "', argument " "2"" of type '" "b2Mat33 *""'");  } 
  arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { result = b2Mat33___add__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat33(result)), SWIGTYPE_p_b2Mat33, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat33___sub__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ;
  SwigValueWrapper< b2Mat33 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33___sub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___sub__" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33___sub__" "', argument " "2"" of type '" "b2Mat33 *""'");  } 
  arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { result = b2Mat33___sub__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat33(result)), SWIGTYPE_p_b2Mat33, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Mat33___iadd(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33___iadd", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___iadd" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33___iadd" "', argument " "2"" of type '" "b2Mat33 *""'");  } 
  arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { b2Mat33___iadd(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33___isub(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"other",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mat33___isub", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33___isub" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33___isub" "', argument " "2"" of type '" "b2Mat33 *""'");  } 
  arg2 = reinterpret_cast< b2Mat33 * >(argp2); { try { b2Mat33___isub(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Mat33(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Mat33" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Mat33_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Mat33, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Mat33_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Rot__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Rot *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Rot *)new b2Rot(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Rot, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Rot__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float val1 ; int ecode1 = 0 ; b2Rot *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Rot" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); { try { result = (b2Rot *)new b2Rot(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Rot, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Rot(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Rot", 0, 1, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Rot__SWIG_0(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 1) { PyObject *retobj = _wrap_new_b2Rot__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Rot'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Rot::b2Rot()\n" "    b2Rot::b2Rot(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Rot___SetAngle(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Rot *arg1 = (b2Rot *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"angle",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Rot___SetAngle", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot___SetAngle" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Rot___SetAngle" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->Set(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_SetIdentity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Rot *arg1 = (b2Rot *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_SetIdentity" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); { try { (arg1)->SetIdentity(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot___GetAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Rot *arg1 = (b2Rot *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot___GetAngle" "', argument " "1"" of type '" "b2Rot const *""'");  }
   arg1 = reinterpret_cast< b2Rot * >(argp1); { try { result = (float32)((b2Rot const *)arg1)->GetAngle(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_GetXAxis(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_GetXAxis" "', argument " "1"" of type '" "b2Rot const *""'");  }
   arg1 = reinterpret_cast< b2Rot * >(argp1); { try { result = ((b2Rot const *)arg1)->GetXAxis(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_GetYAxis(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_GetYAxis" "', argument " "1"" of type '" "b2Rot const *""'");  }
   arg1 = reinterpret_cast< b2Rot * >(argp1); { try { result = ((b2Rot const *)arg1)->GetYAxis(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_s_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Rot_s_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_s_set" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Rot_s_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->s = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_s_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_s_get" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); result = (float32) ((arg1)->s);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_c_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Rot_c_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_c_set" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Rot_c_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->c = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot_c_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot_c_get" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); result = (float32) ((arg1)->c);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Rot___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Rot *arg1 = (b2Rot *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Rot___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Rot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot___mul__" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Rot___mul__" "', argument " "v"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Rot___mul__(arg1,*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_delete_b2Rot(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Rot *arg1 = (b2Rot *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Rot, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Rot" "', argument " "1"" of type '" "b2Rot *""'");  } 
  arg1 = reinterpret_cast< b2Rot * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Rot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Rot, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Rot_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Transform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Transform *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Transform *)new b2Transform(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Transform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Rot *arg2 = 0 ; b2Vec2 temp1 ; void *argp2 = 0 ; int res2 = 0 ;
  b2Transform *result = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PySequence_Check(swig_obj[0])) {
      if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Transform" "', argument " "position"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_b2Transform" "', argument " "2"" of type '" "b2Rot const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2Transform" "', argument " "2"" of type '" "b2Rot const &""'"); }
   arg2 = reinterpret_cast< b2Rot * >(argp2); { try {
      result = (b2Transform *)new b2Transform((b2Vec2 const &)*arg1,(b2Rot const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Transform(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Transform", 0, 2, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Transform__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 2) {
    PyObject *retobj = _wrap_new_b2Transform__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Transform'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Transform::b2Transform()\n"
  "    b2Transform::b2Transform(b2Vec2 const &,b2Rot const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Transform_SetIdentity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_SetIdentity" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); { try { (arg1)->SetIdentity(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform_Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  float val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"position",  (char *)"angle",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Transform_Set", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_Set" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_Set" "', argument " "position"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Transform_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); { try { (arg1)->Set((b2Vec2 const &)*arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform_position_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Transform_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_position_set" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_position_set" "', argument " "p"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->p = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform_position_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_position_get" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); result = (b2Vec2 *)& ((arg1)->p);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform_q_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; b2Rot *arg2 = (b2Rot *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Transform_q_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_q_set" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Rot, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Transform_q_set" "', argument " "2"" of type '" "b2Rot *""'");  } 
  arg2 = reinterpret_cast< b2Rot * >(argp2); if (arg1) (arg1)->q = *arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform_q_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Rot *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform_q_get" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); result = (b2Rot *)& ((arg1)->q);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Rot, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform___hash__" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); { try { result = (long)b2Transform___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform___get_rotation_matrix(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Rot result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform___get_rotation_matrix" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); { try { result = b2Transform___get_rotation_matrix(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Rot(result)), SWIGTYPE_p_b2Rot, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Transform___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Transform___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform___mul__" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Transform___mul__" "', argument " "v"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Transform___mul__(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_delete_b2Transform(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Transform *arg1 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Transform" "', argument " "1"" of type '" "b2Transform *""'");  }
   arg1 = reinterpret_cast< b2Transform * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Transform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Transform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Transform_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Sweep_GetTransform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Sweep *arg1 = (b2Sweep *) 0 ; b2Transform *arg2 = (b2Transform *) 0 ; float32 arg3 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; float val3 ; int ecode3 = 0 ;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_GetTransform" "', argument " "1"" of type '" "b2Sweep const *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Sweep_GetTransform" "', argument " "2"" of type '" "b2Transform *""'");  }
   arg2 = reinterpret_cast< b2Transform * >(argp2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Sweep_GetTransform" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { ((b2Sweep const *)arg1)->GetTransform(arg2,arg3); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_Advance(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"alpha",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Sweep_Advance", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_Advance" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_Advance" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { (arg1)->Advance(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_Normalize(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_Normalize" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); { try { (arg1)->Normalize(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_localCenter_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_localCenter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_set" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_set" "', argument " "localCenter"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localCenter = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_localCenter_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_get" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->localCenter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c0_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_c0_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_set" "', argument " "c0"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->c0 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c0_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->c0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_c_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_set" "', argument " "c"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->c = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a0_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_a0_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a0_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_a0_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->a0 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a0_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a0_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->a0);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_a_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_a_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->a = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->a);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_alpha0_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Sweep_alpha0_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_alpha0_set" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_alpha0_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->alpha0 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_alpha0_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_alpha0_get" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->alpha0);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep___hash__" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); { try { result = (long)b2Sweep___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_GetTransform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; b2Transform *result = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_GetTransform" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_GetTransform" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (b2Transform *)b2Sweep_GetTransform__SWIG_1(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_GetTransform(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Sweep_GetTransform", 0, 3, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2Sweep_GetTransform__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_b2Sweep_GetTransform__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Sweep_GetTransform'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Sweep::GetTransform(b2Transform *,float32) const\n"
  "    b2Sweep::GetTransform(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_new_b2Sweep(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Sweep *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Sweep", 0, 0, 0)) SWIG_fail; { try { result = (b2Sweep *)new b2Sweep(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Sweep, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Sweep(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Sweep" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Sweep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Sweep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Sweep_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2Vec2_zero_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2Vec2_zero is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2Vec2_zero_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2Vec2_zero), SWIGTYPE_p_b2Vec2,  0 ); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Dot__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; float32 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (float32)b2Dot((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; float32 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (float32)b2Cross((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; float32 arg2 ; b2Vec2 temp1 ; float val2 ; int ecode2 = 0 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Cross" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Cross((b2Vec2 const &)*arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; b2Vec2 *arg2 = 0 ; float val1 ; int ecode1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Cross" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Cross(arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mul((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2MulT((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceSquared(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"a",  (char *)"b",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceSquared", kwnames, &obj0, &obj1)) SWIG_fail; { 
    if (PySequence_Check(obj0)) { if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0 == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceSquared" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceSquared" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (float32)b2DistanceSquared((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Dot__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 temp1 ; b2Vec3 temp2 ; float32 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[0], 2, &temp1.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "a"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp1 =(b2Vec3&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "b"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try {
      result = (float32)b2Dot((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Dot(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Dot", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_1; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Dot__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    PyObject *retobj = _wrap_b2Dot__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail: SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Dot'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Dot(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Dot(b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 temp1 ; b2Vec3 temp2 ; SwigValueWrapper< b2Vec3 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[0], 2, &temp1.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp1 =(b2Vec3&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "b"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try {
      result = b2Cross((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Cross", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_1; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Cross__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_2; { { int res = SWIG_AsVal_float(argv[1], NULL); _v = SWIG_CheckState(res); } }  if (!_v) goto check_2;
    return _wrap_b2Cross__SWIG_1(self, argc, argv);}  check_2: if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec3, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_3; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec3, 0)) ) ? 1 : 0; } }  if (!_v) goto check_3;
    return _wrap_b2Cross__SWIG_3(self, argc, argv);}  check_3: if (argc == 2) {
    PyObject *retobj = _wrap_b2Cross__SWIG_2(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Cross'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Cross(b2Vec2 const &,b2Vec2 const &)\n" "    b2Cross(b2Vec2 const &,float32)\n"
  "    b2Cross(float32,b2Vec2 const &)\n" "    b2Cross(b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  SwigValueWrapper< b2Mat22 > result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mul" "', argument " "2"" of type '" "b2Mat22 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { result = b2Mul((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  SwigValueWrapper< b2Mat22 > result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MulT" "', argument " "2"" of type '" "b2Mat22 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); { try { result = b2MulT((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec3 temp2 ; SwigValueWrapper< b2Vec3 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat33,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat33 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat33 const &""'"); }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec3, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec3, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[1], 2, &temp2.z, "Converting from sequence to b2Vec3, expected int/float arguments index 2"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec3, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec3 const &""'"); 
        SWIG_fail; }  temp2 =(b2Vec3&) *arg2; }  arg2 = &temp2; }  { try {
      result = b2Mul((b2Mat33 const &)*arg1,(b2Vec3 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec3(result)), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul22(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"A",  (char *)"v",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Mul22", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_b2Mat33,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul22" "', argument " "1"" of type '" "b2Mat33 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul22" "', argument " "1"" of type '" "b2Mat33 const &""'"); }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul22" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mul22((b2Mat33 const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Rot *arg1 = 0 ; b2Rot *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Rot result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Rot const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Rot const &""'"); }
   arg1 = reinterpret_cast< b2Rot * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mul" "', argument " "2"" of type '" "b2Rot const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "2"" of type '" "b2Rot const &""'"); }
   arg2 = reinterpret_cast< b2Rot * >(argp2); { try { result = b2Mul((b2Rot const &)*arg1,(b2Rot const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Rot(result)), SWIGTYPE_p_b2Rot, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Rot *arg1 = 0 ; b2Rot *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Rot result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Rot const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Rot const &""'"); }
   arg1 = reinterpret_cast< b2Rot * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MulT" "', argument " "2"" of type '" "b2Rot const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "2"" of type '" "b2Rot const &""'"); }
   arg2 = reinterpret_cast< b2Rot * >(argp2); { try { result = b2MulT((b2Rot const &)*arg1,(b2Rot const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Rot(result)), SWIGTYPE_p_b2Rot, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Rot *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Rot const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Rot const &""'"); }
   arg1 = reinterpret_cast< b2Rot * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mul((b2Rot const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Rot *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Rot,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Rot const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Rot const &""'"); }
   arg1 = reinterpret_cast< b2Rot * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2MulT((b2Rot const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Transform *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Transform const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Transform const &""'"); }
   arg1 = reinterpret_cast< b2Transform * >(argp1); {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Mul((b2Transform const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Transform *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; SwigValueWrapper< b2Vec2 > result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Transform const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Transform const &""'"); }
   arg1 = reinterpret_cast< b2Transform * >(argp1); {  if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2MulT((b2Transform const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Transform *arg1 = 0 ; b2Transform *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  b2Transform result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Transform,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Transform const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Transform const &""'"); }
   arg1 = reinterpret_cast< b2Transform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Transform,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mul" "', argument " "2"" of type '" "b2Transform const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "2"" of type '" "b2Transform const &""'"); }
   arg2 = reinterpret_cast< b2Transform * >(argp2); { try {
      result = b2Mul((b2Transform const &)*arg1,(b2Transform const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Transform(result)), SWIGTYPE_p_b2Transform, SWIG_POINTER_OWN |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Mul", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_1; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Mul__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_2; { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_2; return _wrap_b2Mul__SWIG_1(self, argc, argv);}  check_2:
  if (argc == 2) { int _v = 0; { int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat33, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_3; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec3, 0)) ) ? 1 : 0; } }  if (!_v) goto check_3;
    return _wrap_b2Mul__SWIG_2(self, argc, argv);}  check_3: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_4; { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_4; return _wrap_b2Mul__SWIG_3(self, argc, argv);}  check_4:
  if (argc == 2) { int _v = 0; { int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_5; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_5;
    return _wrap_b2Mul__SWIG_4(self, argc, argv);}  check_5: if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[1]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_6; return _wrap_b2Mul__SWIG_5(self, argc, argv);}  check_6: if (argc == 2) {
    PyObject *retobj = _wrap_b2Mul__SWIG_6(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail: SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Mul'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mul(b2Mat22 const &,b2Vec2 const &)\n"
  "    b2Mul(b2Mat22 const &,b2Mat22 const &)\n" "    b2Mul(b2Mat33 const &,b2Vec3 const &)\n"
  "    b2Mul(b2Rot const &,b2Rot const &)\n" "    b2Mul(b2Rot const &,b2Vec2 const &)\n"
  "    b2Mul(b2Transform const &,b2Vec2 const &)\n" "    b2Mul(b2Transform const &,b2Transform const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Transform *arg1 = 0 ; b2Transform *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  b2Transform result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Transform,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Transform const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Transform const &""'"); }
   arg1 = reinterpret_cast< b2Transform * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Transform,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MulT" "', argument " "2"" of type '" "b2Transform const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "2"" of type '" "b2Transform const &""'"); }
   arg2 = reinterpret_cast< b2Transform * >(argp2); { try {
      result = b2MulT((b2Transform const &)*arg1,(b2Transform const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Transform(result)), SWIGTYPE_p_b2Transform, SWIG_POINTER_OWN |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2MulT", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_1; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2MulT__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_2; { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Mat22, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_2; return _wrap_b2MulT__SWIG_1(self, argc, argv);}  check_2:
  if (argc == 2) { int _v = 0; { int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_3; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_3; return _wrap_b2MulT__SWIG_2(self, argc, argv);}  check_3: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Rot, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_4; { { _v = (PySequence_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_4;
    return _wrap_b2MulT__SWIG_3(self, argc, argv);}  check_4: if (argc == 2) { int _v = 0; { {
        _v = (PySequence_Check(argv[1]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_5; return _wrap_b2MulT__SWIG_4(self, argc, argv);}  check_5: if (argc == 2) {
    PyObject *retobj = _wrap_b2MulT__SWIG_5(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2MulT'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2MulT(b2Mat22 const &,b2Vec2 const &)\n"
  "    b2MulT(b2Mat22 const &,b2Mat22 const &)\n" "    b2MulT(b2Rot const &,b2Rot const &)\n"
  "    b2MulT(b2Rot const &,b2Vec2 const &)\n" "    b2MulT(b2Transform const &,b2Vec2 const &)\n"
  "    b2MulT(b2Transform const &,b2Transform const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Abs__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; SwigValueWrapper< b2Vec2 > result; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Abs" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { try { result = b2Abs((b2Vec2 const &)*arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Abs__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = 0 ; void *argp1 = 0 ; int res1 = 0 ; SwigValueWrapper< b2Mat22 > result;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Abs" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Abs" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); { try { result = b2Abs((b2Mat22 const &)*arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Mat22(result)), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Abs(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Abs", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) { int _v = 0; { {
        _v = (PySequence_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_1; return _wrap_b2Abs__SWIG_1(self, argc, argv);}  check_1: if (argc == 1) {
    PyObject *retobj = _wrap_b2Abs__SWIG_2(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail: SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Abs'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Abs(b2Vec2 const &)\n" "    b2Abs(b2Mat22 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Min(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Min", kwnames, &obj0, &obj1)) SWIG_fail; {  if (PySequence_Check(obj0)) {
      if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0 == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Min" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Min" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Min((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Max(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Max", kwnames, &obj0, &obj1)) SWIG_fail; {  if (PySequence_Check(obj0)) {
      if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0 == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Max" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Max" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = b2Max((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Clamp(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Vec2 temp3 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"a",  (char *)"low",  (char *)"high",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Clamp", kwnames, &obj0, &obj1, &obj2)) SWIG_fail; { 
    if (PySequence_Check(obj0)) { if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0 == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "low"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "high"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  { try {
      result = b2Clamp((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2NextPowerOfTwo(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  uint32 arg1 ; unsigned int val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"x",  NULL } ;
  uint32 result; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2NextPowerOfTwo", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2NextPowerOfTwo" "', argument " "1"" of type '" "uint32""'"); }  
  arg1 = static_cast< uint32 >(val1); { try { result = (uint32)b2NextPowerOfTwo(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2IsPowerOfTwo(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  uint32 arg1 ; unsigned int val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"x",  NULL } ;
  bool result; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:b2IsPowerOfTwo", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2IsPowerOfTwo" "', argument " "1"" of type '" "uint32""'"); }  
  arg1 = static_cast< uint32 >(val1); { try { result = (bool)b2IsPowerOfTwo(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN int Swig_var_b2_nullFeature_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_nullFeature is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_nullFeature_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(b2_nullFeature)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_indexA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; uint8 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned char val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactFeature_indexA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_indexA_set" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactFeature_indexA_set" "', argument " "2"" of type '" "uint8""'"); }
    arg2 = static_cast< uint8 >(val2); if (arg1) (arg1)->indexA = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_indexA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint8 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_indexA_get" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); result = (uint8) ((arg1)->indexA);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_indexB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; uint8 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned char val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactFeature_indexB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_indexB_set" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactFeature_indexB_set" "', argument " "2"" of type '" "uint8""'"); }
    arg2 = static_cast< uint8 >(val2); if (arg1) (arg1)->indexB = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_indexB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint8 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_indexB_get" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); result = (uint8) ((arg1)->indexB);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_typeA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; uint8 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned char val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactFeature_typeA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_typeA_set" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactFeature_typeA_set" "', argument " "2"" of type '" "uint8""'"); }
    arg2 = static_cast< uint8 >(val2); if (arg1) (arg1)->typeA = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_typeA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint8 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_typeA_get" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); result = (uint8) ((arg1)->typeA);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_typeB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; uint8 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned char val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactFeature_typeB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_typeB_set" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactFeature_typeB_set" "', argument " "2"" of type '" "uint8""'"); }
    arg2 = static_cast< uint8 >(val2); if (arg1) (arg1)->typeB = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature_typeB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint8 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature_typeB_get" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); result = (uint8) ((arg1)->typeB);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFeature___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFeature___hash__" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); { try { result = (long)b2ContactFeature___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactFeature(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ContactFeature", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ContactFeature *)new b2ContactFeature(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {
       SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactFeature, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactFeature(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFeature *arg1 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFeature, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactFeature" "', argument " "1"" of type '" "b2ContactFeature *""'");  }
   arg1 = reinterpret_cast< b2ContactFeature * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactFeature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactFeature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactFeature_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactID_cf_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; b2ContactFeature *arg2 = (b2ContactFeature *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactID_cf_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_cf_set" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactFeature, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactID_cf_set" "', argument " "2"" of type '" "b2ContactFeature *""'");  }
   arg2 = reinterpret_cast< b2ContactFeature * >(argp2); if (arg1) (arg1)->cf = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_cf_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactFeature *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_cf_get" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); result = (b2ContactFeature *)& ((arg1)->cf);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactFeature, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_key_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactID_key_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_key_set" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactID_key_set" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); if (arg1) (arg1)->key = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_key_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_key_get" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); result = (uint32) ((arg1)->key);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID___hash__" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); { try { result = (long)b2ContactID___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactID(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2ContactID *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2ContactID", 0, 0, 0)) SWIG_fail; { try { result = (b2ContactID *)new b2ContactID(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactID(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactID" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactID_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ManifoldPoint_localPoint_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint_set" "', argument " "localPoint"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localPoint = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->localPoint);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_normalImpulse_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ManifoldPoint_normalImpulse_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_normalImpulse_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ManifoldPoint_normalImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->normalImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_normalImpulse_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_normalImpulse_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (float32) ((arg1)->normalImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_tangentImpulse_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ManifoldPoint_tangentImpulse_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_tangentImpulse_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ManifoldPoint_tangentImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->tangentImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_tangentImpulse_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_tangentImpulse_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (float32) ((arg1)->tangentImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_id_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; b2ContactID *arg2 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ManifoldPoint_id_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_id_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ManifoldPoint_id_set" "', argument " "2"" of type '" "b2ContactID *""'");  }
   arg2 = reinterpret_cast< b2ContactID * >(argp2); if (arg1) (arg1)->id = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_id_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactID *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_id_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (b2ContactID *)& ((arg1)->id);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint___hash__" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); { try { result = (long)b2ManifoldPoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ManifoldPoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ManifoldPoint", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ManifoldPoint *)new b2ManifoldPoint(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ManifoldPoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ManifoldPoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ManifoldPoint" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ManifoldPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ManifoldPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ManifoldPoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Manifold_localNormal_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Manifold_localNormal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localNormal_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localNormal_set" "', argument " "localNormal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localNormal = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_localNormal_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localNormal_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (b2Vec2 *)& ((arg1)->localNormal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_localPoint_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Manifold_localPoint_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localPoint_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localPoint_set" "', argument " "localPoint"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localPoint = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_localPoint_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_localPoint_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (b2Vec2 *)& ((arg1)->localPoint);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_type__set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2Manifold::Type arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Manifold_type__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_type__set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Manifold_type__set" "', argument " "2"" of type '" "b2Manifold::Type""'"); }
    arg2 = static_cast< b2Manifold::Type >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_type__get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Manifold::Type result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_type__get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (b2Manifold::Type) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_pointCount_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Manifold_pointCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_pointCount_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Manifold_pointCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->pointCount = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_pointCount_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_pointCount_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (int32) ((arg1)->pointCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold___hash__" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); { try { result = (long)b2Manifold___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold___GetPoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; int arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"i",  NULL } ;
  b2ManifoldPoint *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Manifold___GetPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold___GetPoint" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Manifold___GetPoint" "', argument " "2"" of type '" "int""'"); }
    arg2 = static_cast< int >(val2); { try { result = (b2ManifoldPoint *)b2Manifold___GetPoint(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Manifold(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Manifold *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Manifold", 0, 0, 0)) SWIG_fail; { try { result = (b2Manifold *)new b2Manifold(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Manifold, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Manifold(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Manifold" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Manifold_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Manifold, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Manifold_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2WorldManifold_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; b2Manifold *arg2 = (b2Manifold *) 0 ;
  b2Transform *arg3 = 0 ; float32 arg4 ; b2Transform *arg5 = 0 ; float32 arg6 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; float val4 ; int ecode4 = 0 ; void *argp5 = 0 ;
  int res5 = 0 ; float val6 ; int ecode6 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; PyObject * obj5 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"manifold",  (char *)"xfA",  (char *)"radiusA",  (char *)"xfB",  (char *)"radiusB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOO:b2WorldManifold_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WorldManifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold_Initialize" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2WorldManifold_Initialize" "', argument " "2"" of type '" "b2Manifold const *""'");  }
   arg2 = reinterpret_cast< b2Manifold * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2WorldManifold_Initialize" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2WorldManifold_Initialize" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); ecode4 = SWIG_AsVal_float(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2WorldManifold_Initialize" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2WorldManifold_Initialize" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2WorldManifold_Initialize" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); ecode6 = SWIG_AsVal_float(obj5, &val6); if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "b2WorldManifold_Initialize" "', argument " "6"" of type '" "float32""'"); }
    arg6 = static_cast< float32 >(val6); { try {
      (arg1)->Initialize((b2Manifold const *)arg2,(b2Transform const &)*arg3,arg4,(b2Transform const &)*arg5,arg6); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WorldManifold_normal_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WorldManifold_normal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WorldManifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold_normal_set" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WorldManifold_normal_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WorldManifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold_normal_get" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WorldManifold___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WorldManifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold___hash__" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); { try { result = (long)b2WorldManifold___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WorldManifold___get_points(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  PyObject *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WorldManifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WorldManifold___get_points" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); { try { result = (PyObject *)b2WorldManifold___get_points(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2WorldManifold(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2WorldManifold", 0, 0, 0)) SWIG_fail; { try {
      result = (b2WorldManifold *)new b2WorldManifold(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2WorldManifold, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2WorldManifold(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WorldManifold *arg1 = (b2WorldManifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WorldManifold, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2WorldManifold" "', argument " "1"" of type '" "b2WorldManifold *""'");  }
   arg1 = reinterpret_cast< b2WorldManifold * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2WorldManifold_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2WorldManifold, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2WorldManifold_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ClipVertex_v_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ClipVertex_v_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex_v_set" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex_v_set" "', argument " "v"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->v = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ClipVertex_v_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex_v_get" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1); result = (b2Vec2 *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ClipVertex_id_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; b2ContactID *arg2 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ClipVertex_id_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex_id_set" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ClipVertex_id_set" "', argument " "2"" of type '" "b2ContactID *""'");  }
   arg2 = reinterpret_cast< b2ContactID * >(argp2); if (arg1) (arg1)->id = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ClipVertex_id_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ContactID *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex_id_get" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1); result = (b2ContactID *)& ((arg1)->id);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ClipVertex___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipVertex___hash__" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1); { try { result = (long)b2ClipVertex___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ClipVertex(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ClipVertex", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ClipVertex *)new b2ClipVertex(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ClipVertex, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ClipVertex(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 = (b2ClipVertex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ClipVertex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ClipVertex" "', argument " "1"" of type '" "b2ClipVertex *""'");  }
   arg1 = reinterpret_cast< b2ClipVertex * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ClipVertex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ClipVertex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ClipVertex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2RayCastInput_p1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RayCastInput_p1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p1_set" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p1_set" "', argument " "p1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->p1 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput_p1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p1_get" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); result = (b2Vec2 *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput_p2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RayCastInput_p2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p2_set" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p2_set" "', argument " "p2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->p2 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput_p2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_p2_get" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); result = (b2Vec2 *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput_maxFraction_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RayCastInput_maxFraction_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_maxFraction_set" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RayCastInput_maxFraction_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxFraction = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput_maxFraction_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput_maxFraction_get" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); result = (float32) ((arg1)->maxFraction);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastInput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastInput___hash__" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); { try { result = (long)b2RayCastInput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2RayCastInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2RayCastInput", 0, 0, 0)) SWIG_fail; { try {
      result = (b2RayCastInput *)new b2RayCastInput(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RayCastInput, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RayCastInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastInput *arg1 = (b2RayCastInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RayCastInput" "', argument " "1"" of type '" "b2RayCastInput *""'");  }
   arg1 = reinterpret_cast< b2RayCastInput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RayCastInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RayCastInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RayCastInput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2RayCastOutput_normal_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RayCastOutput_normal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput_normal_set" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastOutput_normal_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput_normal_get" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastOutput_fraction_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RayCastOutput_fraction_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput_fraction_set" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RayCastOutput_fraction_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->fraction = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastOutput_fraction_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput_fraction_get" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); result = (float32) ((arg1)->fraction);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastOutput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastOutput___hash__" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); { try { result = (long)b2RayCastOutput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2RayCastOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2RayCastOutput", 0, 0, 0)) SWIG_fail; { try {
      result = (b2RayCastOutput *)new b2RayCastOutput(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RayCastOutput, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RayCastOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastOutput *arg1 = (b2RayCastOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastOutput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RayCastOutput" "', argument " "1"" of type '" "b2RayCastOutput *""'");  }
   arg1 = reinterpret_cast< b2RayCastOutput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RayCastOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RayCastOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RayCastOutput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2AABB___IsValid(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___IsValid" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { try { result = (bool)((b2AABB const *)arg1)->IsValid(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___GetCenter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___GetCenter" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { try { result = ((b2AABB const *)arg1)->GetCenter(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___GetExtents(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___GetExtents" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { try { result = ((b2AABB const *)arg1)->GetExtents(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___GetPerimeter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___GetPerimeter" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { try { result = (float32)((b2AABB const *)arg1)->GetPerimeter(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_Combine__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = (b2AABB *) 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_Combine" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABB_Combine" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB_Combine" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); { try { (arg1)->Combine((b2AABB const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_Combine__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = (b2AABB *) 0 ; b2AABB *arg2 = 0 ; b2AABB *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_Combine" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABB_Combine" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB_Combine" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2AABB_Combine" "', argument " "3"" of type '" "b2AABB const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB_Combine" "', argument " "3"" of type '" "b2AABB const &""'"); }
   arg3 = reinterpret_cast< b2AABB * >(argp3); { try { (arg1)->Combine((b2AABB const &)*arg2,(b2AABB const &)*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_Combine(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2AABB_Combine", 0, 3, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2AABB_Combine__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_b2AABB_Combine__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2AABB_Combine'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2AABB::Combine(b2AABB const &)\n"
  "    b2AABB::Combine(b2AABB const &,b2AABB const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2AABB___contains____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = (b2AABB *) 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; bool result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___contains__" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABB___contains__" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB___contains__" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); { try { result = (bool)((b2AABB const *)arg1)->Contains((b2AABB const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_RayCast(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ; b2RayCastInput *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"output",  (char *)"input",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2AABB_RayCast", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_RayCast" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABB_RayCast" "', argument " "2"" of type '" "b2RayCastOutput *""'");  }
   arg2 = reinterpret_cast< b2RayCastOutput * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2RayCastInput,  0  | 0); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2AABB_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'"); }
   arg3 = reinterpret_cast< b2RayCastInput * >(argp3); { try {
      result = (bool)((b2AABB const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_lowerBound_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2AABB_lowerBound_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_set" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_set" "', argument " "lowerBound"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->lowerBound = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_lowerBound_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_get" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); result = (b2Vec2 *)& ((arg1)->lowerBound);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_upperBound_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2AABB_upperBound_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_set" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); { if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_set" "', argument " "upperBound"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->upperBound = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_upperBound_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_get" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); result = (b2Vec2 *)& ((arg1)->upperBound);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___hash__" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); { try { result = (long)b2AABB___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___contains____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = (b2AABB *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  bool result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___contains__" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); {  if (PySequence_Check(swig_obj[1])) { if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB___contains__" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (bool)b2AABB___contains____SWIG_1(arg1,(b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB___contains__(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2AABB___contains__", 0, 2, argv))) SWIG_fail; --argc; if (argc == 2) {
    int _v = 0; { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2AABB, SWIG_POINTER_NO_NULL | 0); _v = SWIG_CheckState(res);}
     if (!_v) goto check_1; return _wrap_b2AABB___contains____SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    PyObject *retobj = _wrap_b2AABB___contains____SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2AABB___contains__'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2AABB::Contains(b2AABB const &) const\n"
  "    b2AABB::__contains__(b2Vec2 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2AABB_overlaps(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"aabb2",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2AABB_overlaps", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_overlaps" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABB_overlaps" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABB_overlaps" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); { try { result = (bool)b2AABB_overlaps(arg1,(b2AABB const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2AABB(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2AABB *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2AABB", 0, 0, 0)) SWIG_fail; { try { result = (b2AABB *)new b2AABB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2AABB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2AABB" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2AABB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2AABB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2AABB_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2CollideCircles(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2CircleShape *arg2 = (b2CircleShape *) 0 ; b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ; b2Transform *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"manifold",  (char *)"circleA",  (char *)"xfA",  (char *)"circleB",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2CollideCircles", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollideCircles" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollideCircles" "', argument " "2"" of type '" "b2CircleShape const *""'");  }
   arg2 = reinterpret_cast< b2CircleShape * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollideCircles" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideCircles" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollideCircles" "', argument " "4"" of type '" "b2CircleShape const *""'");  }
   arg4 = reinterpret_cast< b2CircleShape * >(argp4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollideCircles" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideCircles" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); { try {
      b2CollideCircles(arg1,(b2CircleShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollidePolygonAndCircle(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Manifold *arg1 = (b2Manifold *) 0 ; b2PolygonShape *arg2 = (b2PolygonShape *) 0 ;
  b2Transform *arg3 = 0 ; b2CircleShape *arg4 = (b2CircleShape *) 0 ; b2Transform *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ;
  int res5 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"manifold",  (char *)"polygonA",  (char *)"xfA",  (char *)"circleB",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2CollidePolygonAndCircle", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolygonAndCircle" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollidePolygonAndCircle" "', argument " "2"" of type '" "b2PolygonShape const *""'");  }
   arg2 = reinterpret_cast< b2PolygonShape * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollidePolygonAndCircle" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygonAndCircle" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollidePolygonAndCircle" "', argument " "4"" of type '" "b2CircleShape const *""'");  }
   arg4 = reinterpret_cast< b2CircleShape * >(argp4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollidePolygonAndCircle" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygonAndCircle" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); { try {
      b2CollidePolygonAndCircle(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollidePolygons(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2PolygonShape *arg2 = (b2PolygonShape *) 0 ; b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ; b2Transform *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"manifold",  (char *)"polygonA",  (char *)"xfA",  (char *)"polygonB",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2CollidePolygons", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolygons" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollidePolygons" "', argument " "2"" of type '" "b2PolygonShape const *""'");  }
   arg2 = reinterpret_cast< b2PolygonShape * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollidePolygons" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygons" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollidePolygons" "', argument " "4"" of type '" "b2PolygonShape const *""'");  }
   arg4 = reinterpret_cast< b2PolygonShape * >(argp4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollidePolygons" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygons" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); { try {
      b2CollidePolygons(arg1,(b2PolygonShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollideEdgeAndCircle(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2EdgeShape *arg2 = (b2EdgeShape *) 0 ; b2Transform *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ; b2Transform *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"manifold",  (char *)"polygonA",  (char *)"xfA",  (char *)"circleB",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2CollideEdgeAndCircle", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollideEdgeAndCircle" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollideEdgeAndCircle" "', argument " "2"" of type '" "b2EdgeShape const *""'");  }
   arg2 = reinterpret_cast< b2EdgeShape * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollideEdgeAndCircle" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideEdgeAndCircle" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollideEdgeAndCircle" "', argument " "4"" of type '" "b2CircleShape const *""'");  }
   arg4 = reinterpret_cast< b2CircleShape * >(argp4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollideEdgeAndCircle" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideEdgeAndCircle" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); { try {
      b2CollideEdgeAndCircle(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2CircleShape const *)arg4,(b2Transform const &)*arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollideEdgeAndPolygon(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2EdgeShape *arg2 = (b2EdgeShape *) 0 ; b2Transform *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ; b2Transform *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"manifold",  (char *)"edgeA",  (char *)"xfA",  (char *)"circleB",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2CollideEdgeAndPolygon", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollideEdgeAndPolygon" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollideEdgeAndPolygon" "', argument " "2"" of type '" "b2EdgeShape const *""'");  }
   arg2 = reinterpret_cast< b2EdgeShape * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollideEdgeAndPolygon" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideEdgeAndPolygon" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollideEdgeAndPolygon" "', argument " "4"" of type '" "b2PolygonShape const *""'");  }
   arg4 = reinterpret_cast< b2PolygonShape * >(argp4); res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollideEdgeAndPolygon" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideEdgeAndPolygon" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5); { try {
      b2CollideEdgeAndPolygon(arg1,(b2EdgeShape const *)arg2,(b2Transform const &)*arg3,(b2PolygonShape const *)arg4,(b2Transform const &)*arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ClipSegmentToLine(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ClipVertex *arg1 ; b2ClipVertex *arg2 ; b2Vec2 *arg3 = 0 ; float32 arg4 ; int32 arg5 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; float val4 ; int ecode4 = 0 ; int val5 ; int ecode5 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"vOut",  (char *)"vIn",  (char *)"normal",  (char *)"offset",  (char *)"vertexIndexA",  NULL } ;
  int32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2ClipSegmentToLine", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ClipVertex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipSegmentToLine" "', argument " "1"" of type '" "b2ClipVertex [2]""'");  }
    arg1 = reinterpret_cast< b2ClipVertex * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2ClipVertex, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ClipSegmentToLine" "', argument " "2"" of type '" "b2ClipVertex const [2]""'");  }
    arg2 = reinterpret_cast< b2ClipVertex * >(argp2); {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ClipSegmentToLine" "', argument " "normal"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  ecode4 = SWIG_AsVal_float(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2ClipSegmentToLine" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4); ecode5 = SWIG_AsVal_int(obj4, &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2ClipSegmentToLine" "', argument " "5"" of type '" "int32""'"); }
    arg5 = static_cast< int32 >(val5); { try {
      result = (int32)b2ClipSegmentToLine(arg1,(b2ClipVertex const (*))arg2,(b2Vec2 const &)*arg3,arg4,arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TestOverlap__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; int32 arg2 ; b2Shape *arg3 = (b2Shape *) 0 ; int32 arg4 ;
  b2Transform *arg5 = 0 ; b2Transform *arg6 = 0 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; int val4 ; int ecode4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ; int res6 = 0 ; bool result;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TestOverlap" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TestOverlap" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2TestOverlap" "', argument " "3"" of type '" "b2Shape const *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2TestOverlap" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2TestOverlap" "', argument " "5"" of type '" "b2Transform const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "5"" of type '" "b2Transform const &""'"); }
   arg5 = reinterpret_cast< b2Transform * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_b2Transform,  0  | 0); if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "b2TestOverlap" "', argument " "6"" of type '" "b2Transform const &""'");  }
   if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "6"" of type '" "b2Transform const &""'"); }
   arg6 = reinterpret_cast< b2Transform * >(argp6); { try {
      result = (bool)b2TestOverlap((b2Shape const *)arg1,arg2,(b2Shape const *)arg3,arg4,(b2Transform const &)*arg5,(b2Transform const &)*arg6); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TestOverlap__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; bool result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TestOverlap" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TestOverlap" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); { try {
      result = (bool)b2TestOverlap((b2AABB const &)*arg1,(b2AABB const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TestOverlap(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[7] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2TestOverlap", 0, 6, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2TestOverlap__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 6) { PyObject *retobj = _wrap_b2TestOverlap__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2TestOverlap'.\n"
  "  Possible C/C++ prototypes are:\n"
  "    b2TestOverlap(b2Shape const *,int32,b2Shape const *,int32,b2Transform const &,b2Transform const &)\n"
  "    b2TestOverlap(b2AABB const &,b2AABB const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_new__b2Vec2Array(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  size_t arg1 ; size_t val1 ; int ecode1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"nelements",  NULL } ;
  _b2Vec2Array *result = 0 ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new__b2Vec2Array", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__b2Vec2Array" "', argument " "1"" of type '" "size_t""'"); }  
  arg1 = static_cast< size_t >(val1); { try { result = (_b2Vec2Array *)new__b2Vec2Array(SWIG_STD_MOVE(arg1)); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__b2Vec2Array, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete__b2Vec2Array(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  _b2Vec2Array *arg1 = (_b2Vec2Array *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p__b2Vec2Array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__b2Vec2Array" "', argument " "1"" of type '" "_b2Vec2Array *""'");  }
   arg1 = reinterpret_cast< _b2Vec2Array * >(argp1); { try { delete__b2Vec2Array(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap__b2Vec2Array___getitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  _b2Vec2Array *arg1 = (_b2Vec2Array *) 0 ; size_t arg2 ; void *argp1 = 0 ; int res1 = 0 ; size_t val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"index",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:_b2Vec2Array___getitem__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p__b2Vec2Array, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Vec2Array___getitem__" "', argument " "1"" of type '" "_b2Vec2Array *""'");  }
   arg1 = reinterpret_cast< _b2Vec2Array * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_b2Vec2Array___getitem__" "', argument " "2"" of type '" "size_t""'"); }
    arg2 = static_cast< size_t >(val2); { try { result = _b2Vec2Array___getitem__(arg1,SWIG_STD_MOVE(arg2)); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap__b2Vec2Array___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  _b2Vec2Array *arg1 = (_b2Vec2Array *) 0 ; size_t arg2 ; SwigValueWrapper< b2Vec2 > arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  size_t val2 ; int ecode2 = 0 ; void *argp3 ; int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"index",  (char *)"value",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:_b2Vec2Array___setitem__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p__b2Vec2Array, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Vec2Array___setitem__" "', argument " "1"" of type '" "_b2Vec2Array *""'");  }
   arg1 = reinterpret_cast< _b2Vec2Array * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_b2Vec2Array___setitem__" "', argument " "2"" of type '" "size_t""'"); }
    arg2 = static_cast< size_t >(val2); { res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Vec2,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_b2Vec2Array___setitem__" "', argument " "3"" of type '" "b2Vec2""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_b2Vec2Array___setitem__" "', argument " "3"" of type '" "b2Vec2""'"); }
     else { b2Vec2 * temp = reinterpret_cast< b2Vec2 * >(argp3); arg3 = *temp; if (SWIG_IsNewObj(res3)) delete temp; }  }  {
    try { _b2Vec2Array___setitem__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3)); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap__b2Vec2Array_cast(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  _b2Vec2Array *arg1 = (_b2Vec2Array *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p__b2Vec2Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Vec2Array_cast" "', argument " "1"" of type '" "_b2Vec2Array *""'");  }
   arg1 = reinterpret_cast< _b2Vec2Array * >(argp1); { try { result = (b2Vec2 *)_b2Vec2Array_cast(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap__b2Vec2Array_frompointer(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 temp1 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"t",  NULL } ;
  _b2Vec2Array *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:_b2Vec2Array_frompointer", kwnames, &obj0)) SWIG_fail; {
    if (PySequence_Check(obj0)) { if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0==Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_b2Vec2Array_frompointer" "', argument " "t"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { try {
      result = (_b2Vec2Array *)_b2Vec2Array_frompointer(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__b2Vec2Array, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_b2Vec2Array_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p__b2Vec2Array, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_b2Vec2Array_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Color__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Color *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; { try {
      result = (b2Color *)new b2Color(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Color, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Color__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float32 arg3 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ; b2Color *result = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Color" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Color" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Color" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); { try { result = (b2Color *)new b2Color(arg1,arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Color, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float32 arg3 ; float32 arg4 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"ri",  (char *)"gi",  (char *)"bi",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Color_Set", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_Set" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Color_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Color_Set" "', argument " "4"" of type '" "float32""'"); }  
  arg4 = static_cast< float32 >(val4); { try { (arg1)->Set(arg2,arg3,arg4); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_r_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Color_r_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_r_set" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_r_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->r = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_r_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_r_get" "', argument " "self"" of type '" "b2Color *""'");  }
     }  result = (float32) ((arg1)->r); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_g_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Color_g_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_g_set" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_g_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->g = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_g_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_g_get" "', argument " "self"" of type '" "b2Color *""'");  }
     }  result = (float32) ((arg1)->g); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_b_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2Color_b_set", 2, 2, swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_b_set" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_b_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->b = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_b_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_b_get" "', argument " "self"" of type '" "b2Color *""'");  }
     }  result = (float32) ((arg1)->b); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___hash__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  { try { result = (long)b2Color___hash__(arg1); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Color__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) { PyObject *resultobj = 0;
  b2Color *arg1 = 0 ; b2Color temp1 ; b2Color *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PySequence_Check(swig_obj[0])) { if (PySequence_Size(swig_obj[0]) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(swig_obj[0]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[0], 0, &temp1.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[0], 1, &temp1.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(swig_obj[0], 2, &temp1.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Color" "', argument " "other"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp1 =(b2Color&) *arg1; }  arg1 = &temp1; }  { try { result = (b2Color *)new_b2Color__SWIG_2(*arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Color, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Color(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_b2Color", 0, 3, argv))) SWIG_fail; --argc; if (argc == 0) {
    PyObject *retobj = _wrap_new_b2Color__SWIG_0(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  if (argc == 1) { PyObject *retobj = _wrap_new_b2Color__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_new_b2Color__SWIG_1(self, argc, argv); if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_b2Color'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Color::b2Color()\n" "    b2Color::b2Color(float32,float32,float32)\n"
  "    b2Color::b2Color(b2Color &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Color___get_bytes(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___get_bytes" "', argument " "self"" of type '" "b2Color *""'");  }
     }  { try { result = (PyObject *)b2Color___get_bytes(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___getitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; int arg2 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"i",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___getitem__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___getitem__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___getitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); { try { result = (float32)b2Color___getitem__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; int arg2 ; float32 arg3 ; int val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"value",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Color___setitem__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___setitem__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___setitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Color___setitem__" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { b2Color___setitem__(arg1,arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___truediv__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___truediv__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___truediv__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___truediv__" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = b2Color___truediv__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___add__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___add__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___add__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___add__" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { result = b2Color___add__(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___sub__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___sub__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___sub__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___sub__" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { result = b2Color___sub__(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___div__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___div__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___div__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___div__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Color___div__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___rmul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___rmul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___rmul__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___rmul__" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = b2Color___rmul__(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___mul__(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"a",  NULL } ; b2Color result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___mul__", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___mul__" "', argument " "self"" of type '" "b2Color *""'");  }
     }  ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color___mul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = b2Color___mul__(arg1,arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Color(result)), SWIGTYPE_p_b2Color, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  PyErr_Clear(); Py_INCREF(Py_NotImplemented); return Py_NotImplemented; }
SWIGINTERN PyObject *_wrap_b2Color___isub(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___isub", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___isub" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___isub" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { b2Color___isub(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___itruediv(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___itruediv", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___itruediv" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___itruediv" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { b2Color___itruediv(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___idiv(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___idiv", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___idiv" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___idiv" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { b2Color___idiv(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___imul(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___imul", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___imul" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___imul" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { b2Color___imul(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___iadd(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"o",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___iadd", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___iadd" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___iadd" "', argument " "o"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { b2Color___iadd(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color___equ(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; b2Color *arg2 = 0 ; b2Color temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"b",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Color___equ", kwnames, &obj0, &obj1)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___equ" "', argument " "self"" of type '" "b2Color *""'");  }
     }  {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj1, 2, &temp2.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color___equ" "', argument " "b"" of type '" "b2Color &""'"); 
        SWIG_fail; }  temp2 =(b2Color&) *arg2; }  arg2 = &temp2; }  { try { result = (bool)b2Color___equ(arg1,*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Color(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Color" "', argument " "self"" of type '" "b2Color *""'");  }
     }  { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Color_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Color, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Color_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Draw(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ; b2Draw *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2Draw", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2Draw *)new SwigDirector_b2Draw(arg1);  }  else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; }  }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Draw, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Draw(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Draw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Draw" "', argument " "1"" of type '" "b2Draw *""'");  } 
  arg1 = reinterpret_cast< b2Draw * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw___SetFlags(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flags",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Draw___SetFlags", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw___SetFlags" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Draw___SetFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); { try { (arg1)->SetFlags(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw___GetFlags(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw___GetFlags" "', argument " "1"" of type '" "b2Draw const *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); { try { result = (uint32)((b2Draw const *)arg1)->GetFlags(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_AppendFlags(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flags",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Draw_AppendFlags", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_AppendFlags" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Draw_AppendFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); { try { (arg1)->AppendFlags(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_ClearFlags(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flags",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Draw_ClearFlags", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_ClearFlags" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Draw_ClearFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); { try { (arg1)->ClearFlags(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawPolygon(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; b2Color temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"vertices",  (char *)"vertexCount",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Draw_DrawPolygon", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawPolygon" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawPolygon" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Draw_DrawPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawPolygon" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawPolygon"); }  else {
          (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) {  SWIG_fail; }
        if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawSolidPolygon(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; b2Color temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"vertices",  (char *)"vertexCount",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Draw_DrawSolidPolygon", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidPolygon" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidPolygon" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Draw_DrawSolidPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidPolygon" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSolidPolygon"); }  else {
          (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) { 
        SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawCircle(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Color temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"center",  (char *)"radius",  (char *)"color",  NULL } ;
  Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Draw_DrawCircle", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawCircle" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawCircle" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Draw_DrawCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawCircle" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawCircle"); }  else {
          (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) {  SWIG_fail; }
        if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawSolidCircle(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Vec2 *arg4 = 0 ; b2Color *arg5 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ; b2Color temp5 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"center",  (char *)"radius",  (char *)"axis",  (char *)"color",  NULL } ;
  Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2Draw_DrawSolidCircle", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidCircle" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidCircle" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Draw_DrawSolidCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidCircle" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj4, 2, &temp5.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj4==Py_None) { temp5.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSolidCircle" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp5 =(b2Color&) *arg5; }  arg5 = &temp5; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSolidCircle"); }  else {
          (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5); }  }
       catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawSegment(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; b2Vec2 temp3 ; b2Color temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"p1",  (char *)"p2",  (char *)"color",  NULL } ;
  Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Draw_DrawSegment", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSegment" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSegment" "', argument " "p1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSegment" "', argument " "p2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawSegment" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSegment"); }  else {
          (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4); }  }
       catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw_DrawTransform(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; b2Transform *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"xf",  NULL } ;
  Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Draw_DrawTransform", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw_DrawTransform" "', argument " "1"" of type '" "b2Draw *""'");  }
   arg1 = reinterpret_cast< b2Draw * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Draw_DrawTransform" "', argument " "2"" of type '" "b2Transform const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Draw_DrawTransform" "', argument " "2"" of type '" "b2Transform const &""'"); }
   arg2 = reinterpret_cast< b2Transform * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawTransform"); }  else {
          (arg1)->DrawTransform((b2Transform const &)*arg2); }  }  catch(b2AssertException) {  SWIG_fail; }  
      if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Draw___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Draw___hash__" "', argument " "1"" of type '" "b2Draw *""'");  } 
  arg1 = reinterpret_cast< b2Draw * >(argp1); { try { result = (long)b2Draw___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2Draw(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Draw *arg1 = (b2Draw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = {
    (char *)"_self",  NULL } ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2Draw", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2Draw" "', argument " "1"" of type '" "b2Draw *""'");  } 
  arg1 = reinterpret_cast< b2Draw * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Draw_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Draw, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Draw_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2DrawExtended_convertVertices_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_convertVertices_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_convertVertices_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DrawExtended_convertVertices_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->convertVertices = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_convertVertices_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_convertVertices_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (bool) ((arg1)->convertVertices);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_center_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_center_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_center_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_center_set" "', argument " "center"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->center = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_center_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_center_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (b2Vec2 *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_offset_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_offset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_offset_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_offset_set" "', argument " "offset"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->offset = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_offset_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_offset_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (b2Vec2 *)& ((arg1)->offset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_zoom_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_zoom_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_zoom_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DrawExtended_zoom_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->zoom = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_zoom_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_zoom_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (float32) ((arg1)->zoom);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_screenSize_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_screenSize_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_screenSize_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_screenSize_set" "', argument " "screenSize"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->screenSize = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_screenSize_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_screenSize_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (b2Vec2 *)& ((arg1)->screenSize);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_flipY_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_flipY_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_flipY_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DrawExtended_flipY_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->flipY = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_flipY_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_flipY_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (bool) ((arg1)->flipY);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_flipX_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DrawExtended_flipX_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_flipX_set" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DrawExtended_flipX_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->flipX = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_flipX_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_flipX_get" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); result = (bool) ((arg1)->flipX);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended___Convert(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"verts",  (char *)"vertexCount",  NULL } ; PyObject *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2DrawExtended___Convert", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended___Convert" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended___Convert" "', argument " "verts"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DrawExtended___Convert" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { result = (PyObject *)(arg1)->__Convert((b2Vec2 const *)arg2,arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_to_screen(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"point",  NULL } ;
  PyObject *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DrawExtended_to_screen", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_to_screen" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_to_screen" "', argument " "point"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { result = (PyObject *)(arg1)->to_screen(*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawPolygon(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ;
  b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; b2Color temp4 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"conv_vertices",  (char *)"vertexCount",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2DrawExtended_DrawPolygon", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawPolygon" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawPolygon" "', argument " "conv_vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DrawExtended_DrawPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawPolygon" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawPolygon"); }  else {
          (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) {  SWIG_fail; }
        if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawSolidPolygon(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ;
  b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; b2Color temp4 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"conv_vertices",  (char *)"vertexCount",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2DrawExtended_DrawSolidPolygon", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidPolygon" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidPolygon" "', argument " "conv_vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DrawExtended_DrawSolidPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidPolygon" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawSolidPolygon"); }  else {
          (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) { 
        SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawCircle(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Color *arg4 = 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Color temp4 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"conv_p1",  (char *)"radius",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2DrawExtended_DrawCircle", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawCircle" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawCircle" "', argument " "conv_p1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DrawExtended_DrawCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawCircle" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawCircle"); }  else {
          (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4); }  }  catch(b2AssertException) {  SWIG_fail; }
        if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawSolidCircle(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Vec2 *arg4 = 0 ;
  b2Color *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ;
  b2Color temp5 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"conv_p1",  (char *)"radius",  (char *)"axis",  (char *)"color",  NULL } ;
  Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2DrawExtended_DrawSolidCircle", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidCircle" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidCircle" "', argument " "conv_p1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DrawExtended_DrawSolidCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidCircle" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj4, 2, &temp5.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj4==Py_None) { temp5.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSolidCircle" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp5 =(b2Color&) *arg5; }  arg5 = &temp5; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawSolidCircle"); }  else {
          (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5); }  }
       catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawSegment(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ;
  b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 temp3 ; b2Color temp4 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"conv_p1",  (char *)"conv_p2",  (char *)"color",  NULL } ; Swig::Director *director = 0;
  bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2DrawExtended_DrawSegment", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSegment" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSegment" "', argument " "conv_p1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSegment" "', argument " "conv_p2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 3, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.r, "Converting from sequence to b2Color, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.g, "Converting from sequence to b2Color, expected int/float arguments index 1");
      pybox2d_float_from_sequence(obj3, 2, &temp4.b, "Converting from sequence to b2Color, expected int/float arguments index 2"); }
     else if (obj3==Py_None) { temp4.Set(0.0f,0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Color, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawSegment" "', argument " "color"" of type '" "b2Color const &""'"); 
        SWIG_fail; }  temp4 =(b2Color&) *arg4; }  arg4 = &temp4; }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawSegment"); }  else {
          (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4); }  }
       catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended_DrawTransform(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; b2Transform *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"xf",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DrawExtended_DrawTransform", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended_DrawTransform" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DrawExtended_DrawTransform" "', argument " "2"" of type '" "b2Transform const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DrawExtended_DrawTransform" "', argument " "2"" of type '" "b2Transform const &""'"); }
   arg2 = reinterpret_cast< b2Transform * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DrawExtended::DrawTransform"); }  else {
          (arg1)->DrawTransform((b2Transform const &)*arg2); }  }  catch(b2AssertException) {  SWIG_fail; }  
      if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended___SetFlags(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"flags",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DrawExtended___SetFlags", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended___SetFlags" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DrawExtended___SetFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); { try { (arg1)->__SetFlags(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DrawExtended(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DrawExtended" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2DrawExtended(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  b2DrawExtended *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2DrawExtended", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2DrawExtended *)new SwigDirector_b2DrawExtended(arg1);  }  else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; }  }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DrawExtended, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DrawExtended___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DrawExtended___hash__" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { try { result = (long)b2DrawExtended___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2DrawExtended(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2DrawExtended *arg1 = (b2DrawExtended *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = {
    (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2DrawExtended", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DrawExtended, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2DrawExtended" "', argument " "1"" of type '" "b2DrawExtended *""'");  }
   arg1 = reinterpret_cast< b2DrawExtended * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DrawExtended_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DrawExtended, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DrawExtended_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_chunkSize_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_chunkSize is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_chunkSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_chunkSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxBlockSize_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxBlockSize is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxBlockSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxBlockSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_blockSizes_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_blockSizes is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_blockSizes_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_blockSizes)); return pyobj; }
SWIGINTERN int Swig_var_b2_chunkArrayIncrement_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_chunkArrayIncrement is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_chunkArrayIncrement_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_chunkArrayIncrement)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2MassData_mass_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MassData_mass_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_mass_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MassData_mass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->mass = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_mass_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_mass_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (float32) ((arg1)->mass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_center_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MassData_center_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_set" "', argument " "center"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->center = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_center_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (b2Vec2 *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_I_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MassData_I_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_I_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MassData_I_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->I = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_I_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_I_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (float32) ((arg1)->I);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData___hash__" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); { try { result = (long)b2MassData___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2MassData(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2MassData *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2MassData", 0, 0, 0)) SWIG_fail; { try { result = (b2MassData *)new b2MassData(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MassData, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MassData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MassData" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2MassData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MassData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MassData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2Shape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Shape" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___GetType(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape::Type result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___GetType" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); { try { result = (b2Shape::Type)((b2Shape const *)arg1)->GetType(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___GetChildCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___GetChildCount" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); { try { result = (int32)((b2Shape const *)arg1)->GetChildCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_TestPoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2Transform *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec2 temp3 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"xf",  (char *)"p",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Shape_TestPoint", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestPoint" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_TestPoint" "', argument " "2"" of type '" "b2Transform const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestPoint" "', argument " "2"" of type '" "b2Transform const &""'"); }
   arg2 = reinterpret_cast< b2Transform * >(argp2); {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestPoint" "', argument " "p"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  { try {
      result = (bool)((b2Shape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_RayCast(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ; b2RayCastInput *arg3 = 0 ;
  b2Transform *arg4 = 0 ; int32 arg5 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; int val5 ; int ecode5 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"output",  (char *)"input",  (char *)"transform",  (char *)"childIndex",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2Shape_RayCast", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_RayCast" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_RayCast" "', argument " "2"" of type '" "b2RayCastOutput *""'");  }
   arg2 = reinterpret_cast< b2RayCastOutput * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2RayCastInput,  0  | 0); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'"); }
   arg3 = reinterpret_cast< b2RayCastInput * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Shape_RayCast" "', argument " "4"" of type '" "b2Transform const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_RayCast" "', argument " "4"" of type '" "b2Transform const &""'"); }
   arg4 = reinterpret_cast< b2Transform * >(argp4); ecode5 = SWIG_AsVal_int(obj4, &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2Shape_RayCast" "', argument " "5"" of type '" "int32""'"); }  
  arg5 = static_cast< int32 >(val5); { try {
      result = (bool)((b2Shape const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,(b2Transform const &)*arg4,arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___ComputeAABB(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; b2Transform *arg3 = 0 ; int32 arg4 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"aabb",  (char *)"xf",  (char *)"childIndex",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Shape___ComputeAABB", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___ComputeAABB" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape___ComputeAABB" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape___ComputeAABB" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape___ComputeAABB" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Shape___ComputeAABB" "', argument " "4"" of type '" "int32""'"); }
    arg4 = static_cast< int32 >(val4); { try { ((b2Shape const *)arg1)->ComputeAABB(arg2,(b2Transform const &)*arg3,arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___ComputeMass(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"massData",  (char *)"density",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Shape___ComputeMass", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___ComputeMass" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape___ComputeMass" "', argument " "2"" of type '" "b2MassData *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Shape___ComputeMass" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { ((b2Shape const *)arg1)->ComputeMass(arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_radius_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Shape_radius_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_radius_set" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Shape_radius_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_radius = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_radius_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_radius_get" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (float32) ((arg1)->m_radius);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___hash__" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); { try { result = (long)b2Shape___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Shape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Shape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2CircleShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2CircleShape", 0, 0, 0)) SWIG_fail; { try {
      result = (b2CircleShape *)new b2CircleShape(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2CircleShape, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleShape_pos_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2CircleShape_pos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape_pos_set" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape_pos_set" "', argument " "m_p"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_p = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleShape_pos_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape_pos_get" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_p);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleShape___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape___hash__" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); { try { result = (long)b2CircleShape___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2CircleShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2CircleShape" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2CircleShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2CircleShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2CircleShape_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2EdgeShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2EdgeShape *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2EdgeShape", 0, 0, 0)) SWIG_fail; { try { result = (b2EdgeShape *)new b2EdgeShape(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2EdgeShape, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape___Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  b2Vec2 temp3 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"v1",  (char *)"v2",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2EdgeShape___Set", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape___Set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape___Set" "', argument " "v1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape___Set" "', argument " "v2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  { try { (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_vertex1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex1_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex1_set" "', argument " "m_vertex1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_vertex1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex1_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_vertex1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_vertex2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex2_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex2_set" "', argument " "m_vertex2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_vertex2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex2_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_vertex2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex0_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_vertex0_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex0_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex0_set" "', argument " "m_vertex0"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_vertex0 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex0_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex0_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_vertex0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex3_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_vertex3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex3_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex3_set" "', argument " "m_vertex3"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_vertex3 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_vertex3_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_vertex3_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_vertex3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_hasVertex0_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_hasVertex0_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_hasVertex0_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeShape_hasVertex0_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_hasVertex0 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_hasVertex0_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_hasVertex0_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (bool) ((arg1)->m_hasVertex0);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_hasVertex3_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2EdgeShape_hasVertex3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_hasVertex3_set" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeShape_hasVertex3_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_hasVertex3 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_hasVertex3_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_hasVertex3_get" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (bool) ((arg1)->m_hasVertex3);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape___hash__" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { try { result = (long)b2EdgeShape___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2EdgeShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2EdgeShape" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2EdgeShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2EdgeShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2EdgeShape_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2ChainShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ChainShape", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ChainShape *)new b2ChainShape(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ChainShape, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ChainShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ChainShape" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_CreateLoop(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"vertices",  (char *)"count",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ChainShape_CreateLoop", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_CreateLoop" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_CreateLoop" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2ChainShape_CreateLoop" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { (arg1)->CreateLoop((b2Vec2 const *)arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_CreateChain(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"vertices",  (char *)"count",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ChainShape_CreateChain", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_CreateChain" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_CreateChain" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2ChainShape_CreateChain" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { (arg1)->CreateChain((b2Vec2 const *)arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_SetPrevVertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"prevVertex",  NULL }
  ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ChainShape_SetPrevVertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_SetPrevVertex" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_SetPrevVertex" "', argument " "prevVertex"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetPrevVertex((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_SetNextVertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"nextVertex",  NULL }
  ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ChainShape_SetNextVertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_SetNextVertex" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_SetNextVertex" "', argument " "nextVertex"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetNextVertex((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___GetChildEdge(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2EdgeShape *arg2 = (b2EdgeShape *) 0 ; int32 arg3 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"edge",  (char *)"index",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ChainShape___GetChildEdge", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___GetChildEdge" "', argument " "1"" of type '" "b2ChainShape const *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ChainShape___GetChildEdge" "', argument " "2"" of type '" "b2EdgeShape *""'");  }
   arg2 = reinterpret_cast< b2EdgeShape * >(argp2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2ChainShape___GetChildEdge" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { ((b2ChainShape const *)arg1)->GetChildEdge(arg2,arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_prevVertex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ChainShape_m_prevVertex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_prevVertex_set" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_prevVertex_set" "', argument " "m_prevVertex"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_prevVertex = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_prevVertex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_prevVertex_get" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_prevVertex);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_nextVertex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ChainShape_m_nextVertex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_nextVertex_set" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_nextVertex_set" "', argument " "m_nextVertex"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_nextVertex = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_nextVertex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_nextVertex_get" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_nextVertex);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_hasPrevVertex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ChainShape_m_hasPrevVertex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_hasPrevVertex_set" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ChainShape_m_hasPrevVertex_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_hasPrevVertex = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_hasPrevVertex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_hasPrevVertex_get" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); result = (bool) ((arg1)->m_hasPrevVertex);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_hasNextVertex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ChainShape_m_hasNextVertex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_hasNextVertex_set" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ChainShape_m_hasNextVertex_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_hasNextVertex = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape_m_hasNextVertex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape_m_hasNextVertex_get" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); result = (bool) ((arg1)->m_hasNextVertex);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___hash__" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { try { result = (long)b2ChainShape___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___get_vertices(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___get_vertices" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { try { result = (PyObject *)b2ChainShape___get_vertices(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___create(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; _b2Vec2Array *arg2 = (_b2Vec2Array *) 0 ; int arg3 ; bool arg4 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; int val3 ; int ecode3 = 0 ; bool val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"v",  (char *)"c",  (char *)"loop",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2ChainShape___create", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___create" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p__b2Vec2Array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ChainShape___create" "', argument " "2"" of type '" "_b2Vec2Array *""'");  }
   arg2 = reinterpret_cast< _b2Vec2Array * >(argp2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2ChainShape___create" "', argument " "3"" of type '" "int""'"); }
    arg3 = static_cast< int >(val3); ecode4 = SWIG_AsVal_bool(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2ChainShape___create" "', argument " "4"" of type '" "bool""'"); }
    arg4 = static_cast< bool >(val4); { try { b2ChainShape___create(arg1,arg2,arg3,arg4); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___get_vertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ChainShape *arg1 = (b2ChainShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"vnum",  NULL } ; b2Vec2 *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ChainShape___get_vertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___get_vertex" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ChainShape___get_vertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); { try { result = (b2Vec2 *)b2ChainShape___get_vertex(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ChainShape___get_count(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ChainShape *arg1 = (b2ChainShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ChainShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ChainShape___get_count" "', argument " "1"" of type '" "b2ChainShape *""'");  }
   arg1 = reinterpret_cast< b2ChainShape * >(argp1); { try { result = (int32)b2ChainShape___get_count(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ChainShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ChainShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ChainShape_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2PolygonShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2PolygonShape", 0, 0, 0)) SWIG_fail; { try {
      result = (b2PolygonShape *)new b2PolygonShape(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PolygonShape, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___set_vertices_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___set_vertices_internal" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___set_vertices_internal" "', argument " "points"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonShape___set_vertices_internal" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { (arg1)->Set((b2Vec2 const *)arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_SetAsBox__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_SetAsBox" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_SetAsBox" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonShape_SetAsBox" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { (arg1)->SetAsBox(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_SetAsBox__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; float32 arg2 ; float32 arg3 ; b2Vec2 *arg4 = 0 ;
  float32 arg5 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ;
  float val5 ; int ecode5 = 0 ; if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_SetAsBox" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_SetAsBox" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonShape_SetAsBox" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PySequence_Check(swig_obj[3])) { if (PySequence_Size(swig_obj[3]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[3]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[3], 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[3], 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_SetAsBox" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2PolygonShape_SetAsBox" "', argument " "5"" of type '" "float32""'"); }
    arg5 = static_cast< float32 >(val5); { try { (arg1)->SetAsBox(arg2,arg3,(b2Vec2 const &)*arg4,arg5); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_SetAsBox(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[6] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2PolygonShape_SetAsBox", 0, 5, argv))) SWIG_fail; --argc; if (argc == 3) {
    PyObject *retobj = _wrap_b2PolygonShape_SetAsBox__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 5) {
    PyObject *retobj = _wrap_b2PolygonShape_SetAsBox__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2PolygonShape_SetAsBox'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2PolygonShape::SetAsBox(float32,float32)\n"
  "    b2PolygonShape::SetAsBox(float32,float32,b2Vec2 const &,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_Validate(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_Validate" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { result = (bool)((b2PolygonShape const *)arg1)->Validate(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_centroid_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2PolygonShape_centroid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_centroid_set" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_centroid_set" "', argument " "m_centroid"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_centroid = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_centroid_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_centroid_get" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (b2Vec2 *)& ((arg1)->m_centroid);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_vertexCount_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2PolygonShape_vertexCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_vertexCount_set" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_vertexCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_count = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_vertexCount_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_vertexCount_get" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (int32) ((arg1)->m_count);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___hash__" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { result = (long)b2PolygonShape___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___get_vertices(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___get_vertices" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { result = (PyObject *)b2PolygonShape___get_vertices(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___get_normals(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___get_normals" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { result = (PyObject *)b2PolygonShape___get_normals(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___get_vertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"vnum",  NULL } ; b2Vec2 *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PolygonShape___get_vertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___get_vertex" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape___get_vertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); { try { result = (b2Vec2 *)b2PolygonShape___get_vertex(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___get_normal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"vnum",  NULL } ; b2Vec2 *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PolygonShape___get_normal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___get_normal" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape___get_normal" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); { try { result = (b2Vec2 *)b2PolygonShape___get_normal(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_set_vertex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; b2Vec2 temp3 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_set_vertex" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_set_vertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); {  if (PySequence_Check(swig_obj[2])) { if (PySequence_Size(swig_obj[2]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[2]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[2], 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[2], 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_set_vertex" "', argument " "value"" of type '" "b2Vec2 &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  { try { b2PolygonShape_set_vertex__SWIG_0(arg1,arg2,*arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_set_vertex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; float32 arg3 ; float32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ;
  int ecode4 = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_set_vertex" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_set_vertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonShape_set_vertex" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2PolygonShape_set_vertex" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4); { try { b2PolygonShape_set_vertex__SWIG_1(arg1,arg2,arg3,arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_set_vertex(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[5] = { 0}
  ; if (!(argc = SWIG_Python_UnpackTuple(args, "b2PolygonShape_set_vertex", 0, 4, argv))) SWIG_fail; --argc; if (argc == 3) {
    PyObject *retobj = _wrap_b2PolygonShape_set_vertex__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 4) {
    PyObject *retobj = _wrap_b2PolygonShape_set_vertex__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2PolygonShape_set_vertex'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2PolygonShape::set_vertex(uint16,b2Vec2 &)\n"
  "    b2PolygonShape::set_vertex(uint16,float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___set_vertices_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape___set_vertices_internal" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { b2PolygonShape___set_vertices_internal__SWIG_1(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape___set_vertices_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2PolygonShape___set_vertices_internal", 0, 3, argv))) SWIG_fail; --argc;
  if (argc == 1) { PyObject *retobj = _wrap_b2PolygonShape___set_vertices_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_b2PolygonShape___set_vertices_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2PolygonShape___set_vertices_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2PolygonShape::Set(b2Vec2 const *,int32)\n"
  "    b2PolygonShape::__set_vertices_internal()\n"); return 0; }
SWIGINTERN PyObject *_wrap_delete_b2PolygonShape(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PolygonShape" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PolygonShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PolygonShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PolygonShape_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2TreeNode_IsLeaf(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_IsLeaf" "', argument " "1"" of type '" "b2TreeNode const *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); { try { result = (bool)((b2TreeNode const *)arg1)->IsLeaf(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_aabb_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TreeNode_aabb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_aabb_set" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TreeNode_aabb_set" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); if (arg1) (arg1)->aabb = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_aabb_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2AABB *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_aabb_get" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); result = (b2AABB *)& ((arg1)->aabb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_child1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TreeNode_child1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_child1_set" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TreeNode_child1_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->child1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_child1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_child1_get" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); result = (int32) ((arg1)->child1);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_child2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TreeNode_child2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_child2_set" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TreeNode_child2_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->child2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_child2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_child2_get" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); result = (int32) ((arg1)->child2);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_height_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TreeNode_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_height_set" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TreeNode_height_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->height = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TreeNode_height_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TreeNode_height_get" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); result = (int32) ((arg1)->height);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2TreeNode(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2TreeNode *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2TreeNode", 0, 0, 0)) SWIG_fail; { try { result = (b2TreeNode *)new b2TreeNode(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TreeNode, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TreeNode(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TreeNode *arg1 = (b2TreeNode *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TreeNode" "', argument " "1"" of type '" "b2TreeNode *""'");  }
   arg1 = reinterpret_cast< b2TreeNode * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2TreeNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TreeNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2TreeNode_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Pair_proxyIdA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Pair_proxyIdA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyIdA_set" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_proxyIdA_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->proxyIdA = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyIdA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyIdA_get" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (int32) ((arg1)->proxyIdA);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyIdB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Pair_proxyIdB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyIdB_set" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_proxyIdB_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->proxyIdB = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyIdB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyIdB_get" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (int32) ((arg1)->proxyIdB);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair___hash__" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); { try { result = (long)b2Pair___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Pair(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Pair *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Pair", 0, 0, 0)) SWIG_fail; { try { result = (b2Pair *)new b2Pair(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Pair, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Pair(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Pair" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Pair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Pair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Pair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2BroadPhase(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2BroadPhase", 0, 0, 0)) SWIG_fail; { try {
      result = (b2BroadPhase *)new b2BroadPhase(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BroadPhase, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BroadPhase(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BroadPhase" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_MoveProxy(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; b2AABB *arg3 = 0 ; b2Vec2 *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"proxyId",  (char *)"aabb",  (char *)"displacement",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2BroadPhase_MoveProxy", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_MoveProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_MoveProxy" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2BroadPhase_MoveProxy" "', argument " "3"" of type '" "b2AABB const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_MoveProxy" "', argument " "3"" of type '" "b2AABB const &""'"); }
   arg3 = reinterpret_cast< b2AABB * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_MoveProxy" "', argument " "displacement"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  { try {
      (arg1)->MoveProxy(arg2,(b2AABB const &)*arg3,(b2Vec2 const &)*arg4); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_TouchProxy(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"proxyId",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2BroadPhase_TouchProxy", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_TouchProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_TouchProxy" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); { try { (arg1)->TouchProxy(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_GetFatAABB(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"proxyId",  NULL } ;
  b2AABB *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2BroadPhase_GetFatAABB", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_GetFatAABB" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_GetFatAABB" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); { try { result = (b2AABB *) &((b2BroadPhase const *)arg1)->GetFatAABB(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_TestOverlap(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"proxyIdA",  (char *)"proxyIdB",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2BroadPhase_TestOverlap", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_TestOverlap" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_TestOverlap" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2BroadPhase_TestOverlap" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { result = (bool)((b2BroadPhase const *)arg1)->TestOverlap(arg2,arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase___GetProxyCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase___GetProxyCount" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { result = (int32)((b2BroadPhase const *)arg1)->GetProxyCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase___GetTreeHeight(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase___GetTreeHeight" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { result = (int32)((b2BroadPhase const *)arg1)->GetTreeHeight(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase___GetTreeBalance(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase___GetTreeBalance" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { result = (int32)((b2BroadPhase const *)arg1)->GetTreeBalance(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase___GetTreeQuality(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase___GetTreeQuality" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { result = (float32)((b2BroadPhase const *)arg1)->GetTreeQuality(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_ShiftOrigin(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"newOrigin",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2BroadPhase_ShiftOrigin", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_ShiftOrigin" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_ShiftOrigin" "', argument " "newOrigin"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->ShiftOrigin((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase___hash__" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); { try { result = (long)b2BroadPhase___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2BroadPhase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BroadPhase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BroadPhase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PairLessThan(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Pair *arg1 = 0 ; b2Pair *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"pair1",  (char *)"pair2",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PairLessThan", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_b2Pair,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairLessThan" "', argument " "1"" of type '" "b2Pair const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PairLessThan" "', argument " "1"" of type '" "b2Pair const &""'"); }
   arg1 = reinterpret_cast< b2Pair * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2Pair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairLessThan" "', argument " "2"" of type '" "b2Pair const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PairLessThan" "', argument " "2"" of type '" "b2Pair const &""'"); }
   arg2 = reinterpret_cast< b2Pair * >(argp2); { try {
      result = (bool)b2PairLessThan((b2Pair const &)*arg1,(b2Pair const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2DistanceProxy(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2DistanceProxy", 0, 0, 0)) SWIG_fail; { try {
      result = (b2DistanceProxy *)new b2DistanceProxy(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceProxy, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy_Set(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"shape",  (char *)"index",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2DistanceProxy_Set", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_Set" "', argument " "1"" of type '" "b2DistanceProxy *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceProxy_Set" "', argument " "2"" of type '" "b2Shape const *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DistanceProxy_Set" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); { try { (arg1)->Set((b2Shape const *)arg2,arg3); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy_GetSupport(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"d",  NULL } ;
  int32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceProxy_GetSupport", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_GetSupport" "', argument " "1"" of type '" "b2DistanceProxy const *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_GetSupport" "', argument " "d"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (int32)((b2DistanceProxy const *)arg1)->GetSupport((b2Vec2 const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy_GetSupportVertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"d",  NULL } ;
  b2Vec2 *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceProxy_GetSupportVertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_GetSupportVertex" "', argument " "1"" of type '" "b2DistanceProxy const *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_GetSupportVertex" "', argument " "d"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (b2Vec2 *) &((b2DistanceProxy const *)arg1)->GetSupportVertex((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy___get_vertex_count(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy___get_vertex_count" "', argument " "1"" of type '" "b2DistanceProxy const *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); { try {
      result = (int32)((b2DistanceProxy const *)arg1)->GetVertexCount(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy___get_vertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"index",  NULL } ; b2Vec2 *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceProxy___get_vertex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy___get_vertex" "', argument " "1"" of type '" "b2DistanceProxy const *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceProxy___get_vertex" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); { try { result = (b2Vec2 *) &((b2DistanceProxy const *)arg1)->GetVertex(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy_m_buffer_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; b2Vec2 *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceProxy_m_buffer_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_m_buffer_set" "', argument " "1"" of type '" "b2DistanceProxy *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceProxy_m_buffer_set" "', argument " "2"" of type '" "b2Vec2 [2]""'");  }
    arg2 = reinterpret_cast< b2Vec2 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(b2Vec2 *)&arg1->m_buffer[ii] = *((b2Vec2 *)arg2 + ii); }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_buffer""' of type '""b2Vec2 [2]""'"); }  }
   resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy_m_buffer_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy_m_buffer_get" "', argument " "1"" of type '" "b2DistanceProxy *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); result = (b2Vec2 *)(b2Vec2 *) ((arg1)->m_buffer);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceProxy___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceProxy___hash__" "', argument " "1"" of type '" "b2DistanceProxy *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); { try { result = (long)b2DistanceProxy___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceProxy(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceProxy *arg1 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceProxy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceProxy" "', argument " "1"" of type '" "b2DistanceProxy *""'");  }
   arg1 = reinterpret_cast< b2DistanceProxy * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DistanceProxy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceProxy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceProxy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2DistanceInput_proxyA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceInput_proxyA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_proxyA_set" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceInput_proxyA_set" "', argument " "2"" of type '" "b2DistanceProxy *""'");  }
   arg2 = reinterpret_cast< b2DistanceProxy * >(argp2); if (arg1) (arg1)->proxyA = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_proxyA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2DistanceProxy *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_proxyA_get" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); result = (b2DistanceProxy *)& ((arg1)->proxyA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_proxyB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceInput_proxyB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_proxyB_set" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceInput_proxyB_set" "', argument " "2"" of type '" "b2DistanceProxy *""'");  }
   arg2 = reinterpret_cast< b2DistanceProxy * >(argp2); if (arg1) (arg1)->proxyB = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_proxyB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2DistanceProxy *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_proxyB_get" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); result = (b2DistanceProxy *)& ((arg1)->proxyB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_transformA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; b2Transform *arg2 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceInput_transformA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_transformA_set" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceInput_transformA_set" "', argument " "2"" of type '" "b2Transform *""'");  }
   arg2 = reinterpret_cast< b2Transform * >(argp2); if (arg1) (arg1)->transformA = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_transformA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Transform *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_transformA_get" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); result = (b2Transform *)& ((arg1)->transformA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_transformB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; b2Transform *arg2 = (b2Transform *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceInput_transformB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_transformB_set" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Transform, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceInput_transformB_set" "', argument " "2"" of type '" "b2Transform *""'");  }
   arg2 = reinterpret_cast< b2Transform * >(argp2); if (arg1) (arg1)->transformB = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_transformB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Transform *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_transformB_get" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); result = (b2Transform *)& ((arg1)->transformB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_useRadii_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DistanceInput_useRadii_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_useRadii_set" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceInput_useRadii_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->useRadii = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput_useRadii_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput_useRadii_get" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); result = (bool) ((arg1)->useRadii);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceInput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceInput___hash__" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); { try { result = (long)b2DistanceInput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2DistanceInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2DistanceInput", 0, 0, 0)) SWIG_fail; { try {
      result = (b2DistanceInput *)new b2DistanceInput(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceInput, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceInput *arg1 = (b2DistanceInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceInput" "', argument " "1"" of type '" "b2DistanceInput *""'");  }
   arg1 = reinterpret_cast< b2DistanceInput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DistanceInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceInput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2DistanceOutput_pointA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceOutput_pointA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointA_set" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointA_set" "', argument " "pointA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->pointA = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_pointA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointA_get" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); result = (b2Vec2 *)& ((arg1)->pointA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_pointB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceOutput_pointB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointB_set" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointB_set" "', argument " "pointB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->pointB = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_pointB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_pointB_get" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); result = (b2Vec2 *)& ((arg1)->pointB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_distance_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceOutput_distance_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_distance_set" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceOutput_distance_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->distance = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_distance_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_distance_get" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); result = (float32) ((arg1)->distance);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_iterations_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2DistanceOutput_iterations_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_iterations_set" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceOutput_iterations_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->iterations = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput_iterations_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput_iterations_get" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); result = (int32) ((arg1)->iterations);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceOutput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceOutput___hash__" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); { try { result = (long)b2DistanceOutput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2DistanceOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2DistanceOutput", 0, 0, 0)) SWIG_fail; { try {
      result = (b2DistanceOutput *)new b2DistanceOutput(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {
       SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceOutput, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceOutput *arg1 = (b2DistanceOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceOutput, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceOutput" "', argument " "1"" of type '" "b2DistanceOutput *""'");  }
   arg1 = reinterpret_cast< b2DistanceOutput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DistanceOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceOutput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2TOIInput_proxyA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2TOIInput_proxyA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_proxyA_set" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TOIInput_proxyA_set" "', argument " "2"" of type '" "b2DistanceProxy *""'");  }
   arg2 = reinterpret_cast< b2DistanceProxy * >(argp2); if (arg1) (arg1)->proxyA = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_proxyA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2DistanceProxy *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_proxyA_get" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); result = (b2DistanceProxy *)& ((arg1)->proxyA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_proxyB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; b2DistanceProxy *arg2 = (b2DistanceProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2TOIInput_proxyB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_proxyB_set" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TOIInput_proxyB_set" "', argument " "2"" of type '" "b2DistanceProxy *""'");  }
   arg2 = reinterpret_cast< b2DistanceProxy * >(argp2); if (arg1) (arg1)->proxyB = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_proxyB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2DistanceProxy *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_proxyB_get" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); result = (b2DistanceProxy *)& ((arg1)->proxyB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceProxy, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_sweepA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; b2Sweep *arg2 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TOIInput_sweepA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_sweepA_set" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TOIInput_sweepA_set" "', argument " "2"" of type '" "b2Sweep *""'");  }
   arg2 = reinterpret_cast< b2Sweep * >(argp2); if (arg1) (arg1)->sweepA = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_sweepA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Sweep *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_sweepA_get" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); result = (b2Sweep *)& ((arg1)->sweepA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Sweep, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_sweepB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; b2Sweep *arg2 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TOIInput_sweepB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_sweepB_set" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TOIInput_sweepB_set" "', argument " "2"" of type '" "b2Sweep *""'");  }
   arg2 = reinterpret_cast< b2Sweep * >(argp2); if (arg1) (arg1)->sweepB = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_sweepB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Sweep *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_sweepB_get" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); result = (b2Sweep *)& ((arg1)->sweepB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Sweep, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_tMax_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TOIInput_tMax_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_tMax_set" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TOIInput_tMax_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->tMax = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput_tMax_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput_tMax_get" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); result = (float32) ((arg1)->tMax);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIInput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIInput___hash__" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); { try { result = (long)b2TOIInput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2TOIInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2TOIInput *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2TOIInput", 0, 0, 0)) SWIG_fail; { try { result = (b2TOIInput *)new b2TOIInput(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TOIInput, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TOIInput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIInput *arg1 = (b2TOIInput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TOIInput" "', argument " "1"" of type '" "b2TOIInput *""'");  }
   arg1 = reinterpret_cast< b2TOIInput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2TOIInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TOIInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2TOIInput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2TOIOutput_state_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; b2TOIOutput::State arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TOIOutput_state_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIOutput_state_set" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TOIOutput_state_set" "', argument " "2"" of type '" "b2TOIOutput::State""'"); }
    arg2 = static_cast< b2TOIOutput::State >(val2); if (arg1) (arg1)->state = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIOutput_state_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2TOIOutput::State result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIOutput_state_get" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); result = (b2TOIOutput::State) ((arg1)->state);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIOutput_t_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2TOIOutput_t_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIOutput_t_set" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TOIOutput_t_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->t = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIOutput_t_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIOutput_t_get" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); result = (float32) ((arg1)->t);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TOIOutput___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TOIOutput___hash__" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); { try { result = (long)b2TOIOutput___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2TOIOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2TOIOutput *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2TOIOutput", 0, 0, 0)) SWIG_fail; { try { result = (b2TOIOutput *)new b2TOIOutput(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TOIOutput, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TOIOutput(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2TOIOutput *arg1 = (b2TOIOutput *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TOIOutput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TOIOutput" "', argument " "1"" of type '" "b2TOIOutput *""'");  }
   arg1 = reinterpret_cast< b2TOIOutput * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2TOIOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TOIOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2TOIOutput_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2BodyDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2BodyDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2BodyDef", 0, 0, 0)) SWIG_fail; { try { result = (b2BodyDef *)new b2BodyDef(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BodyDef, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_type_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; b2BodyType arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_type_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_type_set" "', argument " "2"" of type '" "b2BodyType""'"); }
    arg2 = static_cast< b2BodyType >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_type_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2BodyType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_type_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (b2BodyType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_position_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_position_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_position_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_angle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angle_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_angle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angle = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angle_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->angle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearVelocity_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_linearVelocity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearVelocity_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearVelocity_set" "', argument " "linearVelocity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->linearVelocity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearVelocity_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearVelocity_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (b2Vec2 *)& ((arg1)->linearVelocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularVelocity_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_angularVelocity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularVelocity_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_angularVelocity_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularVelocity = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularVelocity_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularVelocity_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->angularVelocity);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearDamping_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_linearDamping_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearDamping_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_linearDamping_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->linearDamping = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearDamping_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearDamping_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->linearDamping);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularDamping_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_angularDamping_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularDamping_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_angularDamping_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularDamping = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularDamping_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularDamping_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->angularDamping);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_allowSleep_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_allowSleep_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_allowSleep_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_allowSleep_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->allowSleep = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_allowSleep_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_allowSleep_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->allowSleep);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_awake_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_awake_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_awake_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_awake_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->awake = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_awake_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_awake_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->awake);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_fixedRotation_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_fixedRotation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_fixedRotation_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_fixedRotation_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->fixedRotation = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_fixedRotation_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_fixedRotation_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->fixedRotation);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_bullet_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_bullet_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_bullet_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_bullet_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->bullet = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_bullet_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_bullet_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->bullet);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_active_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_active_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_active_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_active_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->active = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_active_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_active_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->active);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_gravityScale_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2BodyDef_gravityScale_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_gravityScale_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_gravityScale_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->gravityScale = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_gravityScale_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_gravityScale_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->gravityScale);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef___hash__" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { try { result = (long)b2BodyDef___hash__(arg1); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef___GetUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { try { result = (PyObject *)b2BodyDef___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2BodyDef___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef___SetUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); arg2 = obj1; { try { b2BodyDef___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_ClearUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { try { b2BodyDef_ClearUserData(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BodyDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BodyDef" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2BodyDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BodyDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BodyDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Body___CreateFixture__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; float32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; float val3 ; int ecode3 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___CreateFixture" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body___CreateFixture" "', argument " "2"" of type '" "b2Shape const *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body___CreateFixture" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { result = (b2Fixture *)(arg1)->CreateFixture((b2Shape const *)arg2,arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetTransform(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ;
  int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"position",  (char *)"angle",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Body___SetTransform", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetTransform" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetTransform" "', argument " "position"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body___SetTransform" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { (arg1)->SetTransform((b2Vec2 const &)*arg2,arg3); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetTransform(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Transform *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetTransform" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Transform *) &((b2Body const *)arg1)->GetTransform(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetPosition(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetPosition" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Vec2 *) &((b2Body const *)arg1)->GetPosition(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetAngle" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetAngle(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetWorldCenter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetWorldCenter" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Vec2 *) &((b2Body const *)arg1)->GetWorldCenter(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetLocalCenter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetLocalCenter" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Vec2 *) &((b2Body const *)arg1)->GetLocalCenter(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetLinearVelocity(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"v",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetLinearVelocity", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetLinearVelocity" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetLinearVelocity" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetLinearVelocity((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetLinearVelocity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetLinearVelocity" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Vec2 *) &((b2Body const *)arg1)->GetLinearVelocity(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetAngularVelocity(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"omega",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetAngularVelocity", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetAngularVelocity" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetAngularVelocity" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetAngularVelocity(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetAngularVelocity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetAngularVelocity" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetAngularVelocity(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyForce(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; bool arg4 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; b2Vec2 temp3 ; bool val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"force",  (char *)"point",  (char *)"wake",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Body_ApplyForce", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "force"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  ecode4 = SWIG_AsVal_bool(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Body_ApplyForce" "', argument " "4"" of type '" "bool""'"); }  
  arg4 = static_cast< bool >(val4); { try { (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyForceToCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; bool arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; bool val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"force",  (char *)"wake",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Body_ApplyForceToCenter", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForceToCenter" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForceToCenter" "', argument " "force"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_bool(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body_ApplyForceToCenter" "', argument " "3"" of type '" "bool""'"); }
    arg3 = static_cast< bool >(val3); { try { (arg1)->ApplyForceToCenter((b2Vec2 const &)*arg2,arg3); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyTorque(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; bool arg3 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  bool val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"torque",  (char *)"wake",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Body_ApplyTorque", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyTorque" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_ApplyTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_bool(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body_ApplyTorque" "', argument " "3"" of type '" "bool""'"); }  
  arg3 = static_cast< bool >(val3); { try { (arg1)->ApplyTorque(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyLinearImpulse(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; bool arg4 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 temp3 ; bool val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"impulse",  (char *)"point",  (char *)"wake",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Body_ApplyLinearImpulse", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyLinearImpulse" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyLinearImpulse" "', argument " "impulse"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyLinearImpulse" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  ecode4 = SWIG_AsVal_bool(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Body_ApplyLinearImpulse" "', argument " "4"" of type '" "bool""'"); }
    arg4 = static_cast< bool >(val4); { try { (arg1)->ApplyLinearImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyAngularImpulse(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; bool arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; bool val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"impulse",  (char *)"wake",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2Body_ApplyAngularImpulse", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyAngularImpulse" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_ApplyAngularImpulse" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_bool(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body_ApplyAngularImpulse" "', argument " "3"" of type '" "bool""'"); }
    arg3 = static_cast< bool >(val3); { try { (arg1)->ApplyAngularImpulse(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetMass(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetMass" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetMass(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetInertia(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetInertia" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetInertia(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetMassData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetMassData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetMassData" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body_GetMassData" "', argument " "2"" of type '" "b2MassData *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); { try { ((b2Body const *)arg1)->GetMassData(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetMassData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetMassData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetMassData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body___SetMassData" "', argument " "2"" of type '" "b2MassData const *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); { try { (arg1)->SetMassData((b2MassData const *)arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ResetMassData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ResetMassData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { (arg1)->ResetMassData(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorldPoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"localPoint",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetWorldPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldPoint" "', argument " "localPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorldVector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"localVector",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetWorldVector", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldVector" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldVector" "', argument " "localVector"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLocalPoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"worldPoint",  NULL } ; SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetLocalPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalPoint" "', argument " "worldPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLocalVector(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"worldVector",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetLocalVector", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalVector" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalVector" "', argument " "worldVector"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearVelocityFromWorldPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"worldPoint",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetLinearVelocityFromWorldPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromWorldPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromWorldPoint" "', argument " "worldPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearVelocityFromLocalPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"localPoint",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_GetLinearVelocityFromLocalPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromLocalPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromLocalPoint" "', argument " "localPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetLinearDamping(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetLinearDamping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetLinearDamping(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetLinearDamping(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"linearDamping",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetLinearDamping", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetLinearDamping" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetLinearDamping" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetLinearDamping(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetAngularDamping(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetAngularDamping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetAngularDamping(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetAngularDamping(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"angularDamping",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetAngularDamping", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetAngularDamping" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetAngularDamping" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetAngularDamping(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetGravityScale(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetGravityScale" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (float32)((b2Body const *)arg1)->GetGravityScale(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetGravityScale(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"scale",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetGravityScale", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetGravityScale" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetGravityScale" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetGravityScale(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetType(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2BodyType arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"type",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetType" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetType" "', argument " "2"" of type '" "b2BodyType""'"); }
    arg2 = static_cast< b2BodyType >(val2); { try { (arg1)->SetType(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetType(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2BodyType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetType" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2BodyType)((b2Body const *)arg1)->GetType(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetBullet(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetBullet", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetBullet" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetBullet" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); { try { (arg1)->SetBullet(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___IsBullet(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___IsBullet" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (bool)((b2Body const *)arg1)->IsBullet(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetSleepingAllowed(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetSleepingAllowed", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetSleepingAllowed" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetSleepingAllowed" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetSleepingAllowed(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___IsSleepingAllowed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___IsSleepingAllowed" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (bool)((b2Body const *)arg1)->IsSleepingAllowed(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetAwake(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetAwake", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetAwake" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetAwake" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); { try { (arg1)->SetAwake(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___IsAwake(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___IsAwake" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (bool)((b2Body const *)arg1)->IsAwake(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetActive(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetActive", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetActive" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetActive" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); { try { (arg1)->SetActive(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___IsActive(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___IsActive" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (bool)((b2Body const *)arg1)->IsActive(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetFixedRotation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetFixedRotation", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetFixedRotation" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body___SetFixedRotation" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetFixedRotation(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___IsFixedRotation(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___IsFixedRotation" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (bool)((b2Body const *)arg1)->IsFixedRotation(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetFixtureList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetFixtureList_internal" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Fixture *)(arg1)->GetFixtureList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetFixtureList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetFixtureList_internal" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Fixture *)((b2Body const *)arg1)->GetFixtureList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetFixtureList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___GetFixtureList_internal", 0, 1, argv))) SWIG_fail; --argc;
  if (argc == 1) { PyObject *retobj = _wrap_b2Body___GetFixtureList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetFixtureList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___GetFixtureList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::GetFixtureList()\n" "    b2Body::GetFixtureList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body___GetJointList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2JointEdge *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetJointList_internal" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2JointEdge *)(arg1)->GetJointList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetJointList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2JointEdge *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetJointList_internal" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2JointEdge *)((b2Body const *)arg1)->GetJointList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetJointList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___GetJointList_internal", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetJointList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetJointList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___GetJointList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::GetJointList()\n" "    b2Body::GetJointList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body___GetContactList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2ContactEdge *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetContactList_internal" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2ContactEdge *)(arg1)->GetContactList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetContactList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2ContactEdge *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetContactList_internal" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2ContactEdge *)((b2Body const *)arg1)->GetContactList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetContactList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___GetContactList_internal", 0, 1, argv))) SWIG_fail; --argc;
  if (argc == 1) { PyObject *retobj = _wrap_b2Body___GetContactList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetContactList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___GetContactList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::GetContactList()\n" "    b2Body::GetContactList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body___GetNext__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetNext" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Body *)(arg1)->GetNext(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetNext__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetNext" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2Body *)((b2Body const *)arg1)->GetNext(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetNext(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___GetNext", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetNext__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetNext__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___GetNext'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::GetNext()\n" "    b2Body::GetNext() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body___GetWorld__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2World *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetWorld" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2World *)(arg1)->GetWorld(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetWorld__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2World *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetWorld" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (b2World *)((b2Body const *)arg1)->GetWorld(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___GetWorld(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___GetWorld", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetWorld__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Body___GetWorld__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___GetWorld'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::GetWorld()\n" "    b2Body::GetWorld() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body_Dump(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_Dump" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); { try { (arg1)->Dump(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___hash__" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (long)b2Body___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_DestroyFixture(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"fixture",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body_DestroyFixture", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_DestroyFixture" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body_DestroyFixture" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); { try { b2Body_DestroyFixture(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___CreateFixture__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2FixtureDef *arg2 = (b2FixtureDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Fixture *result = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___CreateFixture" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body___CreateFixture" "', argument " "2"" of type '" "b2FixtureDef *""'");  }
   arg2 = reinterpret_cast< b2FixtureDef * >(argp2); { try { result = (b2Fixture *)b2Body___CreateFixture__SWIG_1(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___CreateFixture(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[4] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Body___CreateFixture", 0, 3, argv))) SWIG_fail; --argc; if (argc == 2) {
    PyObject *retobj = _wrap_b2Body___CreateFixture__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 3) {
    PyObject *retobj = _wrap_b2Body___CreateFixture__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Body___CreateFixture'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Body::CreateFixture(b2Shape const *,float32)\n"
  "    b2Body::__CreateFixture(b2FixtureDef *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Body___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___GetUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { result = (PyObject *)b2Body___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Body___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___SetUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); arg2 = obj1; { try { b2Body___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ClearUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); { try { b2Body_ClearUserData(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Body_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Body, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2Filter(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Filter *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Filter", 0, 0, 0)) SWIG_fail; { try { result = (b2Filter *)new b2Filter(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Filter, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_categoryBits_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Filter_categoryBits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_categoryBits_set" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Filter_categoryBits_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->categoryBits = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_categoryBits_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_categoryBits_get" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); result = (uint16) ((arg1)->categoryBits);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_maskBits_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Filter_maskBits_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_maskBits_set" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Filter_maskBits_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->maskBits = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_maskBits_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_maskBits_get" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); result = (uint16) ((arg1)->maskBits);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_groupIndex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; int16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Filter_groupIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_groupIndex_set" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); ecode2 = SWIG_AsVal_short(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Filter_groupIndex_set" "', argument " "2"" of type '" "int16""'"); }
    arg2 = static_cast< int16 >(val2); if (arg1) (arg1)->groupIndex = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter_groupIndex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter_groupIndex_get" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); result = (int16) ((arg1)->groupIndex);
  resultobj = SWIG_From_short(static_cast< short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Filter___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Filter___hash__" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); { try { result = (long)b2Filter___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Filter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Filter *arg1 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Filter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Filter" "', argument " "1"" of type '" "b2Filter *""'");  }
   arg1 = reinterpret_cast< b2Filter * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Filter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Filter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Filter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2FixtureDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2FixtureDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2FixtureDef *)new b2FixtureDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FixtureDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_shape_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_shape_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_shape_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2FixtureDef_shape_set" "', argument " "2"" of type '" "b2Shape const *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->shape = (b2Shape const *)arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_shape_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_shape_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (b2Shape *) ((arg1)->shape); { if (result) {
      switch ((result)->GetType()) { case b2Shape::e_circle:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case b2Shape::e_polygon:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case b2Shape::e_edge:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case b2Shape::e_chain:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ChainShape, 0); break; default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_friction_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_friction_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_friction_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureDef_friction_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->friction = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_friction_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_friction_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (float32) ((arg1)->friction);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_restitution_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_restitution_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_restitution_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureDef_restitution_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->restitution = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_restitution_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_restitution_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (float32) ((arg1)->restitution);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_density_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_density_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_density_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureDef_density_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->density = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_density_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_density_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (float32) ((arg1)->density);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_isSensor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_isSensor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_isSensor_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureDef_isSensor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->isSensor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_isSensor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_isSensor_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (bool) ((arg1)->isSensor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_filter_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; b2Filter *arg2 = (b2Filter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FixtureDef_filter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_filter_set" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2FixtureDef_filter_set" "', argument " "2"" of type '" "b2Filter *""'");  }
   arg2 = reinterpret_cast< b2Filter * >(argp2); if (arg1) (arg1)->filter = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_filter_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Filter *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_filter_get" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); result = (b2Filter *)& ((arg1)->filter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Filter, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef___hash__" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); { try { result = (long)b2FixtureDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef___GetUserData" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); { try { result = (PyObject *)b2FixtureDef___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2FixtureDef___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef___SetUserData" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); arg2 = obj1; { try { b2FixtureDef___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureDef_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureDef_ClearUserData" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); { try { b2FixtureDef_ClearUserData(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2FixtureDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2FixtureDef" "', argument " "1"" of type '" "b2FixtureDef *""'");  }
   arg1 = reinterpret_cast< b2FixtureDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2FixtureDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2FixtureDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2FixtureDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2FixtureProxy_aabb_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FixtureProxy_aabb_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_aabb_set" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2FixtureProxy_aabb_set" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); if (arg1) (arg1)->aabb = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_aabb_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2AABB *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_aabb_get" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); result = (b2AABB *)& ((arg1)->aabb);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_fixture_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FixtureProxy_fixture_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_fixture_set" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Fixture, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2FixtureProxy_fixture_set" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); if (arg1) (arg1)->fixture = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_fixture_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Fixture *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_fixture_get" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); result = (b2Fixture *) ((arg1)->fixture);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_childIndex_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureProxy_childIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_childIndex_set" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureProxy_childIndex_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->childIndex = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_childIndex_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_childIndex_get" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); result = (int32) ((arg1)->childIndex);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_proxyId_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2FixtureProxy_proxyId_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_proxyId_set" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FixtureProxy_proxyId_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->proxyId = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy_proxyId_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy_proxyId_get" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); result = (int32) ((arg1)->proxyId);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FixtureProxy___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FixtureProxy___hash__" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); { try { result = (long)b2FixtureProxy___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2FixtureProxy(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2FixtureProxy", 0, 0, 0)) SWIG_fail; { try {
      result = (b2FixtureProxy *)new b2FixtureProxy(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FixtureProxy, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2FixtureProxy(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FixtureProxy *arg1 = (b2FixtureProxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FixtureProxy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2FixtureProxy" "', argument " "1"" of type '" "b2FixtureProxy *""'");  }
   arg1 = reinterpret_cast< b2FixtureProxy * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2FixtureProxy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2FixtureProxy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2FixtureProxy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Fixture___GetType(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape::Type result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetType" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Shape::Type)((b2Fixture const *)arg1)->GetType(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetShape__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Shape *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetShape" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Shape *)(arg1)->GetShape(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) { switch ((result)->GetType()) {
        case b2Shape::e_circle: resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break;
        case b2Shape::e_polygon: resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break;
        case b2Shape::e_edge: resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case b2Shape::e_chain:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ChainShape, 0); break; default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetShape__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Shape *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetShape" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Shape *)((b2Fixture const *)arg1)->GetShape(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case b2Shape::e_circle:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case b2Shape::e_polygon:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case b2Shape::e_edge:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case b2Shape::e_chain:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ChainShape, 0); break; default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetShape(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Fixture___GetShape", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetShape__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetShape__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Fixture___GetShape'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Fixture::GetShape()\n" "    b2Fixture::GetShape() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetSensor(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"sensor",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetSensor", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetSensor" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture___SetSensor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetSensor(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___IsSensor(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___IsSensor" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (bool)((b2Fixture const *)arg1)->IsSensor(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetFilterData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; b2Filter *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"filter",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetFilterData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetFilterData" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_b2Filter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Fixture___SetFilterData" "', argument " "2"" of type '" "b2Filter const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Fixture___SetFilterData" "', argument " "2"" of type '" "b2Filter const &""'"); }
   arg2 = reinterpret_cast< b2Filter * >(argp2); { try { (arg1)->SetFilterData((b2Filter const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetFilterData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Filter *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetFilterData" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Filter *) &((b2Fixture const *)arg1)->GetFilterData(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Filter, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture_Refilter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_Refilter" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { (arg1)->Refilter(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetBody__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetBody" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Body *)(arg1)->GetBody(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetBody__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetBody" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Body *)((b2Fixture const *)arg1)->GetBody(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetBody(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Fixture___GetBody", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetBody__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetBody__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Fixture___GetBody'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Fixture::GetBody()\n" "    b2Fixture::GetBody() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetNext__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetNext" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Fixture *)(arg1)->GetNext(); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetNext__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetNext" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (b2Fixture *)((b2Fixture const *)arg1)->GetNext(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetNext(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Fixture___GetNext", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetNext__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Fixture___GetNext__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Fixture___GetNext'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Fixture::GetNext()\n" "    b2Fixture::GetNext() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Fixture_TestPoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"p",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture_TestPoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_TestPoint" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_TestPoint" "', argument " "p"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try {
      result = (bool)((b2Fixture const *)arg1)->TestPoint((b2Vec2 const &)*arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture_RayCast(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ; b2RayCastInput *arg3 = 0 ; int32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"output",  (char *)"input",  (char *)"childIndex",  NULL } ; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Fixture_RayCast", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_RayCast" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Fixture_RayCast" "', argument " "2"" of type '" "b2RayCastOutput *""'");  }
   arg2 = reinterpret_cast< b2RayCastOutput * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2RayCastInput,  0  | 0); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Fixture_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Fixture_RayCast" "', argument " "3"" of type '" "b2RayCastInput const &""'"); }
   arg3 = reinterpret_cast< b2RayCastInput * >(argp3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Fixture_RayCast" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); { try {
      result = (bool)((b2Fixture const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,arg4); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetMassData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"massData",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___GetMassData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetMassData" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Fixture___GetMassData" "', argument " "2"" of type '" "b2MassData *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); { try { ((b2Fixture const *)arg1)->GetMassData(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetDensity(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"density",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetDensity", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetDensity" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture___SetDensity" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetDensity(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetDensity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetDensity" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (float32)((b2Fixture const *)arg1)->GetDensity(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetFriction(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetFriction" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (float32)((b2Fixture const *)arg1)->GetFriction(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetFriction(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"friction",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetFriction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetFriction" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture___SetFriction" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetFriction(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetRestitution(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetRestitution" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (float32)((b2Fixture const *)arg1)->GetRestitution(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetRestitution(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Fixture *arg1 = (b2Fixture *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"restitution",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetRestitution", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetRestitution" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture___SetRestitution" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetRestitution(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture_GetAABB(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"childIndex",  NULL } ;
  b2AABB *result = 0 ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture_GetAABB", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_GetAABB" "', argument " "1"" of type '" "b2Fixture const *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture_GetAABB" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); { try { result = (b2AABB *) &((b2Fixture const *)arg1)->GetAABB(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture_Dump(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"bodyIndex",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture_Dump", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_Dump" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Fixture_Dump" "', argument " "2"" of type '" "int32""'"); }  
  arg2 = static_cast< int32 >(val2); { try { (arg1)->Dump(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___hash__" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (long)b2Fixture___hash__(arg1); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___GetUserData" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { result = (PyObject *)b2Fixture___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Fixture___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture___SetUserData" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); arg2 = obj1; { try { b2Fixture___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Fixture_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Fixture_ClearUserData" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { b2Fixture_ClearUserData(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Fixture(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Fixture *arg1 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Fixture, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Fixture" "', argument " "1"" of type '" "b2Fixture *""'");  }
   arg1 = reinterpret_cast< b2Fixture * >(argp1); { try { delete_b2Fixture(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Fixture_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Fixture, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_b2DestructionListener(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DestructionListener" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; Swig::Director *director = 0; bool upcall = false;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DestructionListener::SayGoodbye"); }  else { (arg1)->SayGoodbye(arg2); }
         }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; Swig::Director *director = 0; bool upcall = false;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2DestructionListener::SayGoodbye"); }  else { (arg1)->SayGoodbye(arg2); }
         }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[3] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2DestructionListener_SayGoodbye", 0, 2, argv))) SWIG_fail; --argc;
  if (argc == 2) { int _v = 0; { void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2Joint, 0);
      _v = SWIG_CheckState(res);}  if (!_v) goto check_1;
    return _wrap_b2DestructionListener_SayGoodbye__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    PyObject *retobj = _wrap_b2DestructionListener_SayGoodbye__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2DestructionListener_SayGoodbye'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2DestructionListener::SayGoodbye(b2Joint *)\n"
  "    b2DestructionListener::SayGoodbye(b2Fixture *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2DestructionListener___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  long result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DestructionListener___hash__" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1); { try { result = (long)b2DestructionListener___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2DestructionListener(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL }
  ; b2DestructionListener *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2DestructionListener", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2DestructionListener *)new SwigDirector_b2DestructionListener(arg1);  }  else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; }  }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DestructionListener, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2DestructionListener(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2DestructionListener", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2DestructionListener" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DestructionListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DestructionListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DestructionListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2ContactFilter(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactFilter" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFilter_ShouldCollide(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ;
  b2Fixture *arg3 = (b2Fixture *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"fixtureA",  (char *)"fixtureB",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ContactFilter_ShouldCollide", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "3"" of type '" "b2Fixture *""'");  }
   arg3 = reinterpret_cast< b2Fixture * >(argp3); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          result = (bool)(arg1)->b2ContactFilter::ShouldCollide(arg2,arg3); }  else {
          result = (bool)(arg1)->ShouldCollide(arg2,arg3); }  }  catch(b2AssertException) {  SWIG_fail; }  
      if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFilter___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFilter___hash__" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); { try { result = (long)b2ContactFilter___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactFilter(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  b2ContactFilter *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2ContactFilter", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2ContactFilter *)new SwigDirector_b2ContactFilter(arg1);  }  else {
        result = (b2ContactFilter *)new b2ContactFilter();  }  }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactFilter, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2ContactFilter(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = {
    (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2ContactFilter", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2ContactFilter" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactFilter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactImpulse_count_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactImpulse_count_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactImpulse_count_set" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactImpulse_count_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->count = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactImpulse_count_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactImpulse_count_get" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); result = (int32) ((arg1)->count);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactImpulse___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactImpulse___hash__" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); { try { result = (long)b2ContactImpulse___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactImpulse___get_normal_impulses(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  PyObject *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactImpulse___get_normal_impulses" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); { try {
      result = (PyObject *)b2ContactImpulse___get_normal_impulses(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactImpulse___get_tangent_impulses(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  PyObject *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactImpulse___get_tangent_impulses" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); { try {
      result = (PyObject *)b2ContactImpulse___get_tangent_impulses(arg1); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactImpulse(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ContactImpulse", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ContactImpulse *)new b2ContactImpulse(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {
       SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactImpulse, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactImpulse(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactImpulse *arg1 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactImpulse, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactImpulse" "', argument " "1"" of type '" "b2ContactImpulse *""'");  }
   arg1 = reinterpret_cast< b2ContactImpulse * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactImpulse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactImpulse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactImpulse_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2ContactListener(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactListener" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_BeginContact(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"contact",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ContactListener_BeginContact", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_BeginContact" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_BeginContact" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          (arg1)->b2ContactListener::BeginContact(arg2); }  else { (arg1)->BeginContact(arg2); }  }  catch(b2AssertException) { 
        SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_EndContact(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"contact",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ContactListener_EndContact", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_EndContact" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_EndContact" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          (arg1)->b2ContactListener::EndContact(arg2); }  else { (arg1)->EndContact(arg2); }  }  catch(b2AssertException) { 
        SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_PreSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ;
  b2Manifold *arg3 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"contact",  (char *)"oldManifold",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ContactListener_PreSolve", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_PreSolve" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_PreSolve" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); { void* argp=NULL;
    int res3 = SWIG_ConvertPtr(obj2, &argp, SWIGTYPE_p_b2Manifold, 0); Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    bool upcall_ = (director && (director->swig_get_self()==obj0)); if (upcall_) {  }  else if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2ContactListener_PreSolve" "', argument " "oldManifold"" of type '" "b2Manifold const *""'");  }
     arg3 = reinterpret_cast<b2Manifold*>(argp); }  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          (arg1)->b2ContactListener::PreSolve(arg2,(b2Manifold const *)arg3); }  else {
          (arg1)->PreSolve(arg2,(b2Manifold const *)arg3); }  }  catch(b2AssertException) {  SWIG_fail; }  
      if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_PostSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ;
  b2ContactImpulse *arg3 = (b2ContactImpulse *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"contact",  (char *)"impulse",  NULL } ; Swig::Director *director = 0; bool upcall = false;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ContactListener_PostSolve", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_PostSolve" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_PostSolve" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2ContactImpulse, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2ContactListener_PostSolve" "', argument " "3"" of type '" "b2ContactImpulse const *""'");  }
   arg3 = reinterpret_cast< b2ContactImpulse * >(argp3); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          (arg1)->b2ContactListener::PostSolve(arg2,(b2ContactImpulse const *)arg3); }  else {
          (arg1)->PostSolve(arg2,(b2ContactImpulse const *)arg3); }  }  catch(b2AssertException) {  SWIG_fail; }  
      if (PyErr_Occurred()) {  SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener___hash__" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); { try { result = (long)b2ContactListener___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactListener(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  b2ContactListener *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2ContactListener", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2ContactListener *)new SwigDirector_b2ContactListener(arg1);  }  else {
        result = (b2ContactListener *)new b2ContactListener();  }  }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactListener, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2ContactListener(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  char * kwnames[] = { (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2ContactListener", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2ContactListener" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2QueryCallback(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2QueryCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2QueryCallback" "', argument " "1"" of type '" "b2QueryCallback *""'");  }
   arg1 = reinterpret_cast< b2QueryCallback * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2QueryCallback_ReportFixture(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2QueryCallback *arg1 = (b2QueryCallback *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"fixture",  NULL } ; Swig::Director *director = 0; bool upcall = false; bool result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2QueryCallback_ReportFixture", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2QueryCallback_ReportFixture" "', argument " "1"" of type '" "b2QueryCallback *""'");  }
   arg1 = reinterpret_cast< b2QueryCallback * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2QueryCallback_ReportFixture" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2QueryCallback::ReportFixture"); }  else {
          result = (bool)(arg1)->ReportFixture(arg2); }  }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
        SWIG_fail; }  }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2QueryCallback___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2QueryCallback___hash__" "', argument " "1"" of type '" "b2QueryCallback *""'");  }
   arg1 = reinterpret_cast< b2QueryCallback * >(argp1); { try { result = (long)b2QueryCallback___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2QueryCallback(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  b2QueryCallback *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2QueryCallback", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2QueryCallback *)new SwigDirector_b2QueryCallback(arg1);  }  else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; }  }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2QueryCallback, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2QueryCallback(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ; char * kwnames[] = {
    (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2QueryCallback", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2QueryCallback" "', argument " "1"" of type '" "b2QueryCallback *""'");  }
   arg1 = reinterpret_cast< b2QueryCallback * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2QueryCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2QueryCallback, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2QueryCallback_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2RayCastCallback(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastCallback, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RayCastCallback" "', argument " "1"" of type '" "b2RayCastCallback *""'");  }
   arg1 = reinterpret_cast< b2RayCastCallback * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastCallback_ReportFixture(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ; b2Fixture *arg2 = (b2Fixture *) 0 ;
  b2Vec2 *arg3 = 0 ; b2Vec2 *arg4 = 0 ; float32 arg5 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  b2Vec2 temp3 ; b2Vec2 temp4 ; float val5 ; int ecode5 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"fixture",  (char *)"point",  (char *)"normal",  (char *)"fraction",  NULL } ;
  Swig::Director *director = 0; bool upcall = false; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2RayCastCallback_ReportFixture", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RayCastCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastCallback_ReportFixture" "', argument " "1"" of type '" "b2RayCastCallback *""'");  }
   arg1 = reinterpret_cast< b2RayCastCallback * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RayCastCallback_ReportFixture" "', argument " "2"" of type '" "b2Fixture *""'");  }
   arg2 = reinterpret_cast< b2Fixture * >(argp2); {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastCallback_ReportFixture" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastCallback_ReportFixture" "', argument " "normal"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_float(obj4, &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2RayCastCallback_ReportFixture" "', argument " "5"" of type '" "float32""'"); }
    arg5 = static_cast< float32 >(val5); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0)); try { { try { if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2RayCastCallback::ReportFixture"); }  else {
          result = (float32)(arg1)->ReportFixture(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4,arg5); }  }
       catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RayCastCallback___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RayCastCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RayCastCallback___hash__" "', argument " "1"" of type '" "b2RayCastCallback *""'");  }
   arg1 = reinterpret_cast< b2RayCastCallback * >(argp1); { try { result = (long)b2RayCastCallback___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2RayCastCallback(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"_self",  NULL } ;
  b2RayCastCallback *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2RayCastCallback", kwnames, &obj0)) SWIG_fail; arg1 = obj0; { try {
      if ( arg1 != Py_None ) {  result = (b2RayCastCallback *)new SwigDirector_b2RayCastCallback(arg1);  }  else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; }  }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RayCastCallback, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2RayCastCallback(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2RayCastCallback *arg1 = (b2RayCastCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  char * kwnames[] = { (char *)"_self",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_b2RayCastCallback", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RayCastCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2RayCastCallback" "', argument " "1"" of type '" "b2RayCastCallback *""'");  }
   arg1 = reinterpret_cast< b2RayCastCallback * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RayCastCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RayCastCallback, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RayCastCallback_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Profile_step_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_step_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_step_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_step_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->step = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_step_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_step_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->step);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_collide_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_collide_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_collide_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_collide_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->collide = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_collide_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_collide_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->collide);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solve_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_solve_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solve_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_solve_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->solve = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solve_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solve_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->solve);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveInit_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_solveInit_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveInit_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_solveInit_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->solveInit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveInit_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveInit_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->solveInit);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveVelocity_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_solveVelocity_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveVelocity_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_solveVelocity_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->solveVelocity = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveVelocity_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveVelocity_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->solveVelocity);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solvePosition_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_solvePosition_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solvePosition_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_solvePosition_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->solvePosition = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solvePosition_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solvePosition_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->solvePosition);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_broadphase_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_broadphase_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_broadphase_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_broadphase_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->broadphase = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_broadphase_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_broadphase_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->broadphase);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveTOI_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Profile_solveTOI_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveTOI_set" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Profile_solveTOI_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->solveTOI = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Profile_solveTOI_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Profile_solveTOI_get" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); result = (float32) ((arg1)->solveTOI);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Profile(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Profile *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Profile", 0, 0, 0)) SWIG_fail; { try { result = (b2Profile *)new b2Profile(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Profile, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Profile(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Profile *arg1 = (b2Profile *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Profile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Profile" "', argument " "1"" of type '" "b2Profile *""'");  }
   arg1 = reinterpret_cast< b2Profile * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Profile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Profile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Profile_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2SolverData_step_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; b2TimeStep *arg2 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2SolverData_step_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_step_set" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2TimeStep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2SolverData_step_set" "', argument " "2"" of type '" "b2TimeStep *""'");  }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); if (arg1) (arg1)->step = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2SolverData_step_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2TimeStep *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_step_get" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1); result = (b2TimeStep *)& ((arg1)->step);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TimeStep, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2SolverData_positions_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; b2Position *arg2 = (b2Position *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2SolverData_positions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_positions_set" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Position, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2SolverData_positions_set" "', argument " "2"" of type '" "b2Position *""'");  }
   arg2 = reinterpret_cast< b2Position * >(argp2); if (arg1) (arg1)->positions = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2SolverData_positions_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Position *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_positions_get" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1); result = (b2Position *) ((arg1)->positions);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Position, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2SolverData_velocities_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; b2Velocity *arg2 = (b2Velocity *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2SolverData_velocities_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_velocities_set" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Velocity, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2SolverData_velocities_set" "', argument " "2"" of type '" "b2Velocity *""'");  }
   arg2 = reinterpret_cast< b2Velocity * >(argp2); if (arg1) (arg1)->velocities = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2SolverData_velocities_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Velocity *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2SolverData_velocities_get" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1); result = (b2Velocity *) ((arg1)->velocities);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Velocity, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2SolverData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2SolverData", 0, 0, 0)) SWIG_fail; { try {
      result = (b2SolverData *)new b2SolverData(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  }  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2SolverData, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2SolverData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2SolverData *arg1 = (b2SolverData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2SolverData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2SolverData" "', argument " "1"" of type '" "b2SolverData *""'");  }
   arg1 = reinterpret_cast< b2SolverData * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2SolverData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2SolverData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2SolverData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_stackSize_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_stackSize is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_stackSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_stackSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxStackEntries_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxStackEntries is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxStackEntries_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxStackEntries)); return pyobj; }
SWIGINTERN PyObject *_wrap_new_b2ContactManager(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ContactManager", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ContactManager *)new b2ContactManager(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {
       SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactManager, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_AddPair(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *arg2 = (void *) 0 ; void *arg3 = (void *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"proxyUserDataA",  (char *)"proxyUserDataB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2ContactManager_AddPair", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_AddPair" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); { arg2 = obj1; Py_INCREF((PyObject*)arg2); }  { arg3 = obj2;
    Py_INCREF((PyObject*)arg3); }  { try { (arg1)->AddPair(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_FindNewContacts(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_FindNewContacts" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); { try { (arg1)->FindNewContacts(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_Destroy(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"c",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2ContactManager_Destroy", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_Destroy" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_Destroy" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); { try { (arg1)->Destroy(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_Collide(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_Collide" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); { try { (arg1)->Collide(); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_broadPhase_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2BroadPhase *arg2 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_broadPhase_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_broadPhase_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_broadPhase_set" "', argument " "2"" of type '" "b2BroadPhase *""'");  }
   arg2 = reinterpret_cast< b2BroadPhase * >(argp2); if (arg1) (arg1)->m_broadPhase = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_broadPhase_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2BroadPhase *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_broadPhase_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2BroadPhase *)& ((arg1)->m_broadPhase);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BroadPhase, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactList_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_contactList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactList_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_contactList_set" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); if (arg1) (arg1)->m_contactList = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactList_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Contact *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactList_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2Contact *) ((arg1)->m_contactList);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactCount_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_contactCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactCount_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactManager_contactCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_contactCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactCount_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactCount_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (int32) ((arg1)->m_contactCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactFilter_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2ContactFilter *arg2 = (b2ContactFilter *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_contactFilter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactFilter_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactFilter, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_contactFilter_set" "', argument " "2"" of type '" "b2ContactFilter *""'");  }
   arg2 = reinterpret_cast< b2ContactFilter * >(argp2); if (arg1) (arg1)->m_contactFilter = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactFilter_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  Swig::Director *director = 0; b2ContactFilter *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactFilter_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2ContactFilter *) ((arg1)->m_contactFilter);
  director = SWIG_DIRECTOR_CAST(result); if (director) { resultobj = director->swig_get_self(); Py_INCREF(resultobj); }  else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactFilter, 0 |  0 ); }  return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactListener_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2ContactListener *arg2 = (b2ContactListener *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_contactListener_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactListener_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactListener, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_contactListener_set" "', argument " "2"" of type '" "b2ContactListener *""'");  }
   arg2 = reinterpret_cast< b2ContactListener * >(argp2); if (arg1) (arg1)->m_contactListener = arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_contactListener_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  Swig::Director *director = 0; b2ContactListener *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_contactListener_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2ContactListener *) ((arg1)->m_contactListener);
  director = SWIG_DIRECTOR_CAST(result); if (director) { resultobj = director->swig_get_self(); Py_INCREF(resultobj); }  else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactListener, 0 |  0 ); }  return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_allocator_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactManager_allocator_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_allocator_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BlockAllocator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_allocator_set" "', argument " "2"" of type '" "b2BlockAllocator *""'");  }
   arg2 = reinterpret_cast< b2BlockAllocator * >(argp2); if (arg1) (arg1)->m_allocator = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_allocator_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2BlockAllocator *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_allocator_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2BlockAllocator *) ((arg1)->m_allocator);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BlockAllocator, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager___hash__" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); { try { result = (long)b2ContactManager___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactManager(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactManager" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactManager_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2World(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; PyObject * obj0 = 0 ; char * kwnames[] = { (char *)"gravity",  NULL } ;
  b2World *result = 0 ; if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_b2World", kwnames, &obj0)) SWIG_fail; { 
    if (PySequence_Check(obj0)) { if (PySequence_Size(obj0) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj0));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj0, 0, &temp1.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj0, 1, &temp1.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj0 == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj0, (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2World" "', argument " "gravity"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { try { result = (b2World *)new b2World((b2Vec2 const &)*arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2World(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2World" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetDestructionListener_internal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2DestructionListener *arg2 = (b2DestructionListener *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  char * kwnames[] = { (char *)"self",  (char *)"listener",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetDestructionListener_internal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetDestructionListener_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2DestructionListener, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___SetDestructionListener_internal" "', argument " "2"" of type '" "b2DestructionListener *""'");  }
   arg2 = reinterpret_cast< b2DestructionListener * >(argp2); { try { (arg1)->SetDestructionListener(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetContactFilter_internal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2ContactFilter *arg2 = (b2ContactFilter *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"filter",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetContactFilter_internal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetContactFilter_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2ContactFilter, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___SetContactFilter_internal" "', argument " "2"" of type '" "b2ContactFilter *""'");  }
   arg2 = reinterpret_cast< b2ContactFilter * >(argp2); { try { (arg1)->SetContactFilter(arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetContactListener_internal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2ContactListener *arg2 = (b2ContactListener *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"listener",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetContactListener_internal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetContactListener_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2ContactListener, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___SetContactListener_internal" "', argument " "2"" of type '" "b2ContactListener *""'");  }
   arg2 = reinterpret_cast< b2ContactListener * >(argp2); { try { (arg1)->SetContactListener(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetDebugDraw_internal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2Draw *arg2 = (b2Draw *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"debugDraw",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetDebugDraw_internal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetDebugDraw_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___SetDebugDraw_internal" "', argument " "2"" of type '" "b2Draw *""'");  }
   arg2 = reinterpret_cast< b2Draw * >(argp2); { try { (arg1)->SetDebugDraw(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Step(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; float32 arg2 ; int32 arg3 ; int32 arg4 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"timeStep",  (char *)"velocityIterations",  (char *)"positionIterations",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2World_Step", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Step" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World_Step" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2World_Step" "', argument " "3"" of type '" "int32""'"); }  
  arg3 = static_cast< int32 >(val3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2World_Step" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); { try { (arg1)->Step(arg2,arg3,arg4); }  catch (Swig::DirectorException) { SWIG_fail; } 
    catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_ClearForces(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_ClearForces" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { (arg1)->ClearForces(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DrawDebugData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DrawDebugData" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { (arg1)->DrawDebugData(); }  catch (Swig::DirectorException) {
      SWIG_fail; }  catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_QueryAABB(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2QueryCallback *arg2 = (b2QueryCallback *) 0 ; b2AABB *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"callback",  (char *)"aabb",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2World_QueryAABB", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_QueryAABB" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_QueryAABB" "', argument " "2"" of type '" "b2QueryCallback *""'");  }
   arg2 = reinterpret_cast< b2QueryCallback * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2World_QueryAABB" "', argument " "3"" of type '" "b2AABB const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_QueryAABB" "', argument " "3"" of type '" "b2AABB const &""'"); }
   arg3 = reinterpret_cast< b2AABB * >(argp3); { try { ((b2World const *)arg1)->QueryAABB(arg2,(b2AABB const &)*arg3); } 
    catch (Swig::DirectorException) { SWIG_fail; }  catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_RayCast(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2RayCastCallback *arg2 = (b2RayCastCallback *) 0 ; b2Vec2 *arg3 = 0 ; b2Vec2 *arg4 = 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; b2Vec2 temp4 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"callback",  (char *)"point1",  (char *)"point2",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2World_RayCast", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RayCast" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2RayCastCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_RayCast" "', argument " "2"" of type '" "b2RayCastCallback *""'");  }
   arg2 = reinterpret_cast< b2RayCastCallback * >(argp2); {  if (PySequence_Check(obj2)) { if (PySequence_Size(obj2) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj2));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj2, 0, &temp3.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj2, 1, &temp3.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj2 == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj2, (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RayCast" "', argument " "point1"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RayCast" "', argument " "point2"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  { try {
      ((b2World const *)arg1)->RayCast(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4); }  catch (Swig::DirectorException) {
      SWIG_fail; }  catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetBodyList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetBodyList_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Body *)(arg1)->GetBodyList(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetBodyList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Body *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetBodyList_internal" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Body *)((b2World const *)arg1)->GetBodyList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetBodyList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2World___GetBodyList_internal", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2World___GetBodyList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2World___GetBodyList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2World___GetBodyList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::GetBodyList()\n" "    b2World::GetBodyList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2World___GetJointList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Joint *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetJointList_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Joint *)(arg1)->GetJointList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetJointList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Joint *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetJointList_internal" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Joint *)((b2World const *)arg1)->GetJointList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetJointList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2World___GetJointList_internal", 0, 1, argv))) SWIG_fail; --argc;
  if (argc == 1) { PyObject *retobj = _wrap_b2World___GetJointList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2World___GetJointList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2World___GetJointList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::GetJointList()\n" "    b2World::GetJointList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2World___GetContactList_internal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Contact *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetContactList_internal" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Contact *)(arg1)->GetContactList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetContactList_internal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Contact *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetContactList_internal" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Contact *)((b2World const *)arg1)->GetContactList(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetContactList_internal(PyObject *self, PyObject *args) { Py_ssize_t argc;
  PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2World___GetContactList_internal", 0, 1, argv))) SWIG_fail; --argc;
  if (argc == 1) { PyObject *retobj = _wrap_b2World___GetContactList_internal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2World___GetContactList_internal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2World___GetContactList_internal'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::GetContactList()\n" "    b2World::GetContactList() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2World_SetAllowSleeping(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World_SetAllowSleeping", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetAllowSleeping" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World_SetAllowSleeping" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetAllowSleeping(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetAllowSleeping(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetAllowSleeping" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->GetAllowSleeping(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetWarmStarting(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetWarmStarting", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetWarmStarting" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World___SetWarmStarting" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetWarmStarting(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetWarmStarting(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetWarmStarting" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->GetWarmStarting(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetContinuousPhysics(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetContinuousPhysics", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetContinuousPhysics" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World___SetContinuousPhysics" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetContinuousPhysics(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetContinuousPhysics(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetContinuousPhysics" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->GetContinuousPhysics(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetSubStepping(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetSubStepping", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetSubStepping" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World___SetSubStepping" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetSubStepping(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetSubStepping(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetSubStepping" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->GetSubStepping(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetProxyCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetProxyCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetProxyCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetBodyCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetBodyCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetBodyCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetJointCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetJointCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetJointCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetContactCount(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetContactCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetContactCount(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetTreeHeight(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetTreeHeight" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetTreeHeight(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetTreeBalance(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetTreeBalance" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (int32)((b2World const *)arg1)->GetTreeBalance(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetTreeQuality(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetTreeQuality" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (float32)((b2World const *)arg1)->GetTreeQuality(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetGravity(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"gravity",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetGravity", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetGravity" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetGravity" "', argument " "gravity"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetGravity((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetGravity(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetGravity" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = ((b2World const *)arg1)->GetGravity(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World___IsLocked(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___IsLocked" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->IsLocked(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___SetAutoClearForces(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___SetAutoClearForces", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___SetAutoClearForces" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World___SetAutoClearForces" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetAutoClearForces(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetAutoClearForces(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetAutoClearForces" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (bool)((b2World const *)arg1)->GetAutoClearForces(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_ShiftOrigin(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"newOrigin",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World_ShiftOrigin", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_ShiftOrigin" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_ShiftOrigin" "', argument " "newOrigin"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->ShiftOrigin((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___GetContactManager(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ContactManager *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___GetContactManager" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try {
      result = (b2ContactManager *) &((b2World const *)arg1)->GetContactManager(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactManager, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetProfile(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Profile *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetProfile" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (b2Profile *) &((b2World const *)arg1)->GetProfile(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Profile, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Dump(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Dump" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); { try { (arg1)->Dump(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___hash__" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); { try { result = (long)b2World___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___CreateBody(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2BodyDef *arg2 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"defn",  NULL } ;
  b2Body *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___CreateBody", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___CreateBody" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___CreateBody" "', argument " "2"" of type '" "b2BodyDef *""'");  }
   arg2 = reinterpret_cast< b2BodyDef * >(argp2); { try { result = (b2Body *)b2World___CreateBody(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World___CreateJoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2JointDef *arg2 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"defn",  NULL } ;
  b2Joint *result = 0 ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World___CreateJoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World___CreateJoint" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World___CreateJoint" "', argument " "2"" of type '" "b2JointDef *""'");  }
   arg2 = reinterpret_cast< b2JointDef * >(argp2); { try { result = (b2Joint *)b2World___CreateJoint(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DestroyBody(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"body",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World_DestroyBody", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DestroyBody" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_DestroyBody" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); { try { b2World_DestroyBody(arg1,arg2); }  catch (Swig::DirectorException) {
      SWIG_fail; }  catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DestroyJoint(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"joint",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2World_DestroyJoint", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DestroyJoint" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_DestroyJoint" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); { try { b2World_DestroyJoint(arg1,arg2); }  catch (Swig::DirectorException) {
      SWIG_fail; }  catch (b2AssertException) { SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2World_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2World, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2World_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2MixFriction(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"friction1",  (char *)"friction2",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MixFriction", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2MixFriction" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MixFriction" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); { try { result = (float32)b2MixFriction(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MixRestitution(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"restitution1",  (char *)"restitution2",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MixRestitution", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2MixRestitution" "', argument " "1"" of type '" "float32""'"); }
    arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MixRestitution" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (float32)b2MixRestitution(arg1,arg2); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_other_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactEdge_other_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_other_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_other_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->other = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_other_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_other_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2Body *) ((arg1)->other);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_contact_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactEdge_contact_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_contact_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_contact_set" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); if (arg1) (arg1)->contact = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_contact_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Contact *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_contact_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2Contact *) ((arg1)->contact);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_prev_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactEdge_prev_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_prev_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_prev_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->prev = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_prev_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_prev_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2ContactEdge *) ((arg1)->prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_next_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2ContactEdge_next_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_next_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_next_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->next = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_next_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_next_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2ContactEdge *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge___hash__" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); { try { result = (long)b2ContactEdge___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactEdge(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2ContactEdge", 0, 0, 0)) SWIG_fail; { try {
      result = (b2ContactEdge *)new b2ContactEdge(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactEdge(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactEdge" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactEdge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Contact___GetManifold__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Manifold *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetManifold" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Manifold *)(arg1)->GetManifold(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Manifold, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetManifold__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Manifold *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetManifold" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Manifold *)((b2Contact const *)arg1)->GetManifold(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Manifold, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetManifold(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Contact___GetManifold", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetManifold__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetManifold__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Contact___GetManifold'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Contact::GetManifold()\n" "    b2Contact::GetManifold() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Contact___GetWorldManifold_internal(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; b2WorldManifold *arg2 = (b2WorldManifold *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"worldManifold",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Contact___GetWorldManifold_internal", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetWorldManifold_internal" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2WorldManifold, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact___GetWorldManifold_internal" "', argument " "2"" of type '" "b2WorldManifold *""'");  }
   arg2 = reinterpret_cast< b2WorldManifold * >(argp2); { try { ((b2Contact const *)arg1)->GetWorldManifold(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___IsTouching(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___IsTouching" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (bool)((b2Contact const *)arg1)->IsTouching(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___SetEnabled(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Contact___SetEnabled", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___SetEnabled" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact___SetEnabled" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->SetEnabled(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___IsEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___IsEnabled" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (bool)((b2Contact const *)arg1)->IsEnabled(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetNext__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Contact *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetNext" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Contact *)(arg1)->GetNext(); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetNext__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Contact *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetNext" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Contact *)((b2Contact const *)arg1)->GetNext(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetNext(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Contact___GetNext", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetNext__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetNext__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Contact___GetNext'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Contact::GetNext()\n" "    b2Contact::GetNext() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureA__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetFixtureA" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Fixture *)(arg1)->GetFixtureA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureA__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetFixtureA" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Fixture *)((b2Contact const *)arg1)->GetFixtureA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureA(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Contact___GetFixtureA", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetFixtureA__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetFixtureA__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Contact___GetFixtureA'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Contact::GetFixtureA()\n" "    b2Contact::GetFixtureA() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Contact___GetChildIndexA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetChildIndexA" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (int32)((b2Contact const *)arg1)->GetChildIndexA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureB__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetFixtureB" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Fixture *)(arg1)->GetFixtureB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureB__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Fixture *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetFixtureB" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (b2Fixture *)((b2Contact const *)arg1)->GetFixtureB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFixtureB(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Contact___GetFixtureB", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetFixtureB__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Contact___GetFixtureB__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Contact___GetFixtureB'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Contact::GetFixtureB()\n" "    b2Contact::GetFixtureB() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Contact___GetChildIndexB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetChildIndexB" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (int32)((b2Contact const *)arg1)->GetChildIndexB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___SetFriction(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"friction",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Contact___SetFriction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___SetFriction" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact___SetFriction" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetFriction(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetFriction(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetFriction" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (float32)((b2Contact const *)arg1)->GetFriction(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_ResetFriction(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_ResetFriction" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { (arg1)->ResetFriction(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___SetRestitution(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"restitution",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Contact___SetRestitution", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___SetRestitution" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact___SetRestitution" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetRestitution(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetRestitution(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetRestitution" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (float32)((b2Contact const *)arg1)->GetRestitution(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_ResetRestitution(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_ResetRestitution" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { (arg1)->ResetRestitution(); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___SetTangentSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"speed",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Contact___SetTangentSpeed", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___SetTangentSpeed" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact___SetTangentSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetTangentSpeed(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___GetTangentSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___GetTangentSpeed" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (float32)((b2Contact const *)arg1)->GetTangentSpeed(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_Evaluate(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2Manifold *arg2 = (b2Manifold *) 0 ; b2Transform *arg3 = 0 ; b2Transform *arg4 = 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ;
  int res4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"manifold",  (char *)"xfA",  (char *)"xfB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2Contact_Evaluate", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_Evaluate" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_Evaluate" "', argument " "2"" of type '" "b2Manifold *""'");  }
   arg2 = reinterpret_cast< b2Manifold * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Contact_Evaluate" "', argument " "3"" of type '" "b2Transform const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Contact_Evaluate" "', argument " "3"" of type '" "b2Transform const &""'"); }
   arg3 = reinterpret_cast< b2Transform * >(argp3); res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_b2Transform,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Contact_Evaluate" "', argument " "4"" of type '" "b2Transform const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Contact_Evaluate" "', argument " "4"" of type '" "b2Transform const &""'"); }
   arg4 = reinterpret_cast< b2Transform * >(argp4); { try {
      (arg1)->Evaluate(arg2,(b2Transform const &)*arg3,(b2Transform const &)*arg4); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact___hash__" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); { try { result = (long)b2Contact___hash__(arg1); }  catch(b2AssertException) {
       SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Contact_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Contact, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2Jacobian_linear_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Jacobian_linear_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear_set" "', argument " "linear"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->linear = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_linear_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (b2Vec2 *)& ((arg1)->linear);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angularA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Jacobian_angularA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angularA_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Jacobian_angularA_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularA = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angularA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angularA_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (float32) ((arg1)->angularA);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angularB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2Jacobian_angularB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angularB_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Jacobian_angularB_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularB = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angularB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angularB_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (float32) ((arg1)->angularB);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian___hash__" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); { try { result = (long)b2Jacobian___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Jacobian(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2Jacobian *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2Jacobian", 0, 0, 0)) SWIG_fail; { try { result = (b2Jacobian *)new b2Jacobian(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Jacobian, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Jacobian(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Jacobian" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Jacobian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Jacobian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Jacobian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2JointEdge_other_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointEdge_other_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_other_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_other_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->other = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_other_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_other_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2Body *) ((arg1)->other);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_joint_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointEdge_joint_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_joint_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_joint_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_joint_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_joint_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2Joint *) ((arg1)->joint); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_prev_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2JointEdge *arg2 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2JointEdge_prev_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_prev_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_prev_set" "', argument " "2"" of type '" "b2JointEdge *""'");  }
   arg2 = reinterpret_cast< b2JointEdge * >(argp2); if (arg1) (arg1)->prev = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_prev_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_prev_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2JointEdge *) ((arg1)->prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_next_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2JointEdge *arg2 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2JointEdge_next_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_next_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_next_set" "', argument " "2"" of type '" "b2JointEdge *""'");  }
   arg2 = reinterpret_cast< b2JointEdge * >(argp2); if (arg1) (arg1)->next = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_next_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_next_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2JointEdge *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge___hash__" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); { try { result = (long)b2JointEdge___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2JointEdge(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2JointEdge *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2JointEdge", 0, 0, 0)) SWIG_fail; { try { result = (b2JointEdge *)new b2JointEdge(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2JointEdge(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2JointEdge" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2JointEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2JointEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2JointEdge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2JointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0; b2JointDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args, "new_b2JointDef", 0, 0, 0)) SWIG_fail; { try { result = (b2JointDef *)new b2JointDef(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_type_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2JointType arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointDef_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_type_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2JointDef_type_set" "', argument " "2"" of type '" "b2JointType""'"); }
    arg2 = static_cast< b2JointType >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_type_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_type_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2JointType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_bodyA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointDef_bodyA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_bodyA_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointDef_bodyA_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->bodyA = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_bodyA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_bodyA_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2Body *) ((arg1)->bodyA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_bodyB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointDef_bodyB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_bodyB_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointDef_bodyB_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->bodyB = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_bodyB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_bodyB_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2Body *) ((arg1)->bodyB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_collideConnected_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2JointDef_collideConnected_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_collideConnected_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2JointDef_collideConnected_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->collideConnected = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_collideConnected_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_collideConnected_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (bool) ((arg1)->collideConnected);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef___hash__" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); { try { result = (long)b2JointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef___GetUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); { try { result = (PyObject *)b2JointDef___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2JointDef___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef___SetUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); arg2 = obj1; { try { b2JointDef___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_ClearUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); { try { b2JointDef_ClearUserData(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2JointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2JointDef" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2JointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2JointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2JointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Joint___GetType(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetType" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (b2JointType)((b2Joint const *)arg1)->GetType(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetBodyA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetBodyA" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (b2Body *)(arg1)->GetBodyA(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetBodyB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetBodyB" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (b2Body *)(arg1)->GetBodyB(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetAnchorA" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = ((b2Joint const *)arg1)->GetAnchorA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; SwigValueWrapper< b2Vec2 > result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetAnchorB" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = ((b2Joint const *)arg1)->GetAnchorB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetReactionForce(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"inv_dt",  NULL } ;
  SwigValueWrapper< b2Vec2 > result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Joint_GetReactionForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetReactionForce" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Joint_GetReactionForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = ((b2Joint const *)arg1)->GetReactionForce(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetReactionTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2Joint *arg1 = (b2Joint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"inv_dt",  NULL } ;
  float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Joint_GetReactionTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetReactionTorque" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Joint_GetReactionTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (float32)((b2Joint const *)arg1)->GetReactionTorque(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetNext__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Joint *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetNext" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (b2Joint *)(arg1)->GetNext(); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) { switch ((result)->GetType()) {
        case e_revoluteJoint: resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetNext__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Joint *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetNext" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (b2Joint *)((b2Joint const *)arg1)->GetNext(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetNext(PyObject *self, PyObject *args) { Py_ssize_t argc; PyObject *argv[2] = { 0} ;
  if (!(argc = SWIG_Python_UnpackTuple(args, "b2Joint___GetNext", 0, 1, argv))) SWIG_fail; --argc; if (argc == 1) {
    PyObject *retobj = _wrap_b2Joint___GetNext__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  if (argc == 1) {
    PyObject *retobj = _wrap_b2Joint___GetNext__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj; SWIG_fail;}  fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'b2Joint___GetNext'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Joint::GetNext()\n" "    b2Joint::GetNext() const\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Joint___IsActive(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___IsActive" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (bool)((b2Joint const *)arg1)->IsActive(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetCollideConnected(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetCollideConnected" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (bool)((b2Joint const *)arg1)->GetCollideConnected(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_Dump(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_Dump" "', argument " "1"" of type '" "b2Joint *""'");  } 
  arg1 = reinterpret_cast< b2Joint * >(argp1); { try { (arg1)->Dump(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_ShiftOrigin(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"newOrigin",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Joint_ShiftOrigin", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_ShiftOrigin" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_ShiftOrigin" "', argument " "newOrigin"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->ShiftOrigin((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___hash__" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (long)b2Joint___hash__(arg1); }  catch(b2AssertException) { 
      SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___GetUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___GetUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { result = (PyObject *)b2Joint___GetUserData(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = result; return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___SetUserData(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"data",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2Joint___SetUserData", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___SetUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); arg2 = obj1; { try { b2Joint___SetUserData(arg1,arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_ClearUserData(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_ClearUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); { try { b2Joint_ClearUserData(arg1); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Joint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Joint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2DistanceJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2DistanceJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2DistanceJointDef *)new b2DistanceJointDef(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchorA",  (char *)"anchorB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2DistanceJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2DistanceJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "anchorA"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj4 == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "anchorB"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  { try {
      (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_length_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceJointDef_length_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_length_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_length_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->length = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_length_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_length_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->length);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_frequencyHz_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceJointDef_frequencyHz_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_frequencyHz_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_dampingRatio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2DistanceJointDef_dampingRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_dampingRatio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef___hash__" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); { try { result = (long)b2DistanceJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceJointDef" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DistanceJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2DistanceJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2DistanceJoint const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2DistanceJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2DistanceJoint const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2DistanceJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___SetLength(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"length",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceJoint___SetLength", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___SetLength" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint___SetLength" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetLength(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___GetLength(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___GetLength" "', argument " "1"" of type '" "b2DistanceJoint const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try { result = (float32)((b2DistanceJoint const *)arg1)->GetLength(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___SetFrequency(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"hz",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceJoint___SetFrequency", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___SetFrequency" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint___SetFrequency" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetFrequency(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___GetFrequency(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___GetFrequency" "', argument " "1"" of type '" "b2DistanceJoint const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try {
      result = (float32)((b2DistanceJoint const *)arg1)->GetFrequency(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___SetDampingRatio(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"ratio",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2DistanceJoint___SetDampingRatio", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___SetDampingRatio" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint___SetDampingRatio" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetDampingRatio(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___GetDampingRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___GetDampingRatio" "', argument " "1"" of type '" "b2DistanceJoint const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try {
      result = (float32)((b2DistanceJoint const *)arg1)->GetDampingRatio(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint___hash__" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try { result = (long)b2DistanceJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceJoint" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DistanceJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2FrictionJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2FrictionJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2FrictionJointDef *)new b2FrictionJointDef(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FrictionJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchor",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2FrictionJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_Initialize" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2FrictionJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2FrictionJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  { try { (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FrictionJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FrictionJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_maxForce_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FrictionJointDef_maxForce_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_maxForce_set" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FrictionJointDef_maxForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxForce = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_maxForce_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_maxForce_get" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); result = (float32) ((arg1)->maxForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_maxTorque_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2FrictionJointDef_maxTorque_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_maxTorque_set" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FrictionJointDef_maxTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxTorque = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef_maxTorque_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef_maxTorque_get" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); result = (float32) ((arg1)->maxTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJointDef___hash__" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); { try { result = (long)b2FrictionJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2FrictionJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJointDef *arg1 = (b2FrictionJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2FrictionJointDef" "', argument " "1"" of type '" "b2FrictionJointDef *""'");  }
   arg1 = reinterpret_cast< b2FrictionJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2FrictionJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2FrictionJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2FrictionJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2FrictionJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2FrictionJoint const *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2FrictionJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2FrictionJoint const *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2FrictionJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint___SetMaxForce(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"force",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2FrictionJoint___SetMaxForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint___SetMaxForce" "', argument " "1"" of type '" "b2FrictionJoint *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FrictionJoint___SetMaxForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxForce(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint___GetMaxForce(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint___GetMaxForce" "', argument " "1"" of type '" "b2FrictionJoint const *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try {
      result = (float32)((b2FrictionJoint const *)arg1)->GetMaxForce(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint___SetMaxTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"torque",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2FrictionJoint___SetMaxTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint___SetMaxTorque" "', argument " "1"" of type '" "b2FrictionJoint *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FrictionJoint___SetMaxTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxTorque(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint___GetMaxTorque(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint___GetMaxTorque" "', argument " "1"" of type '" "b2FrictionJoint const *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try {
      result = (float32)((b2FrictionJoint const *)arg1)->GetMaxTorque(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FrictionJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FrictionJoint___hash__" "', argument " "1"" of type '" "b2FrictionJoint *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try { result = (long)b2FrictionJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2FrictionJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2FrictionJoint *arg1 = (b2FrictionJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FrictionJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2FrictionJoint" "', argument " "1"" of type '" "b2FrictionJoint *""'");  }
   arg1 = reinterpret_cast< b2FrictionJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2FrictionJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2FrictionJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2GearJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2GearJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2GearJointDef *)new b2GearJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GearJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint1_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2GearJointDef_joint1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint1_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJointDef_joint1_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint1_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint1_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (b2Joint *) ((arg1)->joint1); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint2_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2GearJointDef_joint2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint2_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJointDef_joint2_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint2_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint2_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (b2Joint *) ((arg1)->joint2); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_ratio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2GearJointDef_ratio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_ratio_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJointDef_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_ratio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_ratio_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (float32) ((arg1)->ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef___hash__" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); { try { result = (long)b2GearJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GearJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GearJointDef" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2GearJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GearJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2GearJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2GearJoint_GetJoint1(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_GetJoint1" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); { try { result = (b2Joint *)(arg1)->GetJoint1(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_GetJoint2(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_GetJoint2" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); { try { result = (b2Joint *)(arg1)->GetJoint2(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_wheelJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WheelJoint, 0); break; case e_weldJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2WeldJoint, 0); break; case e_frictionJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2FrictionJoint, 0); break; case e_ropeJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RopeJoint, 0); break; case e_motorJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MotorJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint___SetRatio(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"ratio",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2GearJoint___SetRatio", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint___SetRatio" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint___SetRatio" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetRatio(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint___GetRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint___GetRatio" "', argument " "1"" of type '" "b2GearJoint const *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); { try { result = (float32)((b2GearJoint const *)arg1)->GetRatio(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint___hash__" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); { try { result = (long)b2GearJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GearJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GearJoint" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2GearJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GearJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2MotorJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2MotorJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2MotorJointDef *)new b2MotorJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MotorJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2MotorJointDef_Initialize", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_Initialize" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MotorJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2MotorJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); { try { (arg1)->Initialize(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_linearOffset_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MotorJointDef_linearOffset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_linearOffset_set" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_linearOffset_set" "', argument " "linearOffset"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->linearOffset = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_linearOffset_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_linearOffset_get" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->linearOffset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_angularOffset_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MotorJointDef_angularOffset_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_angularOffset_set" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJointDef_angularOffset_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularOffset = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_angularOffset_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_angularOffset_get" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); result = (float32) ((arg1)->angularOffset);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_maxForce_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MotorJointDef_maxForce_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_maxForce_set" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJointDef_maxForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxForce = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_maxForce_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_maxForce_get" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); result = (float32) ((arg1)->maxForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_maxTorque_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MotorJointDef_maxTorque_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_maxTorque_set" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJointDef_maxTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxTorque = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_maxTorque_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_maxTorque_get" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); result = (float32) ((arg1)->maxTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_correctionFactor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MotorJointDef_correctionFactor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_correctionFactor_set" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJointDef_correctionFactor_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->correctionFactor = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJointDef_correctionFactor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJointDef_correctionFactor_get" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); result = (float32) ((arg1)->correctionFactor);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MotorJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MotorJointDef" "', argument " "1"" of type '" "b2MotorJointDef *""'");  }
   arg1 = reinterpret_cast< b2MotorJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2MotorJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MotorJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MotorJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2MotorJoint___SetLinearOffset(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"linearOffset",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MotorJoint___SetLinearOffset", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___SetLinearOffset" "', argument " "1"" of type '" "b2MotorJoint *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___SetLinearOffset" "', argument " "linearOffset"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetLinearOffset((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___GetLinearOffset(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___GetLinearOffset" "', argument " "1"" of type '" "b2MotorJoint const *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2MotorJoint const *)arg1)->GetLinearOffset(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___SetAngularOffset(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"angularOffset",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MotorJoint___SetAngularOffset", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___SetAngularOffset" "', argument " "1"" of type '" "b2MotorJoint *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJoint___SetAngularOffset" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetAngularOffset(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___GetAngularOffset(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___GetAngularOffset" "', argument " "1"" of type '" "b2MotorJoint const *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); { try {
      result = (float32)((b2MotorJoint const *)arg1)->GetAngularOffset(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___SetMaxForce(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"force",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MotorJoint___SetMaxForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___SetMaxForce" "', argument " "1"" of type '" "b2MotorJoint *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJoint___SetMaxForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxForce(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___GetMaxForce(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___GetMaxForce" "', argument " "1"" of type '" "b2MotorJoint const *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); { try { result = (float32)((b2MotorJoint const *)arg1)->GetMaxForce(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___SetMaxTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"torque",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MotorJoint___SetMaxTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___SetMaxTorque" "', argument " "1"" of type '" "b2MotorJoint *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MotorJoint___SetMaxTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxTorque(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MotorJoint___GetMaxTorque(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MotorJoint___GetMaxTorque" "', argument " "1"" of type '" "b2MotorJoint const *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); { try { result = (float32)((b2MotorJoint const *)arg1)->GetMaxTorque(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MotorJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MotorJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MotorJoint" "', argument " "1"" of type '" "b2MotorJoint *""'");  }
   arg1 = reinterpret_cast< b2MotorJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2MotorJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MotorJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2MouseJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2MouseJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2MouseJointDef *)new b2MouseJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MouseJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_target_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MouseJointDef_target_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_set" "', argument " "target"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->target = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_target_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->target);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_maxForce_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MouseJointDef_maxForce_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_maxForce_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_maxForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxForce = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_maxForce_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_maxForce_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->maxForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_frequencyHz_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MouseJointDef_frequencyHz_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_frequencyHz_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_dampingRatio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2MouseJointDef_dampingRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_dampingRatio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef___hash__" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); { try { result = (long)b2MouseJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MouseJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MouseJointDef" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2MouseJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MouseJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MouseJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2MouseJoint___SetTarget(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"target",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MouseJoint___SetTarget", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___SetTarget" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PySequence_Check(obj1)) { if (PySequence_Size(obj1) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj1));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj1, 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj1, 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj1 == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj1, (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___SetTarget" "', argument " "target"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  { try { (arg1)->SetTarget((b2Vec2 const &)*arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___GetTarget(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___GetTarget" "', argument " "1"" of type '" "b2MouseJoint const *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { result = (b2Vec2 *) &((b2MouseJoint const *)arg1)->GetTarget(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___SetMaxForce(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"force",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MouseJoint___SetMaxForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___SetMaxForce" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint___SetMaxForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxForce(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___GetMaxForce(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___GetMaxForce" "', argument " "1"" of type '" "b2MouseJoint const *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { result = (float32)((b2MouseJoint const *)arg1)->GetMaxForce(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___SetFrequency(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"hz",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MouseJoint___SetFrequency", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___SetFrequency" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint___SetFrequency" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetFrequency(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___GetFrequency(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___GetFrequency" "', argument " "1"" of type '" "b2MouseJoint const *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { result = (float32)((b2MouseJoint const *)arg1)->GetFrequency(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___SetDampingRatio(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"ratio",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2MouseJoint___SetDampingRatio", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___SetDampingRatio" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint___SetDampingRatio" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetDampingRatio(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___GetDampingRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___GetDampingRatio" "', argument " "1"" of type '" "b2MouseJoint const *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { result = (float32)((b2MouseJoint const *)arg1)->GetDampingRatio(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint___hash__" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { result = (long)b2MouseJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MouseJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MouseJoint" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2MouseJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MouseJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2PrismaticJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2PrismaticJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2PrismaticJointDef *)new b2PrismaticJointDef(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchor",  (char *)"axis",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2PrismaticJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj4 == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  { try {
      (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAxisA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_localAxisA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxisA_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxisA_set" "', argument " "localAxisA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAxisA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAxisA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxisA_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAxisA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_referenceAngle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_referenceAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_referenceAngle_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->referenceAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_referenceAngle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_referenceAngle_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableLimit_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_enableLimit_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableLimit_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableLimit_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableLimit_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (bool) ((arg1)->enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_lowerTranslation_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_lowerTranslation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_lowerTranslation_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_lowerTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lowerTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_lowerTranslation_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_lowerTranslation_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->lowerTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_upperTranslation_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_upperTranslation_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_upperTranslation_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_upperTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->upperTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_upperTranslation_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_upperTranslation_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->upperTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableMotor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_enableMotor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableMotor_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableMotor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableMotor_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_maxMotorForce_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_maxMotorForce_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_maxMotorForce_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_maxMotorForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_maxMotorForce_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_maxMotorForce_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->maxMotorForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_motorSpeed_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PrismaticJointDef_motorSpeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_motorSpeed_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef___hash__" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); { try { result = (long)b2PrismaticJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PrismaticJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PrismaticJointDef" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PrismaticJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PrismaticJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PrismaticJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetLocalAxisA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetLocalAxisA" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2PrismaticJoint const *)arg1)->GetLocalAxisA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetReferenceAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetReferenceAngle" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetReferenceAngle(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetJointTranslation(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetJointTranslation" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetJointTranslation(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetJointSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetJointSpeed" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetJointSpeed(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___IsLimitEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___IsLimitEnabled" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (bool)((b2PrismaticJoint const *)arg1)->IsLimitEnabled(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___EnableLimit(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PrismaticJoint___EnableLimit", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___EnableLimit" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint___EnableLimit" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->EnableLimit(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetLowerLimit(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetLowerLimit" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetLowerLimit(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetUpperLimit(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetUpperLimit" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetUpperLimit(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SetLimits(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"lower",  (char *)"upper",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2PrismaticJoint_SetLimits", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { (arg1)->SetLimits(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___IsMotorEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___IsMotorEnabled" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (bool)((b2PrismaticJoint const *)arg1)->IsMotorEnabled(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___EnableMotor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PrismaticJoint___EnableMotor", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___EnableMotor" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint___EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->EnableMotor(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___SetMotorSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"speed",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PrismaticJoint___SetMotorSpeed", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___SetMotorSpeed" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint___SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMotorSpeed(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetMotorSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetMotorSpeed" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorSpeed(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___SetMaxMotorForce(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"force",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PrismaticJoint___SetMaxMotorForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___SetMaxMotorForce" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint___SetMaxMotorForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxMotorForce(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___GetMaxMotorForce(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___GetMaxMotorForce" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try {
      result = (float32)((b2PrismaticJoint const *)arg1)->GetMaxMotorForce(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetMotorForce(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"inv_dt",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2PrismaticJoint_GetMotorForce", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetMotorForce" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_GetMotorForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorForce(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint___hash__" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try { result = (long)b2PrismaticJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PrismaticJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PrismaticJoint" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PrismaticJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PrismaticJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_b2_minPulleyLength_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_minPulleyLength is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_minPulleyLength_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_minPulleyLength)); return pyobj; }
SWIGINTERN PyObject *_wrap_new_b2PulleyJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2PulleyJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2PulleyJointDef *)new b2PulleyJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {
       SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PulleyJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; b2Vec2 *arg6 = 0 ; b2Vec2 *arg7 = 0 ; float32 arg8 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ;
  b2Vec2 temp5 ; b2Vec2 temp6 ; b2Vec2 temp7 ; float val8 ; int ecode8 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; PyObject * obj5 = 0 ; PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"groundAnchorA",  (char *)"groundAnchorB",  (char *)"anchorA",  (char *)"anchorB",  (char *)"ratio",  NULL }
  ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOOOO:b2PulleyJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6, &obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PulleyJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2PulleyJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "groundAnchorA"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj4 == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "groundAnchorB"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  {  if (PySequence_Check(obj5)) { if (PySequence_Size(obj5) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj5));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj5, 0, &temp6.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj5, 1, &temp6.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj5 == Py_None) { temp6.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj5, (void**)&arg6, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "anchorA"" of type '" "b2Vec2 const &""'");  }
       temp6 =(b2Vec2&) *arg6; }  arg6 = &temp6; }  {  if (PySequence_Check(obj6)) { if (PySequence_Size(obj6) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj6));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj6, 0, &temp7.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj6, 1, &temp7.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj6 == Py_None) { temp7.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj6, (void**)&arg7, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "anchorB"" of type '" "b2Vec2 const &""'");  }
       temp7 =(b2Vec2&) *arg7; }  arg7 = &temp7; }  ecode8 = SWIG_AsVal_float(obj7, &val8); if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "b2PulleyJointDef_Initialize" "', argument " "8"" of type '" "float32""'"); }
    arg8 = static_cast< float32 >(val8); { try {
      (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5,(b2Vec2 const &)*arg6,(b2Vec2 const &)*arg7,arg8); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_groundAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorA_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorA_set" "', argument " "groundAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->groundAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorA_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->groundAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_groundAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorB_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorB_set" "', argument " "groundAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->groundAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchorB_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->groundAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_lengthA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_lengthA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_lengthA_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_lengthA_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lengthA = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_lengthA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_lengthA_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->lengthA);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_lengthB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_lengthB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_lengthB_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_lengthB_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lengthB = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_lengthB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_lengthB_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->lengthB);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_ratio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2PulleyJointDef_ratio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_ratio_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_ratio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_ratio_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef___hash__" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { try { result = (long)b2PulleyJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PulleyJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PulleyJointDef" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PulleyJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PulleyJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PulleyJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PulleyJoint___GetGroundAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___GetGroundAnchorA" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = ((b2PulleyJoint const *)arg1)->GetGroundAnchorA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint___GetGroundAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  SwigValueWrapper< b2Vec2 > result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___GetGroundAnchorB" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = ((b2PulleyJoint const *)arg1)->GetGroundAnchorB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj((new b2Vec2(result)), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint___GetLengthA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___GetLengthA" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = (float32)((b2PulleyJoint const *)arg1)->GetLengthA(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint___GetLengthB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___GetLengthB" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = (float32)((b2PulleyJoint const *)arg1)->GetLengthB(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint___GetRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___GetRatio" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = (float32)((b2PulleyJoint const *)arg1)->GetRatio(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetCurrentLengthA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetCurrentLengthA" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try {
      result = (float32)((b2PulleyJoint const *)arg1)->GetCurrentLengthA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetCurrentLengthB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetCurrentLengthB" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try {
      result = (float32)((b2PulleyJoint const *)arg1)->GetCurrentLengthB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint___hash__" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { result = (long)b2PulleyJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PulleyJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PulleyJoint" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PulleyJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PulleyJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2RevoluteJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2RevoluteJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2RevoluteJointDef *)new b2RevoluteJointDef(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchor",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2RevoluteJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  { try { (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_referenceAngle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_referenceAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_referenceAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->referenceAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_referenceAngle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_referenceAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableLimit_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_enableLimit_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableLimit_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableLimit_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableLimit_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (bool) ((arg1)->enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_lowerAngle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_lowerAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_lowerAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_lowerAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lowerAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_lowerAngle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_lowerAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->lowerAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_upperAngle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_upperAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_upperAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_upperAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->upperAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_upperAngle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_upperAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->upperAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableMotor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_enableMotor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableMotor_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableMotor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableMotor_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_motorSpeed_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_motorSpeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_motorSpeed_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_maxMotorTorque_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args, "b2RevoluteJointDef_maxMotorTorque_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_maxMotorTorque_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_maxMotorTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorTorque = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_maxMotorTorque_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_maxMotorTorque_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->maxMotorTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef___hash__" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); { try { result = (long)b2RevoluteJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RevoluteJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RevoluteJointDef" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RevoluteJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RevoluteJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RevoluteJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetReferenceAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetReferenceAngle" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetReferenceAngle(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___GetJointAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___GetJointAngle" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetJointAngle(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___GetJointSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___GetJointSpeed" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetJointSpeed(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___IsLimitEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___IsLimitEnabled" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (bool)((b2RevoluteJoint const *)arg1)->IsLimitEnabled(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___EnableLimit(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RevoluteJoint___EnableLimit", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___EnableLimit" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint___EnableLimit" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->EnableLimit(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___GetLowerLimit(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___GetLowerLimit" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetLowerLimit(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___GetUpperLimit(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___GetUpperLimit" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetUpperLimit(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SetLimits(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"lower",  (char *)"upper",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:b2RevoluteJoint_SetLimits", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); { try { (arg1)->SetLimits(arg2,arg3); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___IsMotorEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___IsMotorEnabled" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (bool)((b2RevoluteJoint const *)arg1)->IsMotorEnabled(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___EnableMotor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RevoluteJoint___EnableMotor", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___EnableMotor" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint___EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->EnableMotor(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___SetMotorSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"speed",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RevoluteJoint___SetMotorSpeed", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___SetMotorSpeed" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint___SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMotorSpeed(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___GetMotorSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___GetMotorSpeed" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorSpeed(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___SetMaxMotorTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"torque",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RevoluteJoint___SetMaxMotorTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___SetMaxMotorTorque" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint___SetMaxMotorTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxMotorTorque(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetMaxMotorTorque(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetMaxMotorTorque" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetMaxMotorTorque(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetMotorTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"inv_dt",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RevoluteJoint_GetMotorTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetMotorTorque" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_GetMotorTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorTorque(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint___hash__" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try { result = (long)b2RevoluteJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RevoluteJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RevoluteJoint" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RevoluteJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RevoluteJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2RopeJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2RopeJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2RopeJointDef *)new b2RopeJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RopeJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RopeJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RopeJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_maxLength_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2RopeJointDef_maxLength_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_maxLength_set" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RopeJointDef_maxLength_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxLength = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef_maxLength_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef_maxLength_get" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); result = (float32) ((arg1)->maxLength);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJointDef___hash__" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); { try { result = (long)b2RopeJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RopeJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJointDef *arg1 = (b2RopeJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RopeJointDef" "', argument " "1"" of type '" "b2RopeJointDef *""'");  }
   arg1 = reinterpret_cast< b2RopeJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RopeJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RopeJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RopeJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2RopeJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2RopeJoint const *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2RopeJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2RopeJoint const *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2RopeJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJoint_SetMaxLength(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"length",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2RopeJoint_SetMaxLength", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint_SetMaxLength" "', argument " "1"" of type '" "b2RopeJoint *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RopeJoint_SetMaxLength" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxLength(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJoint___GetMaxLength(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint___GetMaxLength" "', argument " "1"" of type '" "b2RopeJoint const *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try { result = (float32)((b2RopeJoint const *)arg1)->GetMaxLength(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJoint___GetLimitState(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2LimitState result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint___GetLimitState" "', argument " "1"" of type '" "b2RopeJoint const *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try {
      result = (b2LimitState)((b2RopeJoint const *)arg1)->GetLimitState(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RopeJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RopeJoint___hash__" "', argument " "1"" of type '" "b2RopeJoint *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try { result = (long)b2RopeJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RopeJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2RopeJoint *arg1 = (b2RopeJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RopeJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RopeJoint" "', argument " "1"" of type '" "b2RopeJoint *""'");  }
   arg1 = reinterpret_cast< b2RopeJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2RopeJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RopeJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2WeldJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2WeldJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2WeldJointDef *)new b2WeldJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2WeldJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchor",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:b2WeldJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_Initialize" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2WeldJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2WeldJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  { try { (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WeldJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WeldJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_referenceAngle_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WeldJointDef_referenceAngle_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_referenceAngle_set" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WeldJointDef_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->referenceAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_referenceAngle_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_referenceAngle_get" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); result = (float32) ((arg1)->referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_frequencyHz_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WeldJointDef_frequencyHz_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WeldJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_frequencyHz_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_dampingRatio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WeldJointDef_dampingRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WeldJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef_dampingRatio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJointDef___hash__" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); { try { result = (long)b2WeldJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2WeldJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJointDef *arg1 = (b2WeldJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2WeldJointDef" "', argument " "1"" of type '" "b2WeldJointDef *""'");  }
   arg1 = reinterpret_cast< b2WeldJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2WeldJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2WeldJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2WeldJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2WeldJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2WeldJoint const *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2WeldJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2WeldJoint const *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2WeldJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_GetReferenceAngle(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_GetReferenceAngle" "', argument " "1"" of type '" "b2WeldJoint const *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try { result = (float32)((b2WeldJoint const *)arg1)->GetReferenceAngle(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_SetFrequency(PyObject *self, PyObject *args, PyObject *kwargs) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"hz",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WeldJoint_SetFrequency", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_SetFrequency" "', argument " "1"" of type '" "b2WeldJoint *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WeldJoint_SetFrequency" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetFrequency(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_GetFrequency(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_GetFrequency" "', argument " "1"" of type '" "b2WeldJoint const *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try { result = (float32)((b2WeldJoint const *)arg1)->GetFrequency(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_SetDampingRatio(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"ratio",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WeldJoint_SetDampingRatio", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_SetDampingRatio" "', argument " "1"" of type '" "b2WeldJoint *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WeldJoint_SetDampingRatio" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetDampingRatio(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint_GetDampingRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint_GetDampingRatio" "', argument " "1"" of type '" "b2WeldJoint const *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try { result = (float32)((b2WeldJoint const *)arg1)->GetDampingRatio(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WeldJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WeldJoint___hash__" "', argument " "1"" of type '" "b2WeldJoint *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try { result = (long)b2WeldJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2WeldJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WeldJoint *arg1 = (b2WeldJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WeldJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2WeldJoint" "', argument " "1"" of type '" "b2WeldJoint *""'");  }
   arg1 = reinterpret_cast< b2WeldJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2WeldJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2WeldJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2WheelJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args, "new_b2WheelJointDef", 0, 0, 0)) SWIG_fail; { try {
      result = (b2WheelJointDef *)new b2WheelJointDef(); }  catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) { 
      SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2WheelJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_Initialize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"bodyA",  (char *)"bodyB",  (char *)"anchor",  (char *)"axis",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:b2WheelJointDef_Initialize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_Initialize" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2WheelJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2WheelJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PySequence_Check(obj3)) { if (PySequence_Size(obj3) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj3));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj3, 0, &temp4.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj3, 1, &temp4.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj3 == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj3, (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PySequence_Check(obj4)) { if (PySequence_Size(obj4) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(obj4));
        SWIG_fail; } 
      pybox2d_float_from_sequence(obj4, 0, &temp5.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(obj4, 1, &temp5.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (obj4 == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(obj4, (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_Initialize" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  { try {
      (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAnchorA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_localAnchorA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorA_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorA_set" "', argument " "localAnchorA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAnchorA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorA_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAnchorB_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_localAnchorB_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorB_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorB_set" "', argument " "localAnchorB"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchorB = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAnchorB_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAnchorB_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchorB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAxisA_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_localAxisA_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAxisA_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); { if (PySequence_Check(swig_obj[1])) {
      if (PySequence_Size(swig_obj[1]) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %ld", (long) PySequence_Size(swig_obj[1]));
        SWIG_fail; } 
      pybox2d_float_from_sequence(swig_obj[1], 0, &temp2.x, "Converting from sequence to b2Vec2, expected int/float arguments index 0");
      pybox2d_float_from_sequence(swig_obj[1], 1, &temp2.y, "Converting from sequence to b2Vec2, expected int/float arguments index 1"); }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAxisA_set" "', argument " "localAxisA"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAxisA = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_localAxisA_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_localAxisA_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAxisA);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_enableMotor_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_enableMotor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_enableMotor_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_enableMotor_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_enableMotor_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_maxMotorTorque_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_maxMotorTorque_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_maxMotorTorque_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJointDef_maxMotorTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorTorque = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_maxMotorTorque_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_maxMotorTorque_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (float32) ((arg1)->maxMotorTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_motorSpeed_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_motorSpeed_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_motorSpeed_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_frequencyHz_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_frequencyHz_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_frequencyHz_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_dampingRatio_set(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args, "b2WheelJointDef_dampingRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef_dampingRatio_get(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJointDef___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJointDef___hash__" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); { try { result = (long)b2WheelJointDef___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2WheelJointDef(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJointDef *arg1 = (b2WheelJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2WheelJointDef" "', argument " "1"" of type '" "b2WheelJointDef *""'");  }
   arg1 = reinterpret_cast< b2WheelJointDef * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2WheelJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2WheelJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2WheelJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2WheelJoint_GetLocalAnchorA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint_GetLocalAnchorA" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAnchorA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint_GetLocalAnchorB(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint_GetLocalAnchorB" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAnchorB(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint_GetLocalAxisA(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint_GetLocalAxisA" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (b2Vec2 *) &((b2WheelJoint const *)arg1)->GetLocalAxisA(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetJointTranslation(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetJointTranslation" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (float32)((b2WheelJoint const *)arg1)->GetJointTranslation(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetJointSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetJointSpeed" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try { result = (float32)((b2WheelJoint const *)arg1)->GetJointSpeed(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___IsMotorEnabled(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___IsMotorEnabled" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try { result = (bool)((b2WheelJoint const *)arg1)->IsMotorEnabled(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___EnableMotor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = { (char *)"self",  (char *)"flag",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint___EnableMotor", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___EnableMotor" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_bool(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint___EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); { try { (arg1)->EnableMotor(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___SetMotorSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"speed",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint___SetMotorSpeed", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___SetMotorSpeed" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint___SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMotorSpeed(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetMotorSpeed(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetMotorSpeed" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try { result = (float32)((b2WheelJoint const *)arg1)->GetMotorSpeed(); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___SetMaxMotorTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"torque",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint___SetMaxMotorTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___SetMaxMotorTorque" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint___SetMaxMotorTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetMaxMotorTorque(arg2); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetMaxMotorTorque(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetMaxMotorTorque" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (float32)((b2WheelJoint const *)arg1)->GetMaxMotorTorque(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint_GetMotorTorque(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"inv_dt",  NULL } ; float32 result;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint_GetMotorTorque", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint_GetMotorTorque" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint_GetMotorTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { result = (float32)((b2WheelJoint const *)arg1)->GetMotorTorque(arg2); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___SetSpringFrequencyHz(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"hz",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint___SetSpringFrequencyHz", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___SetSpringFrequencyHz" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint___SetSpringFrequencyHz" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetSpringFrequencyHz(arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetSpringFrequencyHz(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetSpringFrequencyHz" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (float32)((b2WheelJoint const *)arg1)->GetSpringFrequencyHz(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___SetSpringDampingRatio(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0; b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; char * kwnames[] = {
    (char *)"self",  (char *)"ratio",  NULL } ;
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:b2WheelJoint___SetSpringDampingRatio", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___SetSpringDampingRatio" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); ecode2 = SWIG_AsVal_float(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2WheelJoint___SetSpringDampingRatio" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); { try { (arg1)->SetSpringDampingRatio(arg2); }  catch(b2AssertException) {  SWIG_fail; }
      if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___GetSpringDampingRatio(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___GetSpringDampingRatio" "', argument " "1"" of type '" "b2WheelJoint const *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try {
      result = (float32)((b2WheelJoint const *)arg1)->GetSpringDampingRatio(); }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2WheelJoint___hash__(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2WheelJoint___hash__" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try { result = (long)b2WheelJoint___hash__(arg1); }
     catch(b2AssertException) {  SWIG_fail; }   if (PyErr_Occurred()) {  SWIG_fail; }  } 
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2WheelJoint(PyObject *self, PyObject *args) { PyObject *resultobj = 0;
  b2WheelJoint *arg1 = (b2WheelJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2WheelJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2WheelJoint" "', argument " "1"" of type '" "b2WheelJoint *""'");  }
   arg1 = reinterpret_cast< b2WheelJoint * >(argp1); { try { delete arg1; }  catch(b2AssertException) {  SWIG_fail; }  
    if (PyErr_Occurred()) {  SWIG_fail; }  }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2WheelJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2WheelJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "__jointeq", (PyCFunction)(void(*)(void))_wrap___jointeq, METH_VARARGS|METH_KEYWORDS, "__jointeq(b2Joint a, b2Joint b) -> bool"},
	 { "__bodyeq", (PyCFunction)(void(*)(void))_wrap___bodyeq, METH_VARARGS|METH_KEYWORDS, "__bodyeq(b2Body a, b2Body b) -> bool"},
	 { "__shapeeq", (PyCFunction)(void(*)(void))_wrap___shapeeq, METH_VARARGS|METH_KEYWORDS, "__shapeeq(b2Shape a, b2Shape b) -> bool"},
	 { "__fixtureeq", (PyCFunction)(void(*)(void))_wrap___fixtureeq, METH_VARARGS|METH_KEYWORDS, "__fixtureeq(b2Fixture a, b2Fixture b) -> bool"},
	 { "__b2ComputeCentroid", (PyCFunction)(void(*)(void))_wrap___b2ComputeCentroid, METH_VARARGS|METH_KEYWORDS, "__b2ComputeCentroid(b2Vec2 vs, int32 count) -> b2Vec2"},
	 { "b2CheckVertices", (PyCFunction)(void(*)(void))_wrap_b2CheckVertices, METH_VARARGS|METH_KEYWORDS, "b2CheckVertices(b2Vec2 vertices, int32 count, bool additional_checks=True) -> bool"},
	 { "b2CheckPolygon", (PyCFunction)(void(*)(void))_wrap_b2CheckPolygon, METH_VARARGS|METH_KEYWORDS, "b2CheckPolygon(b2PolygonShape shape, bool additional_checks=True) -> bool"},
	 { "b2Random", _wrap_b2Random, METH_VARARGS, "\n"
		"b2Random() -> float32\n"
		"b2Random(float32 lo, float32 hi) -> float32\n"
		""},
	 { "_b2Distance", _wrap__b2Distance, METH_VARARGS, "\n"
		"_b2Distance(b2Shape shapeA, int idxA, b2Shape shapeB, int idxB, b2Transform transformA, b2Transform transformB, bool useRadii=True) -> b2DistanceOutput\n"
		"_b2Distance(b2DistanceInput input) -> b2DistanceOutput\n"
		""},
	 { "b2GetPointStates", (PyCFunction)(void(*)(void))_wrap_b2GetPointStates, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2GetPointStates(b2Manifold manifold1, b2Manifold manifold2) -> PyObject *\n"
		"Compute the point states given two manifolds. The states pertain to the transition from manifold1 to manifold2. So state1 is either persist or remove while state2 is either add or persist.\n"
		""},
	 { "new_b2ContactPoint", _wrap_new_b2ContactPoint, METH_NOARGS, "new_b2ContactPoint() -> b2ContactPoint"},
	 { "delete_b2ContactPoint", _wrap_delete_b2ContactPoint, METH_O, "delete_b2ContactPoint(b2ContactPoint self)"},
	 { "b2ContactPoint_fixtureA_set", _wrap_b2ContactPoint_fixtureA_set, METH_VARARGS, "b2ContactPoint_fixtureA_set(b2ContactPoint self, b2Fixture fixtureA)"},
	 { "b2ContactPoint_fixtureA_get", _wrap_b2ContactPoint_fixtureA_get, METH_O, "b2ContactPoint_fixtureA_get(b2ContactPoint self) -> b2Fixture"},
	 { "b2ContactPoint_fixtureB_set", _wrap_b2ContactPoint_fixtureB_set, METH_VARARGS, "b2ContactPoint_fixtureB_set(b2ContactPoint self, b2Fixture fixtureB)"},
	 { "b2ContactPoint_fixtureB_get", _wrap_b2ContactPoint_fixtureB_get, METH_O, "b2ContactPoint_fixtureB_get(b2ContactPoint self) -> b2Fixture"},
	 { "b2ContactPoint_normal_set", _wrap_b2ContactPoint_normal_set, METH_VARARGS, "b2ContactPoint_normal_set(b2ContactPoint self, b2Vec2 normal)"},
	 { "b2ContactPoint_normal_get", _wrap_b2ContactPoint_normal_get, METH_O, "b2ContactPoint_normal_get(b2ContactPoint self) -> b2Vec2"},
	 { "b2ContactPoint_position_set", _wrap_b2ContactPoint_position_set, METH_VARARGS, "b2ContactPoint_position_set(b2ContactPoint self, b2Vec2 position)"},
	 { "b2ContactPoint_position_get", _wrap_b2ContactPoint_position_get, METH_O, "b2ContactPoint_position_get(b2ContactPoint self) -> b2Vec2"},
	 { "b2ContactPoint_state_set", _wrap_b2ContactPoint_state_set, METH_VARARGS, "b2ContactPoint_state_set(b2ContactPoint self, b2PointState state)"},
	 { "b2ContactPoint_state_get", _wrap_b2ContactPoint_state_get, METH_O, "b2ContactPoint_state_get(b2ContactPoint self) -> b2PointState"},
	 { "b2ContactPoint___hash__", _wrap_b2ContactPoint___hash__, METH_O, "b2ContactPoint___hash__(b2ContactPoint self) -> long"},
	 { "b2ContactPoint_swigregister", b2ContactPoint_swigregister, METH_O, NULL},
	 { "b2ContactPoint_swiginit", b2ContactPoint_swiginit, METH_VARARGS, NULL},
	 { "_b2TimeOfImpact", _wrap__b2TimeOfImpact, METH_VARARGS, "\n"
		"_b2TimeOfImpact(b2Shape shapeA, int idxA, b2Shape shapeB, int idxB, b2Sweep sweepA, b2Sweep sweepB, float32 tMax) -> b2TOIOutput\n"
		"_b2TimeOfImpact(b2TOIInput input) -> b2TOIOutput\n"
		""},
	 { "b2AssertException___hash__", _wrap_b2AssertException___hash__, METH_O, "b2AssertException___hash__(b2AssertException self) -> long"},
	 { "new_b2AssertException", _wrap_new_b2AssertException, METH_NOARGS, "new_b2AssertException() -> b2AssertException"},
	 { "delete_b2AssertException", _wrap_delete_b2AssertException, METH_O, "delete_b2AssertException(b2AssertException self)"},
	 { "b2AssertException_swigregister", b2AssertException_swigregister, METH_O, NULL},
	 { "b2AssertException_swiginit", b2AssertException_swiginit, METH_VARARGS, NULL},
	 { "b2Alloc", (PyCFunction)(void(*)(void))_wrap_b2Alloc, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Alloc(int32 size) -> void *\n"
		"Implement this function to use your own memory allocator.\n"
		""},
	 { "b2Free", (PyCFunction)(void(*)(void))_wrap_b2Free, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Free(void * mem)\n"
		"If you implement b2Alloc, you should also implement this function.\n"
		""},
	 { "b2Log", (PyCFunction)(void(*)(void))_wrap_b2Log, METH_VARARGS|METH_KEYWORDS, "b2Log(char const * string)"},
	 { "b2Version_major_set", _wrap_b2Version_major_set, METH_VARARGS, "b2Version_major_set(b2Version self, int32 major)"},
	 { "b2Version_major_get", _wrap_b2Version_major_get, METH_O, "b2Version_major_get(b2Version self) -> int32"},
	 { "b2Version_minor_set", _wrap_b2Version_minor_set, METH_VARARGS, "b2Version_minor_set(b2Version self, int32 minor)"},
	 { "b2Version_minor_get", _wrap_b2Version_minor_get, METH_O, "b2Version_minor_get(b2Version self) -> int32"},
	 { "b2Version_revision_set", _wrap_b2Version_revision_set, METH_VARARGS, "b2Version_revision_set(b2Version self, int32 revision)"},
	 { "b2Version_revision_get", _wrap_b2Version_revision_get, METH_O, "b2Version_revision_get(b2Version self) -> int32"},
	 { "b2Version___hash__", _wrap_b2Version___hash__, METH_O, "b2Version___hash__(b2Version self) -> long"},
	 { "new_b2Version", _wrap_new_b2Version, METH_NOARGS, "\n"
		"new_b2Version() -> b2Version\n"
		"Version numbering scheme. See http://en.wikipedia.org/wiki/Software_versioning\n"
		""},
	 { "delete_b2Version", _wrap_delete_b2Version, METH_O, "delete_b2Version(b2Version self)"},
	 { "b2Version_swigregister", b2Version_swigregister, METH_O, NULL},
	 { "b2Version_swiginit", b2Version_swiginit, METH_VARARGS, NULL},
	 { "b2IsValid", (PyCFunction)(void(*)(void))_wrap_b2IsValid, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2IsValid(float32 x) -> bool\n"
		"This function is used to ensure that a floating point number is not a NaN or infinity.\n"
		""},
	 { "b2InvSqrt", (PyCFunction)(void(*)(void))_wrap_b2InvSqrt, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2InvSqrt(float32 x) -> float32\n"
		"This is a approximate yet fast inverse square-root.\n"
		""},
	 { "b2Vec2_SetZero", _wrap_b2Vec2_SetZero, METH_O, "\n"
		"b2Vec2_SetZero(b2Vec2 self)\n"
		"Set this vector to all zeros.\n"
		""},
	 { "b2Vec2_Set", (PyCFunction)(void(*)(void))_wrap_b2Vec2_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Vec2_Set(b2Vec2 self, float32 x_, float32 y_)\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { "b2Vec2___neg__", _wrap_b2Vec2___neg__, METH_O, "b2Vec2___neg__(b2Vec2 self) -> b2Vec2"},
	 { "b2Vec2___call__", _wrap_b2Vec2___call__, METH_VARARGS, "\n"
		"b2Vec2___call__(b2Vec2 self, int32 i) -> float32\n"
		"b2Vec2___call__(b2Vec2 self, int32 i) -> float32 &\n"
		""},
	 { "b2Vec2___add_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec2___add_vector, METH_VARARGS|METH_KEYWORDS, "b2Vec2___add_vector(b2Vec2 self, b2Vec2 v)"},
	 { "b2Vec2___sub_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec2___sub_vector, METH_VARARGS|METH_KEYWORDS, "b2Vec2___sub_vector(b2Vec2 self, b2Vec2 v)"},
	 { "b2Vec2___mul_float", (PyCFunction)(void(*)(void))_wrap_b2Vec2___mul_float, METH_VARARGS|METH_KEYWORDS, "b2Vec2___mul_float(b2Vec2 self, float32 a)"},
	 { "b2Vec2___Length", _wrap_b2Vec2___Length, METH_O, "\n"
		"b2Vec2___Length(b2Vec2 self) -> float32\n"
		"Get the length of this vector (the norm).\n"
		""},
	 { "b2Vec2___LengthSquared", _wrap_b2Vec2___LengthSquared, METH_O, "\n"
		"b2Vec2___LengthSquared(b2Vec2 self) -> float32\n"
		"Get the length squared. For performance, use this instead of  b2Vec2::Length(if possible).\n"
		""},
	 { "b2Vec2_Normalize", _wrap_b2Vec2_Normalize, METH_O, "\n"
		"b2Vec2_Normalize(b2Vec2 self) -> float32\n"
		"Convert this vector into a unit vector. Returns the length.\n"
		""},
	 { "b2Vec2___IsValid", _wrap_b2Vec2___IsValid, METH_O, "\n"
		"b2Vec2___IsValid(b2Vec2 self) -> bool\n"
		"Does this vector contain finite coordinates?\n"
		""},
	 { "b2Vec2___Skew", _wrap_b2Vec2___Skew, METH_O, "\n"
		"b2Vec2___Skew(b2Vec2 self) -> b2Vec2\n"
		"Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n"
		""},
	 { "b2Vec2_x_set", _wrap_b2Vec2_x_set, METH_VARARGS, "b2Vec2_x_set(b2Vec2 self, float32 x)"},
	 { "b2Vec2_x_get", _wrap_b2Vec2_x_get, METH_O, "b2Vec2_x_get(b2Vec2 self) -> float32"},
	 { "b2Vec2_y_set", _wrap_b2Vec2_y_set, METH_VARARGS, "b2Vec2_y_set(b2Vec2 self, float32 y)"},
	 { "b2Vec2_y_get", _wrap_b2Vec2_y_get, METH_O, "b2Vec2_y_get(b2Vec2 self) -> float32"},
	 { "b2Vec2___hash__", _wrap_b2Vec2___hash__, METH_O, "b2Vec2___hash__(b2Vec2 self) -> long"},
	 { "new_b2Vec2", _wrap_new_b2Vec2, METH_VARARGS, "\n"
		"b2Vec2(float32 x, float32 y)\n"
		"b2Vec2()\n"
		"new_b2Vec2(b2Vec2 other) -> b2Vec2\n"
		"Construct using coordinates.\n"
		""},
	 { "b2Vec2_cross", _wrap_b2Vec2_cross, METH_VARARGS, "\n"
		"b2Vec2_cross(b2Vec2 self, b2Vec2 other) -> float32\n"
		"b2Vec2_cross(b2Vec2 self, float32 s) -> b2Vec2\n"
		""},
	 { "b2Vec2___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___getitem__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___getitem__(b2Vec2 self, int i) -> float32"},
	 { "b2Vec2___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___setitem__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___setitem__(b2Vec2 self, int i, float32 value)"},
	 { "b2Vec2___equ", (PyCFunction)(void(*)(void))_wrap_b2Vec2___equ, METH_VARARGS|METH_KEYWORDS, "b2Vec2___equ(b2Vec2 self, b2Vec2 other) -> bool"},
	 { "b2Vec2_dot", (PyCFunction)(void(*)(void))_wrap_b2Vec2_dot, METH_VARARGS|METH_KEYWORDS, "b2Vec2_dot(b2Vec2 self, b2Vec2 other) -> float32"},
	 { "b2Vec2___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___truediv__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___truediv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___div__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___div__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___div__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___mul__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___mul__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___mul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___add__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___add__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___add__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { "b2Vec2___sub__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___sub__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___sub__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { "b2Vec2___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___rmul__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___rmul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___rdiv__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___rdiv__, METH_VARARGS|METH_KEYWORDS, "b2Vec2___rdiv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___div_float", (PyCFunction)(void(*)(void))_wrap_b2Vec2___div_float, METH_VARARGS|METH_KEYWORDS, "b2Vec2___div_float(b2Vec2 self, float32 a)"},
	 { "delete_b2Vec2", _wrap_delete_b2Vec2, METH_O, "delete_b2Vec2(b2Vec2 self)"},
	 { "b2Vec2_swigregister", b2Vec2_swigregister, METH_O, NULL},
	 { "b2Vec2_swiginit", b2Vec2_swiginit, METH_VARARGS, NULL},
	 { "b2Vec3_SetZero", _wrap_b2Vec3_SetZero, METH_O, "\n"
		"b2Vec3_SetZero(b2Vec3 self)\n"
		"Set this vector to all zeros.\n"
		""},
	 { "b2Vec3_Set", (PyCFunction)(void(*)(void))_wrap_b2Vec3_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Vec3_Set(b2Vec3 self, float32 x_, float32 y_, float32 z_)\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { "b2Vec3___neg__", _wrap_b2Vec3___neg__, METH_O, "b2Vec3___neg__(b2Vec3 self) -> b2Vec3"},
	 { "b2Vec3___add_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec3___add_vector, METH_VARARGS|METH_KEYWORDS, "b2Vec3___add_vector(b2Vec3 self, b2Vec3 v)"},
	 { "b2Vec3___sub_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec3___sub_vector, METH_VARARGS|METH_KEYWORDS, "b2Vec3___sub_vector(b2Vec3 self, b2Vec3 v)"},
	 { "b2Vec3___mul_float", (PyCFunction)(void(*)(void))_wrap_b2Vec3___mul_float, METH_VARARGS|METH_KEYWORDS, "b2Vec3___mul_float(b2Vec3 self, float32 s)"},
	 { "b2Vec3_x_set", _wrap_b2Vec3_x_set, METH_VARARGS, "b2Vec3_x_set(b2Vec3 self, float32 x)"},
	 { "b2Vec3_x_get", _wrap_b2Vec3_x_get, METH_O, "b2Vec3_x_get(b2Vec3 self) -> float32"},
	 { "b2Vec3_y_set", _wrap_b2Vec3_y_set, METH_VARARGS, "b2Vec3_y_set(b2Vec3 self, float32 y)"},
	 { "b2Vec3_y_get", _wrap_b2Vec3_y_get, METH_O, "b2Vec3_y_get(b2Vec3 self) -> float32"},
	 { "b2Vec3_z_set", _wrap_b2Vec3_z_set, METH_VARARGS, "b2Vec3_z_set(b2Vec3 self, float32 z)"},
	 { "b2Vec3_z_get", _wrap_b2Vec3_z_get, METH_O, "b2Vec3_z_get(b2Vec3 self) -> float32"},
	 { "b2Vec3___hash__", _wrap_b2Vec3___hash__, METH_O, "b2Vec3___hash__(b2Vec3 self) -> long"},
	 { "new_b2Vec3", _wrap_new_b2Vec3, METH_VARARGS, "\n"
		"b2Vec3(float32 x, float32 y, float32 z)\n"
		"b2Vec3()\n"
		"b2Vec3(b2Vec3 other)\n"
		"new_b2Vec3(b2Vec2 other) -> b2Vec3\n"
		"Construct using coordinates.\n"
		""},
	 { "b2Vec3_cross", (PyCFunction)(void(*)(void))_wrap_b2Vec3_cross, METH_VARARGS|METH_KEYWORDS, "b2Vec3_cross(b2Vec3 self, b2Vec3 b) -> b2Vec3"},
	 { "b2Vec3___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___getitem__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___getitem__(b2Vec3 self, int i) -> float32"},
	 { "b2Vec3___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___setitem__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___setitem__(b2Vec3 self, int i, float32 value)"},
	 { "b2Vec3___IsValid", _wrap_b2Vec3___IsValid, METH_O, "b2Vec3___IsValid(b2Vec3 self) -> bool"},
	 { "b2Vec3___Length", _wrap_b2Vec3___Length, METH_O, "b2Vec3___Length(b2Vec3 self) -> float32"},
	 { "b2Vec3___LengthSquared", _wrap_b2Vec3___LengthSquared, METH_O, "b2Vec3___LengthSquared(b2Vec3 self) -> float32"},
	 { "b2Vec3___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___truediv__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___truediv__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___div__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___div__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___div__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___mul__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___mul__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___mul__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___add__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___add__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___add__(b2Vec3 self, b2Vec3 other) -> b2Vec3"},
	 { "b2Vec3___sub__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___sub__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___sub__(b2Vec3 self, b2Vec3 other) -> b2Vec3"},
	 { "b2Vec3___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___rmul__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___rmul__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___rdiv__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___rdiv__, METH_VARARGS|METH_KEYWORDS, "b2Vec3___rdiv__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___div_float", (PyCFunction)(void(*)(void))_wrap_b2Vec3___div_float, METH_VARARGS|METH_KEYWORDS, "b2Vec3___div_float(b2Vec3 self, float32 a)"},
	 { "delete_b2Vec3", _wrap_delete_b2Vec3, METH_O, "delete_b2Vec3(b2Vec3 self)"},
	 { "b2Vec3_swigregister", b2Vec3_swigregister, METH_O, NULL},
	 { "b2Vec3_swiginit", b2Vec3_swiginit, METH_VARARGS, NULL},
	 { "b2Mat22_SetIdentity", _wrap_b2Mat22_SetIdentity, METH_O, "\n"
		"b2Mat22_SetIdentity(b2Mat22 self)\n"
		"Set this to the identity matrix.\n"
		""},
	 { "b2Mat22_SetZero", _wrap_b2Mat22_SetZero, METH_O, "\n"
		"b2Mat22_SetZero(b2Mat22 self)\n"
		"Set this matrix to all zeros.\n"
		""},
	 { "b2Mat22___GetInverse", _wrap_b2Mat22___GetInverse, METH_O, "b2Mat22___GetInverse(b2Mat22 self) -> b2Mat22"},
	 { "b2Mat22_Solve", (PyCFunction)(void(*)(void))_wrap_b2Mat22_Solve, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Mat22_Solve(b2Mat22 self, b2Vec2 b) -> b2Vec2\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { "b2Mat22_col1_set", _wrap_b2Mat22_col1_set, METH_VARARGS, "b2Mat22_col1_set(b2Mat22 self, b2Vec2 ex)"},
	 { "b2Mat22_col1_get", _wrap_b2Mat22_col1_get, METH_O, "b2Mat22_col1_get(b2Mat22 self) -> b2Vec2"},
	 { "b2Mat22_col2_set", _wrap_b2Mat22_col2_set, METH_VARARGS, "b2Mat22_col2_set(b2Mat22 self, b2Vec2 ey)"},
	 { "b2Mat22_col2_get", _wrap_b2Mat22_col2_get, METH_O, "b2Mat22_col2_get(b2Mat22 self) -> b2Vec2"},
	 { "b2Mat22___hash__", _wrap_b2Mat22___hash__, METH_O, "b2Mat22___hash__(b2Mat22 self) -> long"},
	 { "new_b2Mat22", _wrap_new_b2Mat22, METH_VARARGS, "\n"
		"b2Mat22(b2Vec2 c1, b2Vec2 c2)\n"
		"b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)\n"
		"new_b2Mat22() -> b2Mat22\n"
		"Construct this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { "b2Mat22___GetAngle", _wrap_b2Mat22___GetAngle, METH_O, "b2Mat22___GetAngle(b2Mat22 self) -> float32"},
	 { "b2Mat22___SetAngle", _wrap_b2Mat22___SetAngle, METH_VARARGS, "\n"
		"b2Mat22___SetAngle(b2Mat22 self, b2Vec2 c1, b2Vec2 c2)\n"
		"b2Mat22___SetAngle(b2Mat22 self, float32 angle)\n"
		"Initialize this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { "b2Mat22___mul__", _wrap_b2Mat22___mul__, METH_VARARGS, "\n"
		"b2Mat22___mul__(b2Mat22 self, b2Vec2 v) -> b2Vec2\n"
		"b2Mat22___mul__(b2Mat22 self, b2Mat22 m) -> b2Mat22\n"
		""},
	 { "b2Mat22___add__", (PyCFunction)(void(*)(void))_wrap_b2Mat22___add__, METH_VARARGS|METH_KEYWORDS, "b2Mat22___add__(b2Mat22 self, b2Mat22 m) -> b2Mat22"},
	 { "b2Mat22___sub__", (PyCFunction)(void(*)(void))_wrap_b2Mat22___sub__, METH_VARARGS|METH_KEYWORDS, "b2Mat22___sub__(b2Mat22 self, b2Mat22 m) -> b2Mat22"},
	 { "b2Mat22___iadd", (PyCFunction)(void(*)(void))_wrap_b2Mat22___iadd, METH_VARARGS|METH_KEYWORDS, "b2Mat22___iadd(b2Mat22 self, b2Mat22 m)"},
	 { "b2Mat22___isub", (PyCFunction)(void(*)(void))_wrap_b2Mat22___isub, METH_VARARGS|METH_KEYWORDS, "b2Mat22___isub(b2Mat22 self, b2Mat22 m)"},
	 { "delete_b2Mat22", _wrap_delete_b2Mat22, METH_O, "delete_b2Mat22(b2Mat22 self)"},
	 { "b2Mat22_swigregister", b2Mat22_swigregister, METH_O, NULL},
	 { "b2Mat22_swiginit", b2Mat22_swiginit, METH_VARARGS, NULL},
	 { "b2Mat33_SetZero", _wrap_b2Mat33_SetZero, METH_O, "\n"
		"b2Mat33_SetZero(b2Mat33 self)\n"
		"Set this matrix to all zeros.\n"
		""},
	 { "b2Mat33_Solve33", (PyCFunction)(void(*)(void))_wrap_b2Mat33_Solve33, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Mat33_Solve33(b2Mat33 self, b2Vec3 b) -> b2Vec3\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { "b2Mat33_Solve22", (PyCFunction)(void(*)(void))_wrap_b2Mat33_Solve22, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Mat33_Solve22(b2Mat33 self, b2Vec2 b) -> b2Vec2\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix equation.\n"
		""},
	 { "b2Mat33_GetInverse22", (PyCFunction)(void(*)(void))_wrap_b2Mat33_GetInverse22, METH_VARARGS|METH_KEYWORDS, "b2Mat33_GetInverse22(b2Mat33 self, b2Mat33 M)"},
	 { "b2Mat33_GetSymInverse33", (PyCFunction)(void(*)(void))_wrap_b2Mat33_GetSymInverse33, METH_VARARGS|METH_KEYWORDS, "b2Mat33_GetSymInverse33(b2Mat33 self, b2Mat33 M)"},
	 { "b2Mat33_col1_set", _wrap_b2Mat33_col1_set, METH_VARARGS, "b2Mat33_col1_set(b2Mat33 self, b2Vec3 ex)"},
	 { "b2Mat33_col1_get", _wrap_b2Mat33_col1_get, METH_O, "b2Mat33_col1_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33_col2_set", _wrap_b2Mat33_col2_set, METH_VARARGS, "b2Mat33_col2_set(b2Mat33 self, b2Vec3 ey)"},
	 { "b2Mat33_col2_get", _wrap_b2Mat33_col2_get, METH_O, "b2Mat33_col2_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33_col3_set", _wrap_b2Mat33_col3_set, METH_VARARGS, "b2Mat33_col3_set(b2Mat33 self, b2Vec3 ez)"},
	 { "b2Mat33_col3_get", _wrap_b2Mat33_col3_get, METH_O, "b2Mat33_col3_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33___hash__", _wrap_b2Mat33___hash__, METH_O, "b2Mat33___hash__(b2Mat33 self) -> long"},
	 { "new_b2Mat33", _wrap_new_b2Mat33, METH_VARARGS, "\n"
		"b2Mat33(b2Vec3 c1, b2Vec3 c2, b2Vec3 c3)\n"
		"new_b2Mat33() -> b2Mat33\n"
		"Construct this matrix using columns.\n"
		""},
	 { "b2Mat33___mul__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___mul__, METH_VARARGS|METH_KEYWORDS, "b2Mat33___mul__(b2Mat33 self, b2Vec3 v) -> b2Vec3"},
	 { "b2Mat33___add__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___add__, METH_VARARGS|METH_KEYWORDS, "b2Mat33___add__(b2Mat33 self, b2Mat33 other) -> b2Mat33"},
	 { "b2Mat33___sub__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___sub__, METH_VARARGS|METH_KEYWORDS, "b2Mat33___sub__(b2Mat33 self, b2Mat33 other) -> b2Mat33"},
	 { "b2Mat33___iadd", (PyCFunction)(void(*)(void))_wrap_b2Mat33___iadd, METH_VARARGS|METH_KEYWORDS, "b2Mat33___iadd(b2Mat33 self, b2Mat33 other)"},
	 { "b2Mat33___isub", (PyCFunction)(void(*)(void))_wrap_b2Mat33___isub, METH_VARARGS|METH_KEYWORDS, "b2Mat33___isub(b2Mat33 self, b2Mat33 other)"},
	 { "delete_b2Mat33", _wrap_delete_b2Mat33, METH_O, "delete_b2Mat33(b2Mat33 self)"},
	 { "b2Mat33_swigregister", b2Mat33_swigregister, METH_O, NULL},
	 { "b2Mat33_swiginit", b2Mat33_swiginit, METH_VARARGS, NULL},
	 { "new_b2Rot", _wrap_new_b2Rot, METH_VARARGS, "\n"
		"b2Rot()\n"
		"new_b2Rot(float32 angle) -> b2Rot\n"
		""},
	 { "b2Rot___SetAngle", (PyCFunction)(void(*)(void))_wrap_b2Rot___SetAngle, METH_VARARGS|METH_KEYWORDS, "b2Rot___SetAngle(b2Rot self, float32 angle)"},
	 { "b2Rot_SetIdentity", _wrap_b2Rot_SetIdentity, METH_O, "b2Rot_SetIdentity(b2Rot self)"},
	 { "b2Rot___GetAngle", _wrap_b2Rot___GetAngle, METH_O, "b2Rot___GetAngle(b2Rot self) -> float32"},
	 { "b2Rot_GetXAxis", _wrap_b2Rot_GetXAxis, METH_O, "b2Rot_GetXAxis(b2Rot self) -> b2Vec2"},
	 { "b2Rot_GetYAxis", _wrap_b2Rot_GetYAxis, METH_O, "b2Rot_GetYAxis(b2Rot self) -> b2Vec2"},
	 { "b2Rot_s_set", _wrap_b2Rot_s_set, METH_VARARGS, "b2Rot_s_set(b2Rot self, float32 s)"},
	 { "b2Rot_s_get", _wrap_b2Rot_s_get, METH_O, "b2Rot_s_get(b2Rot self) -> float32"},
	 { "b2Rot_c_set", _wrap_b2Rot_c_set, METH_VARARGS, "b2Rot_c_set(b2Rot self, float32 c)"},
	 { "b2Rot_c_get", _wrap_b2Rot_c_get, METH_O, "b2Rot_c_get(b2Rot self) -> float32"},
	 { "b2Rot___mul__", (PyCFunction)(void(*)(void))_wrap_b2Rot___mul__, METH_VARARGS|METH_KEYWORDS, "b2Rot___mul__(b2Rot self, b2Vec2 v) -> b2Vec2"},
	 { "delete_b2Rot", _wrap_delete_b2Rot, METH_O, "delete_b2Rot(b2Rot self)"},
	 { "b2Rot_swigregister", b2Rot_swigregister, METH_O, NULL},
	 { "b2Rot_swiginit", b2Rot_swiginit, METH_VARARGS, NULL},
	 { "new_b2Transform", _wrap_new_b2Transform, METH_VARARGS, "\n"
		"b2Transform()\n"
		"new_b2Transform(b2Vec2 position, b2Rot rotation) -> b2Transform\n"
		"Initialize using a position vector and a rotation matrix.\n"
		""},
	 { "b2Transform_SetIdentity", _wrap_b2Transform_SetIdentity, METH_O, "\n"
		"b2Transform_SetIdentity(b2Transform self)\n"
		"Set this to the identity transform.\n"
		""},
	 { "b2Transform_Set", (PyCFunction)(void(*)(void))_wrap_b2Transform_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Transform_Set(b2Transform self, b2Vec2 position, float32 angle)\n"
		"Set this based on the position and angle.\n"
		""},
	 { "b2Transform_position_set", _wrap_b2Transform_position_set, METH_VARARGS, "b2Transform_position_set(b2Transform self, b2Vec2 p)"},
	 { "b2Transform_position_get", _wrap_b2Transform_position_get, METH_O, "b2Transform_position_get(b2Transform self) -> b2Vec2"},
	 { "b2Transform_q_set", _wrap_b2Transform_q_set, METH_VARARGS, "b2Transform_q_set(b2Transform self, b2Rot q)"},
	 { "b2Transform_q_get", _wrap_b2Transform_q_get, METH_O, "b2Transform_q_get(b2Transform self) -> b2Rot"},
	 { "b2Transform___hash__", _wrap_b2Transform___hash__, METH_O, "b2Transform___hash__(b2Transform self) -> long"},
	 { "b2Transform___get_rotation_matrix", _wrap_b2Transform___get_rotation_matrix, METH_O, "b2Transform___get_rotation_matrix(b2Transform self) -> b2Rot"},
	 { "b2Transform___mul__", (PyCFunction)(void(*)(void))_wrap_b2Transform___mul__, METH_VARARGS|METH_KEYWORDS, "b2Transform___mul__(b2Transform self, b2Vec2 v) -> b2Vec2"},
	 { "delete_b2Transform", _wrap_delete_b2Transform, METH_O, "delete_b2Transform(b2Transform self)"},
	 { "b2Transform_swigregister", b2Transform_swigregister, METH_O, NULL},
	 { "b2Transform_swiginit", b2Transform_swiginit, METH_VARARGS, NULL},
	 { "b2Sweep_Advance", (PyCFunction)(void(*)(void))_wrap_b2Sweep_Advance, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Sweep_Advance(b2Sweep self, float32 alpha)\n"
		"Advance the sweep forward, yielding a new initial state.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"alpha: \n"
		"the new initial time.\n"
		""},
	 { "b2Sweep_Normalize", _wrap_b2Sweep_Normalize, METH_O, "\n"
		"b2Sweep_Normalize(b2Sweep self)\n"
		"Normalize the angles.\n"
		""},
	 { "b2Sweep_localCenter_set", _wrap_b2Sweep_localCenter_set, METH_VARARGS, "b2Sweep_localCenter_set(b2Sweep self, b2Vec2 localCenter)"},
	 { "b2Sweep_localCenter_get", _wrap_b2Sweep_localCenter_get, METH_O, "b2Sweep_localCenter_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_c0_set", _wrap_b2Sweep_c0_set, METH_VARARGS, "b2Sweep_c0_set(b2Sweep self, b2Vec2 c0)"},
	 { "b2Sweep_c0_get", _wrap_b2Sweep_c0_get, METH_O, "b2Sweep_c0_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_c_set", _wrap_b2Sweep_c_set, METH_VARARGS, "b2Sweep_c_set(b2Sweep self, b2Vec2 c)"},
	 { "b2Sweep_c_get", _wrap_b2Sweep_c_get, METH_O, "b2Sweep_c_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_a0_set", _wrap_b2Sweep_a0_set, METH_VARARGS, "b2Sweep_a0_set(b2Sweep self, float32 a0)"},
	 { "b2Sweep_a0_get", _wrap_b2Sweep_a0_get, METH_O, "b2Sweep_a0_get(b2Sweep self) -> float32"},
	 { "b2Sweep_a_set", _wrap_b2Sweep_a_set, METH_VARARGS, "b2Sweep_a_set(b2Sweep self, float32 a)"},
	 { "b2Sweep_a_get", _wrap_b2Sweep_a_get, METH_O, "b2Sweep_a_get(b2Sweep self) -> float32"},
	 { "b2Sweep_alpha0_set", _wrap_b2Sweep_alpha0_set, METH_VARARGS, "b2Sweep_alpha0_set(b2Sweep self, float32 alpha0)"},
	 { "b2Sweep_alpha0_get", _wrap_b2Sweep_alpha0_get, METH_O, "b2Sweep_alpha0_get(b2Sweep self) -> float32"},
	 { "b2Sweep___hash__", _wrap_b2Sweep___hash__, METH_O, "b2Sweep___hash__(b2Sweep self) -> long"},
	 { "b2Sweep_GetTransform", _wrap_b2Sweep_GetTransform, METH_VARARGS, "\n"
		"b2Sweep_GetTransform(b2Sweep self, b2Transform xfb, float32 beta)\n"
		"b2Sweep_GetTransform(b2Sweep self, float32 alpha) -> b2Transform\n"
		"Get the interpolated transform at a specific time.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"beta: \n"
		"is a factor in [0,1], where 0 indicates alpha0.\n"
		""},
	 { "new_b2Sweep", _wrap_new_b2Sweep, METH_NOARGS, "\n"
		"new_b2Sweep() -> b2Sweep\n"
		"This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body origin, which may no coincide with the center of mass. However, to support dynamics we must interpolate the center of mass position.\n"
		""},
	 { "delete_b2Sweep", _wrap_delete_b2Sweep, METH_O, "delete_b2Sweep(b2Sweep self)"},
	 { "b2Sweep_swigregister", b2Sweep_swigregister, METH_O, NULL},
	 { "b2Sweep_swiginit", b2Sweep_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceSquared", (PyCFunction)(void(*)(void))_wrap_b2DistanceSquared, METH_VARARGS|METH_KEYWORDS, "b2DistanceSquared(b2Vec2 a, b2Vec2 b) -> float32"},
	 { "b2Dot", _wrap_b2Dot, METH_VARARGS, "\n"
		"b2Dot(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Dot(b2Vec3 a, b2Vec3 b) -> float32\n"
		"Perform the dot product on two vectors.\n"
		""},
	 { "b2Cross", _wrap_b2Cross, METH_VARARGS, "\n"
		"b2Cross(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Cross(b2Vec2 a, float32 s) -> b2Vec2\n"
		"b2Cross(float32 s, b2Vec2 a) -> b2Vec2\n"
		"b2Cross(b2Vec3 a, b2Vec3 b) -> b2Vec3\n"
		"Perform the cross product on two vectors.\n"
		""},
	 { "b2Mul22", (PyCFunction)(void(*)(void))_wrap_b2Mul22, METH_VARARGS|METH_KEYWORDS, "b2Mul22(b2Mat33 A, b2Vec2 v) -> b2Vec2"},
	 { "b2Mul", _wrap_b2Mul, METH_VARARGS, "\n"
		"b2Mul(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2Mul(b2Mat33 A, b2Vec3 v) -> b2Vec3\n"
		"b2Mul(b2Rot q, b2Rot r) -> b2Rot\n"
		"b2Mul(b2Rot q, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Transform T, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Transform A, b2Transform B) -> b2Transform\n"
		"Multiply a matrix times a vector.\n"
		""},
	 { "b2MulT", _wrap_b2MulT, METH_VARARGS, "\n"
		"b2MulT(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2MulT(b2Rot q, b2Rot r) -> b2Rot\n"
		"b2MulT(b2Rot q, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Transform T, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Transform A, b2Transform B) -> b2Transform\n"
		"Multiply a matrix transpose times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another (inverse transform).\n"
		""},
	 { "b2Abs", _wrap_b2Abs, METH_VARARGS, "\n"
		"b2Abs(b2Vec2 a) -> b2Vec2\n"
		"b2Abs(b2Mat22 A) -> b2Mat22\n"
		""},
	 { "b2Min", (PyCFunction)(void(*)(void))_wrap_b2Min, METH_VARARGS|METH_KEYWORDS, "b2Min(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { "b2Max", (PyCFunction)(void(*)(void))_wrap_b2Max, METH_VARARGS|METH_KEYWORDS, "b2Max(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { "b2Clamp", (PyCFunction)(void(*)(void))_wrap_b2Clamp, METH_VARARGS|METH_KEYWORDS, "b2Clamp(b2Vec2 a, b2Vec2 low, b2Vec2 high) -> b2Vec2"},
	 { "b2NextPowerOfTwo", (PyCFunction)(void(*)(void))_wrap_b2NextPowerOfTwo, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2NextPowerOfTwo(uint32 x) -> uint32\n"
		"\"Next Largest Power of 2 Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the upper bits into the lower bits. This process yields a bit vector with the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next largest power of 2. For a 32-bit value:\"\n"
		""},
	 { "b2IsPowerOfTwo", (PyCFunction)(void(*)(void))_wrap_b2IsPowerOfTwo, METH_VARARGS|METH_KEYWORDS, "b2IsPowerOfTwo(uint32 x) -> bool"},
	 { "b2ContactFeature_indexA_set", _wrap_b2ContactFeature_indexA_set, METH_VARARGS, "b2ContactFeature_indexA_set(b2ContactFeature self, uint8 indexA)"},
	 { "b2ContactFeature_indexA_get", _wrap_b2ContactFeature_indexA_get, METH_O, "b2ContactFeature_indexA_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_indexB_set", _wrap_b2ContactFeature_indexB_set, METH_VARARGS, "b2ContactFeature_indexB_set(b2ContactFeature self, uint8 indexB)"},
	 { "b2ContactFeature_indexB_get", _wrap_b2ContactFeature_indexB_get, METH_O, "b2ContactFeature_indexB_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_typeA_set", _wrap_b2ContactFeature_typeA_set, METH_VARARGS, "b2ContactFeature_typeA_set(b2ContactFeature self, uint8 typeA)"},
	 { "b2ContactFeature_typeA_get", _wrap_b2ContactFeature_typeA_get, METH_O, "b2ContactFeature_typeA_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_typeB_set", _wrap_b2ContactFeature_typeB_set, METH_VARARGS, "b2ContactFeature_typeB_set(b2ContactFeature self, uint8 typeB)"},
	 { "b2ContactFeature_typeB_get", _wrap_b2ContactFeature_typeB_get, METH_O, "b2ContactFeature_typeB_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature___hash__", _wrap_b2ContactFeature___hash__, METH_O, "b2ContactFeature___hash__(b2ContactFeature self) -> long"},
	 { "new_b2ContactFeature", _wrap_new_b2ContactFeature, METH_NOARGS, "\n"
		"new_b2ContactFeature() -> b2ContactFeature\n"
		"The features that intersect to form the contact point This must be 4 bytes or less.\n"
		""},
	 { "delete_b2ContactFeature", _wrap_delete_b2ContactFeature, METH_O, "delete_b2ContactFeature(b2ContactFeature self)"},
	 { "b2ContactFeature_swigregister", b2ContactFeature_swigregister, METH_O, NULL},
	 { "b2ContactFeature_swiginit", b2ContactFeature_swiginit, METH_VARARGS, NULL},
	 { "b2ContactID_cf_set", _wrap_b2ContactID_cf_set, METH_VARARGS, "b2ContactID_cf_set(b2ContactID self, b2ContactFeature cf)"},
	 { "b2ContactID_cf_get", _wrap_b2ContactID_cf_get, METH_O, "b2ContactID_cf_get(b2ContactID self) -> b2ContactFeature"},
	 { "b2ContactID_key_set", _wrap_b2ContactID_key_set, METH_VARARGS, "b2ContactID_key_set(b2ContactID self, uint32 key)"},
	 { "b2ContactID_key_get", _wrap_b2ContactID_key_get, METH_O, "b2ContactID_key_get(b2ContactID self) -> uint32"},
	 { "b2ContactID___hash__", _wrap_b2ContactID___hash__, METH_O, "b2ContactID___hash__(b2ContactID self) -> long"},
	 { "new_b2ContactID", _wrap_new_b2ContactID, METH_NOARGS, "new_b2ContactID() -> b2ContactID"},
	 { "delete_b2ContactID", _wrap_delete_b2ContactID, METH_O, "delete_b2ContactID(b2ContactID self)"},
	 { "b2ContactID_swigregister", b2ContactID_swigregister, METH_O, NULL},
	 { "b2ContactID_swiginit", b2ContactID_swiginit, METH_VARARGS, NULL},
	 { "b2ManifoldPoint_localPoint_set", _wrap_b2ManifoldPoint_localPoint_set, METH_VARARGS, "b2ManifoldPoint_localPoint_set(b2ManifoldPoint self, b2Vec2 localPoint)"},
	 { "b2ManifoldPoint_localPoint_get", _wrap_b2ManifoldPoint_localPoint_get, METH_O, "b2ManifoldPoint_localPoint_get(b2ManifoldPoint self) -> b2Vec2"},
	 { "b2ManifoldPoint_normalImpulse_set", _wrap_b2ManifoldPoint_normalImpulse_set, METH_VARARGS, "b2ManifoldPoint_normalImpulse_set(b2ManifoldPoint self, float32 normalImpulse)"},
	 { "b2ManifoldPoint_normalImpulse_get", _wrap_b2ManifoldPoint_normalImpulse_get, METH_O, "b2ManifoldPoint_normalImpulse_get(b2ManifoldPoint self) -> float32"},
	 { "b2ManifoldPoint_tangentImpulse_set", _wrap_b2ManifoldPoint_tangentImpulse_set, METH_VARARGS, "b2ManifoldPoint_tangentImpulse_set(b2ManifoldPoint self, float32 tangentImpulse)"},
	 { "b2ManifoldPoint_tangentImpulse_get", _wrap_b2ManifoldPoint_tangentImpulse_get, METH_O, "b2ManifoldPoint_tangentImpulse_get(b2ManifoldPoint self) -> float32"},
	 { "b2ManifoldPoint_id_set", _wrap_b2ManifoldPoint_id_set, METH_VARARGS, "b2ManifoldPoint_id_set(b2ManifoldPoint self, b2ContactID id)"},
	 { "b2ManifoldPoint_id_get", _wrap_b2ManifoldPoint_id_get, METH_O, "b2ManifoldPoint_id_get(b2ManifoldPoint self) -> b2ContactID"},
	 { "b2ManifoldPoint___hash__", _wrap_b2ManifoldPoint___hash__, METH_O, "b2ManifoldPoint___hash__(b2ManifoldPoint self) -> long"},
	 { "new_b2ManifoldPoint", _wrap_new_b2ManifoldPoint, METH_NOARGS, "\n"
		"new_b2ManifoldPoint() -> b2ManifoldPoint\n"
		"A manifold point is a contact point belonging to a contact manifold. It holds details related to the geometry and dynamics of the contact points. The local point usage depends on the manifold type: -e_circles: the local center of circleB -e_faceA: the local center of cirlceB or the clip point of polygonB -e_faceB: the clip point of polygonA This structure is stored across time steps, so we keep it small. Note: the impulses are used for internal caching and may not provide reliable contact forces, especially for high speed collisions.\n"
		""},
	 { "delete_b2ManifoldPoint", _wrap_delete_b2ManifoldPoint, METH_O, "delete_b2ManifoldPoint(b2ManifoldPoint self)"},
	 { "b2ManifoldPoint_swigregister", b2ManifoldPoint_swigregister, METH_O, NULL},
	 { "b2ManifoldPoint_swiginit", b2ManifoldPoint_swiginit, METH_VARARGS, NULL},
	 { "b2Manifold_localNormal_set", _wrap_b2Manifold_localNormal_set, METH_VARARGS, "b2Manifold_localNormal_set(b2Manifold self, b2Vec2 localNormal)"},
	 { "b2Manifold_localNormal_get", _wrap_b2Manifold_localNormal_get, METH_O, "b2Manifold_localNormal_get(b2Manifold self) -> b2Vec2"},
	 { "b2Manifold_localPoint_set", _wrap_b2Manifold_localPoint_set, METH_VARARGS, "b2Manifold_localPoint_set(b2Manifold self, b2Vec2 localPoint)"},
	 { "b2Manifold_localPoint_get", _wrap_b2Manifold_localPoint_get, METH_O, "b2Manifold_localPoint_get(b2Manifold self) -> b2Vec2"},
	 { "b2Manifold_type__set", _wrap_b2Manifold_type__set, METH_VARARGS, "b2Manifold_type__set(b2Manifold self, b2Manifold::Type type)"},
	 { "b2Manifold_type__get", _wrap_b2Manifold_type__get, METH_O, "b2Manifold_type__get(b2Manifold self) -> b2Manifold::Type"},
	 { "b2Manifold_pointCount_set", _wrap_b2Manifold_pointCount_set, METH_VARARGS, "b2Manifold_pointCount_set(b2Manifold self, int32 pointCount)"},
	 { "b2Manifold_pointCount_get", _wrap_b2Manifold_pointCount_get, METH_O, "b2Manifold_pointCount_get(b2Manifold self) -> int32"},
	 { "b2Manifold___hash__", _wrap_b2Manifold___hash__, METH_O, "b2Manifold___hash__(b2Manifold self) -> long"},
	 { "b2Manifold___GetPoint", (PyCFunction)(void(*)(void))_wrap_b2Manifold___GetPoint, METH_VARARGS|METH_KEYWORDS, "b2Manifold___GetPoint(b2Manifold self, int i) -> b2ManifoldPoint"},
	 { "new_b2Manifold", _wrap_new_b2Manifold, METH_NOARGS, "\n"
		"new_b2Manifold() -> b2Manifold\n"
		"A manifold for two touching convex shapes. Box2D supports multiple types of contact:\n"
		"clip point versus plane with radius\n"
		"point versus point with radius (circles) The local point usage depends on the manifold type: -e_circles: the local center of circleA -e_faceA: the center of faceA -e_faceB: the center of faceB Similarly the local normal usage: -e_circles: not used -e_faceA: the normal on polygonA -e_faceB: the normal on polygonB We store contacts in this way so that position correction can account for movement, which is critical for continuous physics. All contact scenarios must be expressed in one of these types. This structure is stored across time steps, so we keep it small.\n"
		""},
	 { "delete_b2Manifold", _wrap_delete_b2Manifold, METH_O, "delete_b2Manifold(b2Manifold self)"},
	 { "b2Manifold_swigregister", b2Manifold_swigregister, METH_O, NULL},
	 { "b2Manifold_swiginit", b2Manifold_swiginit, METH_VARARGS, NULL},
	 { "b2WorldManifold_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WorldManifold_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WorldManifold_Initialize(b2WorldManifold self, b2Manifold manifold, b2Transform xfA, float32 radiusA, b2Transform xfB, float32 radiusB)\n"
		"Evaluate the manifold with supplied transforms. This assumes modest motion from the original state. This does not change the point count, impulses, etc. The radii must come from the shapes that generated the manifold.\n"
		""},
	 { "b2WorldManifold_normal_set", _wrap_b2WorldManifold_normal_set, METH_VARARGS, "b2WorldManifold_normal_set(b2WorldManifold self, b2Vec2 normal)"},
	 { "b2WorldManifold_normal_get", _wrap_b2WorldManifold_normal_get, METH_O, "b2WorldManifold_normal_get(b2WorldManifold self) -> b2Vec2"},
	 { "b2WorldManifold___hash__", _wrap_b2WorldManifold___hash__, METH_O, "b2WorldManifold___hash__(b2WorldManifold self) -> long"},
	 { "b2WorldManifold___get_points", _wrap_b2WorldManifold___get_points, METH_O, "b2WorldManifold___get_points(b2WorldManifold self) -> PyObject *"},
	 { "new_b2WorldManifold", _wrap_new_b2WorldManifold, METH_NOARGS, "\n"
		"new_b2WorldManifold() -> b2WorldManifold\n"
		"This is used to compute the current state of a contact manifold.\n"
		""},
	 { "delete_b2WorldManifold", _wrap_delete_b2WorldManifold, METH_O, "delete_b2WorldManifold(b2WorldManifold self)"},
	 { "b2WorldManifold_swigregister", b2WorldManifold_swigregister, METH_O, NULL},
	 { "b2WorldManifold_swiginit", b2WorldManifold_swiginit, METH_VARARGS, NULL},
	 { "b2ClipVertex_v_set", _wrap_b2ClipVertex_v_set, METH_VARARGS, "b2ClipVertex_v_set(b2ClipVertex self, b2Vec2 v)"},
	 { "b2ClipVertex_v_get", _wrap_b2ClipVertex_v_get, METH_O, "b2ClipVertex_v_get(b2ClipVertex self) -> b2Vec2"},
	 { "b2ClipVertex_id_set", _wrap_b2ClipVertex_id_set, METH_VARARGS, "b2ClipVertex_id_set(b2ClipVertex self, b2ContactID id)"},
	 { "b2ClipVertex_id_get", _wrap_b2ClipVertex_id_get, METH_O, "b2ClipVertex_id_get(b2ClipVertex self) -> b2ContactID"},
	 { "b2ClipVertex___hash__", _wrap_b2ClipVertex___hash__, METH_O, "b2ClipVertex___hash__(b2ClipVertex self) -> long"},
	 { "new_b2ClipVertex", _wrap_new_b2ClipVertex, METH_NOARGS, "\n"
		"new_b2ClipVertex() -> b2ClipVertex\n"
		"Used for computing contact manifolds.\n"
		""},
	 { "delete_b2ClipVertex", _wrap_delete_b2ClipVertex, METH_O, "delete_b2ClipVertex(b2ClipVertex self)"},
	 { "b2ClipVertex_swigregister", b2ClipVertex_swigregister, METH_O, NULL},
	 { "b2ClipVertex_swiginit", b2ClipVertex_swiginit, METH_VARARGS, NULL},
	 { "b2RayCastInput_p1_set", _wrap_b2RayCastInput_p1_set, METH_VARARGS, "b2RayCastInput_p1_set(b2RayCastInput self, b2Vec2 p1)"},
	 { "b2RayCastInput_p1_get", _wrap_b2RayCastInput_p1_get, METH_O, "b2RayCastInput_p1_get(b2RayCastInput self) -> b2Vec2"},
	 { "b2RayCastInput_p2_set", _wrap_b2RayCastInput_p2_set, METH_VARARGS, "b2RayCastInput_p2_set(b2RayCastInput self, b2Vec2 p2)"},
	 { "b2RayCastInput_p2_get", _wrap_b2RayCastInput_p2_get, METH_O, "b2RayCastInput_p2_get(b2RayCastInput self) -> b2Vec2"},
	 { "b2RayCastInput_maxFraction_set", _wrap_b2RayCastInput_maxFraction_set, METH_VARARGS, "b2RayCastInput_maxFraction_set(b2RayCastInput self, float32 maxFraction)"},
	 { "b2RayCastInput_maxFraction_get", _wrap_b2RayCastInput_maxFraction_get, METH_O, "b2RayCastInput_maxFraction_get(b2RayCastInput self) -> float32"},
	 { "b2RayCastInput___hash__", _wrap_b2RayCastInput___hash__, METH_O, "b2RayCastInput___hash__(b2RayCastInput self) -> long"},
	 { "new_b2RayCastInput", _wrap_new_b2RayCastInput, METH_NOARGS, "\n"
		"new_b2RayCastInput() -> b2RayCastInput\n"
		"Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n"
		""},
	 { "delete_b2RayCastInput", _wrap_delete_b2RayCastInput, METH_O, "delete_b2RayCastInput(b2RayCastInput self)"},
	 { "b2RayCastInput_swigregister", b2RayCastInput_swigregister, METH_O, NULL},
	 { "b2RayCastInput_swiginit", b2RayCastInput_swiginit, METH_VARARGS, NULL},
	 { "b2RayCastOutput_normal_set", _wrap_b2RayCastOutput_normal_set, METH_VARARGS, "b2RayCastOutput_normal_set(b2RayCastOutput self, b2Vec2 normal)"},
	 { "b2RayCastOutput_normal_get", _wrap_b2RayCastOutput_normal_get, METH_O, "b2RayCastOutput_normal_get(b2RayCastOutput self) -> b2Vec2"},
	 { "b2RayCastOutput_fraction_set", _wrap_b2RayCastOutput_fraction_set, METH_VARARGS, "b2RayCastOutput_fraction_set(b2RayCastOutput self, float32 fraction)"},
	 { "b2RayCastOutput_fraction_get", _wrap_b2RayCastOutput_fraction_get, METH_O, "b2RayCastOutput_fraction_get(b2RayCastOutput self) -> float32"},
	 { "b2RayCastOutput___hash__", _wrap_b2RayCastOutput___hash__, METH_O, "b2RayCastOutput___hash__(b2RayCastOutput self) -> long"},
	 { "new_b2RayCastOutput", _wrap_new_b2RayCastOutput, METH_NOARGS, "\n"
		"new_b2RayCastOutput() -> b2RayCastOutput\n"
		"Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from  b2RayCastInput.\n"
		""},
	 { "delete_b2RayCastOutput", _wrap_delete_b2RayCastOutput, METH_O, "delete_b2RayCastOutput(b2RayCastOutput self)"},
	 { "b2RayCastOutput_swigregister", b2RayCastOutput_swigregister, METH_O, NULL},
	 { "b2RayCastOutput_swiginit", b2RayCastOutput_swiginit, METH_VARARGS, NULL},
	 { "b2AABB___IsValid", _wrap_b2AABB___IsValid, METH_O, "\n"
		"b2AABB___IsValid(b2AABB self) -> bool\n"
		"Verify that the bounds are sorted.\n"
		""},
	 { "b2AABB___GetCenter", _wrap_b2AABB___GetCenter, METH_O, "\n"
		"b2AABB___GetCenter(b2AABB self) -> b2Vec2\n"
		"Get the center of the AABB.\n"
		""},
	 { "b2AABB___GetExtents", _wrap_b2AABB___GetExtents, METH_O, "\n"
		"b2AABB___GetExtents(b2AABB self) -> b2Vec2\n"
		"Get the extents of the AABB (half-widths).\n"
		""},
	 { "b2AABB___GetPerimeter", _wrap_b2AABB___GetPerimeter, METH_O, "\n"
		"b2AABB___GetPerimeter(b2AABB self) -> float32\n"
		"Get the perimeter length.\n"
		""},
	 { "b2AABB_Combine", _wrap_b2AABB_Combine, METH_VARARGS, "\n"
		"b2AABB_Combine(b2AABB self, b2AABB aabb)\n"
		"b2AABB_Combine(b2AABB self, b2AABB aabb1, b2AABB aabb2)\n"
		"Combine two AABBs into this one.\n"
		""},
	 { "b2AABB_RayCast", (PyCFunction)(void(*)(void))_wrap_b2AABB_RayCast, METH_VARARGS|METH_KEYWORDS, "b2AABB_RayCast(b2AABB self, b2RayCastOutput output, b2RayCastInput input) -> bool"},
	 { "b2AABB_lowerBound_set", _wrap_b2AABB_lowerBound_set, METH_VARARGS, "b2AABB_lowerBound_set(b2AABB self, b2Vec2 lowerBound)"},
	 { "b2AABB_lowerBound_get", _wrap_b2AABB_lowerBound_get, METH_O, "b2AABB_lowerBound_get(b2AABB self) -> b2Vec2"},
	 { "b2AABB_upperBound_set", _wrap_b2AABB_upperBound_set, METH_VARARGS, "b2AABB_upperBound_set(b2AABB self, b2Vec2 upperBound)"},
	 { "b2AABB_upperBound_get", _wrap_b2AABB_upperBound_get, METH_O, "b2AABB_upperBound_get(b2AABB self) -> b2Vec2"},
	 { "b2AABB___hash__", _wrap_b2AABB___hash__, METH_O, "b2AABB___hash__(b2AABB self) -> long"},
	 { "b2AABB___contains__", _wrap_b2AABB___contains__, METH_VARARGS, "\n"
		"b2AABB___contains__(b2AABB self, b2AABB aabb) -> bool\n"
		"b2AABB___contains__(b2AABB self, b2Vec2 point) -> bool\n"
		"Does this aabb contain the provided AABB.\n"
		""},
	 { "b2AABB_overlaps", (PyCFunction)(void(*)(void))_wrap_b2AABB_overlaps, METH_VARARGS|METH_KEYWORDS, "b2AABB_overlaps(b2AABB self, b2AABB aabb2) -> bool"},
	 { "new_b2AABB", _wrap_new_b2AABB, METH_NOARGS, "\n"
		"new_b2AABB() -> b2AABB\n"
		"An axis aligned bounding box.\n"
		""},
	 { "delete_b2AABB", _wrap_delete_b2AABB, METH_O, "delete_b2AABB(b2AABB self)"},
	 { "b2AABB_swigregister", b2AABB_swigregister, METH_O, NULL},
	 { "b2AABB_swiginit", b2AABB_swiginit, METH_VARARGS, NULL},
	 { "b2CollideCircles", (PyCFunction)(void(*)(void))_wrap_b2CollideCircles, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideCircles(b2Manifold manifold, b2CircleShape circleA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between two circles.\n"
		""},
	 { "b2CollidePolygonAndCircle", (PyCFunction)(void(*)(void))_wrap_b2CollidePolygonAndCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollidePolygonAndCircle(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between a polygon and a circle.\n"
		""},
	 { "b2CollidePolygons", (PyCFunction)(void(*)(void))_wrap_b2CollidePolygons, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollidePolygons(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2PolygonShape polygonB, b2Transform xfB)\n"
		"Compute the collision manifold between two polygons.\n"
		""},
	 { "b2CollideEdgeAndCircle", (PyCFunction)(void(*)(void))_wrap_b2CollideEdgeAndCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideEdgeAndCircle(b2Manifold manifold, b2EdgeShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between an edge and a circle.\n"
		""},
	 { "b2CollideEdgeAndPolygon", (PyCFunction)(void(*)(void))_wrap_b2CollideEdgeAndPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideEdgeAndPolygon(b2Manifold manifold, b2EdgeShape edgeA, b2Transform xfA, b2PolygonShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between an edge and a circle.\n"
		""},
	 { "b2ClipSegmentToLine", (PyCFunction)(void(*)(void))_wrap_b2ClipSegmentToLine, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ClipSegmentToLine(b2ClipVertex vOut, b2ClipVertex vIn, b2Vec2 normal, float32 offset, int32 vertexIndexA) -> int32\n"
		"Clipping for contact manifolds.\n"
		""},
	 { "b2TestOverlap", _wrap_b2TestOverlap, METH_VARARGS, "\n"
		"b2TestOverlap(b2Shape shapeA, int32 indexA, b2Shape shapeB, int32 indexB, b2Transform xfA, b2Transform xfB) -> bool\n"
		"b2TestOverlap(b2AABB a, b2AABB b) -> bool\n"
		"Determine if two generic shapes overlap.\n"
		""},
	 { "new__b2Vec2Array", (PyCFunction)(void(*)(void))_wrap_new__b2Vec2Array, METH_VARARGS|METH_KEYWORDS, "new__b2Vec2Array(size_t nelements) -> _b2Vec2Array"},
	 { "delete__b2Vec2Array", _wrap_delete__b2Vec2Array, METH_O, "delete__b2Vec2Array(_b2Vec2Array self)"},
	 { "_b2Vec2Array___getitem__", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array___getitem__, METH_VARARGS|METH_KEYWORDS, "_b2Vec2Array___getitem__(_b2Vec2Array self, size_t index) -> b2Vec2"},
	 { "_b2Vec2Array___setitem__", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array___setitem__, METH_VARARGS|METH_KEYWORDS, "_b2Vec2Array___setitem__(_b2Vec2Array self, size_t index, b2Vec2 value)"},
	 { "_b2Vec2Array_cast", _wrap__b2Vec2Array_cast, METH_O, "_b2Vec2Array_cast(_b2Vec2Array self) -> b2Vec2"},
	 { "_b2Vec2Array_frompointer", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array_frompointer, METH_VARARGS|METH_KEYWORDS, "_b2Vec2Array_frompointer(b2Vec2 t) -> _b2Vec2Array"},
	 { "_b2Vec2Array_swigregister", _b2Vec2Array_swigregister, METH_O, NULL},
	 { "_b2Vec2Array_swiginit", _b2Vec2Array_swiginit, METH_VARARGS, NULL},
	 { "b2Color_Set", (PyCFunction)(void(*)(void))_wrap_b2Color_Set, METH_VARARGS|METH_KEYWORDS, "b2Color_Set(b2Color self, float32 ri, float32 gi, float32 bi)"},
	 { "b2Color_r_set", _wrap_b2Color_r_set, METH_VARARGS, "b2Color_r_set(b2Color self, float32 r)"},
	 { "b2Color_r_get", _wrap_b2Color_r_get, METH_O, "b2Color_r_get(b2Color self) -> float32"},
	 { "b2Color_g_set", _wrap_b2Color_g_set, METH_VARARGS, "b2Color_g_set(b2Color self, float32 g)"},
	 { "b2Color_g_get", _wrap_b2Color_g_get, METH_O, "b2Color_g_get(b2Color self) -> float32"},
	 { "b2Color_b_set", _wrap_b2Color_b_set, METH_VARARGS, "b2Color_b_set(b2Color self, float32 b)"},
	 { "b2Color_b_get", _wrap_b2Color_b_get, METH_O, "b2Color_b_get(b2Color self) -> float32"},
	 { "b2Color___hash__", _wrap_b2Color___hash__, METH_O, "b2Color___hash__(b2Color self) -> long"},
	 { "new_b2Color", _wrap_new_b2Color, METH_VARARGS, "\n"
		"b2Color()\n"
		"b2Color(float32 r, float32 g, float32 b)\n"
		"new_b2Color(b2Color other) -> b2Color\n"
		"Color for debug drawing. Each value has the range [0,1].\n"
		""},
	 { "b2Color___get_bytes", _wrap_b2Color___get_bytes, METH_O, "b2Color___get_bytes(b2Color self) -> PyObject *"},
	 { "b2Color___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Color___getitem__, METH_VARARGS|METH_KEYWORDS, "b2Color___getitem__(b2Color self, int i) -> float32"},
	 { "b2Color___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Color___setitem__, METH_VARARGS|METH_KEYWORDS, "b2Color___setitem__(b2Color self, int i, float32 value)"},
	 { "b2Color___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Color___truediv__, METH_VARARGS|METH_KEYWORDS, "b2Color___truediv__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___add__", (PyCFunction)(void(*)(void))_wrap_b2Color___add__, METH_VARARGS|METH_KEYWORDS, "b2Color___add__(b2Color self, b2Color o) -> b2Color"},
	 { "b2Color___sub__", (PyCFunction)(void(*)(void))_wrap_b2Color___sub__, METH_VARARGS|METH_KEYWORDS, "b2Color___sub__(b2Color self, b2Color o) -> b2Color"},
	 { "b2Color___div__", (PyCFunction)(void(*)(void))_wrap_b2Color___div__, METH_VARARGS|METH_KEYWORDS, "b2Color___div__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Color___rmul__, METH_VARARGS|METH_KEYWORDS, "b2Color___rmul__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___mul__", (PyCFunction)(void(*)(void))_wrap_b2Color___mul__, METH_VARARGS|METH_KEYWORDS, "b2Color___mul__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___isub", (PyCFunction)(void(*)(void))_wrap_b2Color___isub, METH_VARARGS|METH_KEYWORDS, "b2Color___isub(b2Color self, b2Color o)"},
	 { "b2Color___itruediv", (PyCFunction)(void(*)(void))_wrap_b2Color___itruediv, METH_VARARGS|METH_KEYWORDS, "b2Color___itruediv(b2Color self, b2Color o)"},
	 { "b2Color___idiv", (PyCFunction)(void(*)(void))_wrap_b2Color___idiv, METH_VARARGS|METH_KEYWORDS, "b2Color___idiv(b2Color self, b2Color o)"},
	 { "b2Color___imul", (PyCFunction)(void(*)(void))_wrap_b2Color___imul, METH_VARARGS|METH_KEYWORDS, "b2Color___imul(b2Color self, b2Color o)"},
	 { "b2Color___iadd", (PyCFunction)(void(*)(void))_wrap_b2Color___iadd, METH_VARARGS|METH_KEYWORDS, "b2Color___iadd(b2Color self, b2Color o)"},
	 { "b2Color___equ", (PyCFunction)(void(*)(void))_wrap_b2Color___equ, METH_VARARGS|METH_KEYWORDS, "b2Color___equ(b2Color self, b2Color b) -> bool"},
	 { "delete_b2Color", _wrap_delete_b2Color, METH_O, "delete_b2Color(b2Color self)"},
	 { "b2Color_swigregister", b2Color_swigregister, METH_O, NULL},
	 { "b2Color_swiginit", b2Color_swiginit, METH_VARARGS, NULL},
	 { "new_b2Draw", (PyCFunction)(void(*)(void))_wrap_new_b2Draw, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2Draw(PyObject * _self) -> b2Draw\n"
		"Implement and register this class with a  b2Worldto provide debug drawing of physics entities in your game.\n"
		""},
	 { "delete_b2Draw", _wrap_delete_b2Draw, METH_O, "delete_b2Draw(b2Draw self)"},
	 { "b2Draw___SetFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw___SetFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw___SetFlags(b2Draw self, uint32 flags)\n"
		"Set the drawing flags.\n"
		""},
	 { "b2Draw___GetFlags", _wrap_b2Draw___GetFlags, METH_O, "\n"
		"b2Draw___GetFlags(b2Draw self) -> uint32\n"
		"Get the drawing flags.\n"
		""},
	 { "b2Draw_AppendFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw_AppendFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_AppendFlags(b2Draw self, uint32 flags)\n"
		"Append flags to the current flags.\n"
		""},
	 { "b2Draw_ClearFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw_ClearFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_ClearFlags(b2Draw self, uint32 flags)\n"
		"Clear flags from the current flags.\n"
		""},
	 { "b2Draw_DrawPolygon", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawPolygon(b2Draw self, b2Vec2 vertices, int32 vertexCount, b2Color color)\n"
		"Draw a closed polygon provided in CCW order.\n"
		""},
	 { "b2Draw_DrawSolidPolygon", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSolidPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawSolidPolygon(b2Draw self, b2Vec2 vertices, int32 vertexCount, b2Color color)\n"
		"Draw a solid closed polygon provided in CCW order.\n"
		""},
	 { "b2Draw_DrawCircle", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawCircle(b2Draw self, b2Vec2 center, float32 radius, b2Color color)\n"
		"Draw a circle.\n"
		""},
	 { "b2Draw_DrawSolidCircle", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSolidCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawSolidCircle(b2Draw self, b2Vec2 center, float32 radius, b2Vec2 axis, b2Color color)\n"
		"Draw a solid circle.\n"
		""},
	 { "b2Draw_DrawSegment", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSegment, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawSegment(b2Draw self, b2Vec2 p1, b2Vec2 p2, b2Color color)\n"
		"Draw a line segment.\n"
		""},
	 { "b2Draw_DrawTransform", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Draw_DrawTransform(b2Draw self, b2Transform xf)\n"
		"Draw a transform. Choose your own length scale.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"a transform.\n"
		""},
	 { "b2Draw___hash__", _wrap_b2Draw___hash__, METH_O, "b2Draw___hash__(b2Draw self) -> long"},
	 { "disown_b2Draw", (PyCFunction)(void(*)(void))_wrap_disown_b2Draw, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2Draw_swigregister", b2Draw_swigregister, METH_O, NULL},
	 { "b2Draw_swiginit", b2Draw_swiginit, METH_VARARGS, NULL},
	 { "b2DrawExtended_convertVertices_set", _wrap_b2DrawExtended_convertVertices_set, METH_VARARGS, "b2DrawExtended_convertVertices_set(b2DrawExtended self, bool convertVertices)"},
	 { "b2DrawExtended_convertVertices_get", _wrap_b2DrawExtended_convertVertices_get, METH_O, "b2DrawExtended_convertVertices_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended_center_set", _wrap_b2DrawExtended_center_set, METH_VARARGS, "b2DrawExtended_center_set(b2DrawExtended self, b2Vec2 center)"},
	 { "b2DrawExtended_center_get", _wrap_b2DrawExtended_center_get, METH_O, "b2DrawExtended_center_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_offset_set", _wrap_b2DrawExtended_offset_set, METH_VARARGS, "b2DrawExtended_offset_set(b2DrawExtended self, b2Vec2 offset)"},
	 { "b2DrawExtended_offset_get", _wrap_b2DrawExtended_offset_get, METH_O, "b2DrawExtended_offset_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_zoom_set", _wrap_b2DrawExtended_zoom_set, METH_VARARGS, "b2DrawExtended_zoom_set(b2DrawExtended self, float32 zoom)"},
	 { "b2DrawExtended_zoom_get", _wrap_b2DrawExtended_zoom_get, METH_O, "b2DrawExtended_zoom_get(b2DrawExtended self) -> float32"},
	 { "b2DrawExtended_screenSize_set", _wrap_b2DrawExtended_screenSize_set, METH_VARARGS, "b2DrawExtended_screenSize_set(b2DrawExtended self, b2Vec2 screenSize)"},
	 { "b2DrawExtended_screenSize_get", _wrap_b2DrawExtended_screenSize_get, METH_O, "b2DrawExtended_screenSize_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_flipY_set", _wrap_b2DrawExtended_flipY_set, METH_VARARGS, "b2DrawExtended_flipY_set(b2DrawExtended self, bool flipY)"},
	 { "b2DrawExtended_flipY_get", _wrap_b2DrawExtended_flipY_get, METH_O, "b2DrawExtended_flipY_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended_flipX_set", _wrap_b2DrawExtended_flipX_set, METH_VARARGS, "b2DrawExtended_flipX_set(b2DrawExtended self, bool flipX)"},
	 { "b2DrawExtended_flipX_get", _wrap_b2DrawExtended_flipX_get, METH_O, "b2DrawExtended_flipX_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended___Convert", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended___Convert, METH_VARARGS|METH_KEYWORDS, "b2DrawExtended___Convert(b2DrawExtended self, b2Vec2 verts, int32 vertexCount) -> PyObject *"},
	 { "b2DrawExtended_to_screen", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_to_screen, METH_VARARGS|METH_KEYWORDS, "b2DrawExtended_to_screen(b2DrawExtended self, b2Vec2 point) -> PyObject *"},
	 { "b2DrawExtended_DrawPolygon", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawPolygon(b2DrawExtended self, b2Vec2 conv_vertices, int32 vertexCount, b2Color color)\n"
		"Draw a closed polygon provided in CCW order.\n"
		""},
	 { "b2DrawExtended_DrawSolidPolygon", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSolidPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawSolidPolygon(b2DrawExtended self, b2Vec2 conv_vertices, int32 vertexCount, b2Color color)\n"
		"Draw a solid closed polygon provided in CCW order.\n"
		""},
	 { "b2DrawExtended_DrawCircle", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawCircle(b2DrawExtended self, b2Vec2 conv_p1, float32 radius, b2Color color)\n"
		"Draw a circle.\n"
		""},
	 { "b2DrawExtended_DrawSolidCircle", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSolidCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawSolidCircle(b2DrawExtended self, b2Vec2 conv_p1, float32 radius, b2Vec2 axis, b2Color color)\n"
		"Draw a solid circle.\n"
		""},
	 { "b2DrawExtended_DrawSegment", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSegment, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawSegment(b2DrawExtended self, b2Vec2 conv_p1, b2Vec2 conv_p2, b2Color color)\n"
		"Draw a line segment.\n"
		""},
	 { "b2DrawExtended_DrawTransform", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DrawExtended_DrawTransform(b2DrawExtended self, b2Transform xf)\n"
		"Draw a transform. Choose your own length scale.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"a transform.\n"
		""},
	 { "b2DrawExtended___SetFlags", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended___SetFlags, METH_VARARGS|METH_KEYWORDS, "b2DrawExtended___SetFlags(b2DrawExtended self, uint32 flags)"},
	 { "delete_b2DrawExtended", _wrap_delete_b2DrawExtended, METH_O, "delete_b2DrawExtended(b2DrawExtended self)"},
	 { "new_b2DrawExtended", (PyCFunction)(void(*)(void))_wrap_new_b2DrawExtended, METH_VARARGS|METH_KEYWORDS, "new_b2DrawExtended(PyObject * _self) -> b2DrawExtended"},
	 { "b2DrawExtended___hash__", _wrap_b2DrawExtended___hash__, METH_O, "b2DrawExtended___hash__(b2DrawExtended self) -> long"},
	 { "disown_b2DrawExtended", (PyCFunction)(void(*)(void))_wrap_disown_b2DrawExtended, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2DrawExtended_swigregister", b2DrawExtended_swigregister, METH_O, NULL},
	 { "b2DrawExtended_swiginit", b2DrawExtended_swiginit, METH_VARARGS, NULL},
	 { "b2MassData_mass_set", _wrap_b2MassData_mass_set, METH_VARARGS, "b2MassData_mass_set(b2MassData self, float32 mass)"},
	 { "b2MassData_mass_get", _wrap_b2MassData_mass_get, METH_O, "b2MassData_mass_get(b2MassData self) -> float32"},
	 { "b2MassData_center_set", _wrap_b2MassData_center_set, METH_VARARGS, "b2MassData_center_set(b2MassData self, b2Vec2 center)"},
	 { "b2MassData_center_get", _wrap_b2MassData_center_get, METH_O, "b2MassData_center_get(b2MassData self) -> b2Vec2"},
	 { "b2MassData_I_set", _wrap_b2MassData_I_set, METH_VARARGS, "b2MassData_I_set(b2MassData self, float32 I)"},
	 { "b2MassData_I_get", _wrap_b2MassData_I_get, METH_O, "b2MassData_I_get(b2MassData self) -> float32"},
	 { "b2MassData___hash__", _wrap_b2MassData___hash__, METH_O, "b2MassData___hash__(b2MassData self) -> long"},
	 { "new_b2MassData", _wrap_new_b2MassData, METH_NOARGS, "\n"
		"new_b2MassData() -> b2MassData\n"
		"This holds the mass data computed for a shape.\n"
		""},
	 { "delete_b2MassData", _wrap_delete_b2MassData, METH_O, "delete_b2MassData(b2MassData self)"},
	 { "b2MassData_swigregister", b2MassData_swigregister, METH_O, NULL},
	 { "b2MassData_swiginit", b2MassData_swiginit, METH_VARARGS, NULL},
	 { "delete_b2Shape", _wrap_delete_b2Shape, METH_O, "delete_b2Shape(b2Shape self)"},
	 { "b2Shape___GetType", _wrap_b2Shape___GetType, METH_O, "\n"
		"b2Shape___GetType(b2Shape self) -> b2Shape::Type\n"
		"Get the type of this shape. You can use this to down cast to the concrete shape. \n"
		"the shape type.\n"
		""},
	 { "b2Shape___GetChildCount", _wrap_b2Shape___GetChildCount, METH_O, "\n"
		"b2Shape___GetChildCount(b2Shape self) -> int32\n"
		"Get the number of child primitives.\n"
		""},
	 { "b2Shape_TestPoint", (PyCFunction)(void(*)(void))_wrap_b2Shape_TestPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Shape_TestPoint(b2Shape self, b2Transform xf, b2Vec2 p) -> bool\n"
		"Test a point for containment in this shape. This only works for convex shapes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"the shape world transform.\n"
		"\n"
		"p: \n"
		"a point in world coordinates.\n"
		""},
	 { "b2Shape_RayCast", (PyCFunction)(void(*)(void))_wrap_b2Shape_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Shape_RayCast(b2Shape self, b2RayCastOutput output, b2RayCastInput input, b2Transform transform, int32 childIndex) -> bool\n"
		"Cast a ray against a child shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"output: \n"
		"the ray-cast results.\n"
		"\n"
		"input: \n"
		"the ray-cast input parameters.\n"
		"\n"
		"transform: \n"
		"the transform to be applied to the shape.\n"
		"\n"
		"childIndex: \n"
		"the child shape index\n"
		""},
	 { "b2Shape___ComputeAABB", (PyCFunction)(void(*)(void))_wrap_b2Shape___ComputeAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Shape___ComputeAABB(b2Shape self, b2AABB aabb, b2Transform xf, int32 childIndex)\n"
		"Given a transform, compute the associated axis aligned bounding box for a child shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"aabb: \n"
		"returns the axis aligned box.\n"
		"\n"
		"xf: \n"
		"the world transform of the shape.\n"
		"\n"
		"childIndex: \n"
		"the child shape\n"
		""},
	 { "b2Shape___ComputeMass", (PyCFunction)(void(*)(void))_wrap_b2Shape___ComputeMass, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Shape___ComputeMass(b2Shape self, b2MassData massData, float32 density)\n"
		"Compute the mass properties of this shape using its dimensions and density. The inertia tensor is computed about the local origin.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: \n"
		"returns the mass data for this shape.\n"
		"\n"
		"density: \n"
		"the density in kilograms per meter squared.\n"
		""},
	 { "b2Shape_radius_set", _wrap_b2Shape_radius_set, METH_VARARGS, "b2Shape_radius_set(b2Shape self, float32 m_radius)"},
	 { "b2Shape_radius_get", _wrap_b2Shape_radius_get, METH_O, "b2Shape_radius_get(b2Shape self) -> float32"},
	 { "b2Shape___hash__", _wrap_b2Shape___hash__, METH_O, "b2Shape___hash__(b2Shape self) -> long"},
	 { "b2Shape_swigregister", b2Shape_swigregister, METH_O, NULL},
	 { "new_b2CircleShape", _wrap_new_b2CircleShape, METH_NOARGS, "\n"
		"new_b2CircleShape() -> b2CircleShape\n"
		"A circle shape.\n"
		""},
	 { "b2CircleShape_pos_set", _wrap_b2CircleShape_pos_set, METH_VARARGS, "b2CircleShape_pos_set(b2CircleShape self, b2Vec2 m_p)"},
	 { "b2CircleShape_pos_get", _wrap_b2CircleShape_pos_get, METH_O, "b2CircleShape_pos_get(b2CircleShape self) -> b2Vec2"},
	 { "b2CircleShape___hash__", _wrap_b2CircleShape___hash__, METH_O, "b2CircleShape___hash__(b2CircleShape self) -> long"},
	 { "delete_b2CircleShape", _wrap_delete_b2CircleShape, METH_O, "delete_b2CircleShape(b2CircleShape self)"},
	 { "b2CircleShape_swigregister", b2CircleShape_swigregister, METH_O, NULL},
	 { "b2CircleShape_swiginit", b2CircleShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2EdgeShape", _wrap_new_b2EdgeShape, METH_NOARGS, "\n"
		"new_b2EdgeShape() -> b2EdgeShape\n"
		"A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. The connectivity information is used to ensure correct contact normals.\n"
		""},
	 { "b2EdgeShape___Set", (PyCFunction)(void(*)(void))_wrap_b2EdgeShape___Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2EdgeShape___Set(b2EdgeShape self, b2Vec2 v1, b2Vec2 v2)\n"
		"Set this as an isolated edge.\n"
		""},
	 { "b2EdgeShape_vertex1_set", _wrap_b2EdgeShape_vertex1_set, METH_VARARGS, "b2EdgeShape_vertex1_set(b2EdgeShape self, b2Vec2 m_vertex1)"},
	 { "b2EdgeShape_vertex1_get", _wrap_b2EdgeShape_vertex1_get, METH_O, "b2EdgeShape_vertex1_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex2_set", _wrap_b2EdgeShape_vertex2_set, METH_VARARGS, "b2EdgeShape_vertex2_set(b2EdgeShape self, b2Vec2 m_vertex2)"},
	 { "b2EdgeShape_vertex2_get", _wrap_b2EdgeShape_vertex2_get, METH_O, "b2EdgeShape_vertex2_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex0_set", _wrap_b2EdgeShape_vertex0_set, METH_VARARGS, "b2EdgeShape_vertex0_set(b2EdgeShape self, b2Vec2 m_vertex0)"},
	 { "b2EdgeShape_vertex0_get", _wrap_b2EdgeShape_vertex0_get, METH_O, "b2EdgeShape_vertex0_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex3_set", _wrap_b2EdgeShape_vertex3_set, METH_VARARGS, "b2EdgeShape_vertex3_set(b2EdgeShape self, b2Vec2 m_vertex3)"},
	 { "b2EdgeShape_vertex3_get", _wrap_b2EdgeShape_vertex3_get, METH_O, "b2EdgeShape_vertex3_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_hasVertex0_set", _wrap_b2EdgeShape_hasVertex0_set, METH_VARARGS, "b2EdgeShape_hasVertex0_set(b2EdgeShape self, bool m_hasVertex0)"},
	 { "b2EdgeShape_hasVertex0_get", _wrap_b2EdgeShape_hasVertex0_get, METH_O, "b2EdgeShape_hasVertex0_get(b2EdgeShape self) -> bool"},
	 { "b2EdgeShape_hasVertex3_set", _wrap_b2EdgeShape_hasVertex3_set, METH_VARARGS, "b2EdgeShape_hasVertex3_set(b2EdgeShape self, bool m_hasVertex3)"},
	 { "b2EdgeShape_hasVertex3_get", _wrap_b2EdgeShape_hasVertex3_get, METH_O, "b2EdgeShape_hasVertex3_get(b2EdgeShape self) -> bool"},
	 { "b2EdgeShape___hash__", _wrap_b2EdgeShape___hash__, METH_O, "b2EdgeShape___hash__(b2EdgeShape self) -> long"},
	 { "delete_b2EdgeShape", _wrap_delete_b2EdgeShape, METH_O, "delete_b2EdgeShape(b2EdgeShape self)"},
	 { "b2EdgeShape_swigregister", b2EdgeShape_swigregister, METH_O, NULL},
	 { "b2EdgeShape_swiginit", b2EdgeShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2ChainShape", _wrap_new_b2ChainShape, METH_NOARGS, "\n"
		"new_b2ChainShape() -> b2ChainShape\n"
		"A loop shape is a free form sequence of line segments that form a circular list. The loop may cross upon itself, but this is not recommended for smooth collision. The loop has double sided collision, so you can use inside and outside collision. Therefore, you may use any winding order. Since there may be many vertices, they are allocated using b2Alloc.\n"
		""},
	 { "delete_b2ChainShape", _wrap_delete_b2ChainShape, METH_O, "\n"
		"delete_b2ChainShape(b2ChainShape self)\n"
		"The destructor frees the vertices using b2Free.\n"
		""},
	 { "b2ChainShape_CreateLoop", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_CreateLoop, METH_VARARGS|METH_KEYWORDS, "b2ChainShape_CreateLoop(b2ChainShape self, b2Vec2 vertices, int32 count)"},
	 { "b2ChainShape_CreateChain", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_CreateChain, METH_VARARGS|METH_KEYWORDS, "b2ChainShape_CreateChain(b2ChainShape self, b2Vec2 vertices, int32 count)"},
	 { "b2ChainShape_SetPrevVertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_SetPrevVertex, METH_VARARGS|METH_KEYWORDS, "b2ChainShape_SetPrevVertex(b2ChainShape self, b2Vec2 prevVertex)"},
	 { "b2ChainShape_SetNextVertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_SetNextVertex, METH_VARARGS|METH_KEYWORDS, "b2ChainShape_SetNextVertex(b2ChainShape self, b2Vec2 nextVertex)"},
	 { "b2ChainShape___GetChildEdge", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___GetChildEdge, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ChainShape___GetChildEdge(b2ChainShape self, b2EdgeShape edge, int32 index)\n"
		"Get a child edge.\n"
		""},
	 { "b2ChainShape_m_prevVertex_set", _wrap_b2ChainShape_m_prevVertex_set, METH_VARARGS, "b2ChainShape_m_prevVertex_set(b2ChainShape self, b2Vec2 m_prevVertex)"},
	 { "b2ChainShape_m_prevVertex_get", _wrap_b2ChainShape_m_prevVertex_get, METH_O, "b2ChainShape_m_prevVertex_get(b2ChainShape self) -> b2Vec2"},
	 { "b2ChainShape_m_nextVertex_set", _wrap_b2ChainShape_m_nextVertex_set, METH_VARARGS, "b2ChainShape_m_nextVertex_set(b2ChainShape self, b2Vec2 m_nextVertex)"},
	 { "b2ChainShape_m_nextVertex_get", _wrap_b2ChainShape_m_nextVertex_get, METH_O, "b2ChainShape_m_nextVertex_get(b2ChainShape self) -> b2Vec2"},
	 { "b2ChainShape_m_hasPrevVertex_set", _wrap_b2ChainShape_m_hasPrevVertex_set, METH_VARARGS, "b2ChainShape_m_hasPrevVertex_set(b2ChainShape self, bool m_hasPrevVertex)"},
	 { "b2ChainShape_m_hasPrevVertex_get", _wrap_b2ChainShape_m_hasPrevVertex_get, METH_O, "b2ChainShape_m_hasPrevVertex_get(b2ChainShape self) -> bool"},
	 { "b2ChainShape_m_hasNextVertex_set", _wrap_b2ChainShape_m_hasNextVertex_set, METH_VARARGS, "b2ChainShape_m_hasNextVertex_set(b2ChainShape self, bool m_hasNextVertex)"},
	 { "b2ChainShape_m_hasNextVertex_get", _wrap_b2ChainShape_m_hasNextVertex_get, METH_O, "b2ChainShape_m_hasNextVertex_get(b2ChainShape self) -> bool"},
	 { "b2ChainShape___hash__", _wrap_b2ChainShape___hash__, METH_O, "b2ChainShape___hash__(b2ChainShape self) -> long"},
	 { "b2ChainShape___get_vertices", _wrap_b2ChainShape___get_vertices, METH_O, "b2ChainShape___get_vertices(b2ChainShape self) -> PyObject *"},
	 { "b2ChainShape___create", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___create, METH_VARARGS|METH_KEYWORDS, "b2ChainShape___create(b2ChainShape self, _b2Vec2Array v, int c, bool loop)"},
	 { "b2ChainShape___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___get_vertex, METH_VARARGS|METH_KEYWORDS, "b2ChainShape___get_vertex(b2ChainShape self, uint16 vnum) -> b2Vec2"},
	 { "b2ChainShape___get_count", _wrap_b2ChainShape___get_count, METH_O, "b2ChainShape___get_count(b2ChainShape self) -> int32"},
	 { "b2ChainShape_swigregister", b2ChainShape_swigregister, METH_O, NULL},
	 { "b2ChainShape_swiginit", b2ChainShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2PolygonShape", _wrap_new_b2PolygonShape, METH_NOARGS, "\n"
		"new_b2PolygonShape() -> b2PolygonShape\n"
		"A convex polygon. It is assumed that the interior of the polygon is to the left of each edge. Polygons have a maximum number of vertices equal to b2_maxPolygonVertices. In most cases you should not need many vertices for a convex polygon.\n"
		""},
	 { "b2PolygonShape_SetAsBox", _wrap_b2PolygonShape_SetAsBox, METH_VARARGS, "\n"
		"b2PolygonShape_SetAsBox(b2PolygonShape self, float32 hx, float32 hy)\n"
		"b2PolygonShape_SetAsBox(b2PolygonShape self, float32 hx, float32 hy, b2Vec2 center, float32 angle)\n"
		"Build vertices to represent an oriented box.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"hx: \n"
		"the half-width.\n"
		"\n"
		"hy: \n"
		"the half-height.\n"
		"\n"
		"center: \n"
		"the center of the box in local coordinates.\n"
		"\n"
		"angle: \n"
		"the rotation of the box in local coordinates.\n"
		""},
	 { "b2PolygonShape_Validate", _wrap_b2PolygonShape_Validate, METH_O, "b2PolygonShape_Validate(b2PolygonShape self) -> bool"},
	 { "b2PolygonShape_centroid_set", _wrap_b2PolygonShape_centroid_set, METH_VARARGS, "b2PolygonShape_centroid_set(b2PolygonShape self, b2Vec2 m_centroid)"},
	 { "b2PolygonShape_centroid_get", _wrap_b2PolygonShape_centroid_get, METH_O, "b2PolygonShape_centroid_get(b2PolygonShape self) -> b2Vec2"},
	 { "b2PolygonShape_vertexCount_set", _wrap_b2PolygonShape_vertexCount_set, METH_VARARGS, "b2PolygonShape_vertexCount_set(b2PolygonShape self, int32 m_count)"},
	 { "b2PolygonShape_vertexCount_get", _wrap_b2PolygonShape_vertexCount_get, METH_O, "b2PolygonShape_vertexCount_get(b2PolygonShape self) -> int32"},
	 { "b2PolygonShape___hash__", _wrap_b2PolygonShape___hash__, METH_O, "b2PolygonShape___hash__(b2PolygonShape self) -> long"},
	 { "b2PolygonShape___get_vertices", _wrap_b2PolygonShape___get_vertices, METH_O, "b2PolygonShape___get_vertices(b2PolygonShape self) -> PyObject *"},
	 { "b2PolygonShape___get_normals", _wrap_b2PolygonShape___get_normals, METH_O, "b2PolygonShape___get_normals(b2PolygonShape self) -> PyObject *"},
	 { "b2PolygonShape___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2PolygonShape___get_vertex, METH_VARARGS|METH_KEYWORDS, "b2PolygonShape___get_vertex(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { "b2PolygonShape___get_normal", (PyCFunction)(void(*)(void))_wrap_b2PolygonShape___get_normal, METH_VARARGS|METH_KEYWORDS, "b2PolygonShape___get_normal(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { "b2PolygonShape_set_vertex", _wrap_b2PolygonShape_set_vertex, METH_VARARGS, "\n"
		"b2PolygonShape_set_vertex(b2PolygonShape self, uint16 vnum, b2Vec2 value)\n"
		"b2PolygonShape_set_vertex(b2PolygonShape self, uint16 vnum, float32 x, float32 y)\n"
		""},
	 { "b2PolygonShape___set_vertices_internal", _wrap_b2PolygonShape___set_vertices_internal, METH_VARARGS, "\n"
		"b2PolygonShape___set_vertices_internal(b2PolygonShape self, b2Vec2 points, int32 count)\n"
		"b2PolygonShape___set_vertices_internal(b2PolygonShape self)\n"
		"Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge. The count must be in the range [3, b2_maxPolygonVertices].\n"
		""},
	 { "delete_b2PolygonShape", _wrap_delete_b2PolygonShape, METH_O, "delete_b2PolygonShape(b2PolygonShape self)"},
	 { "b2PolygonShape_swigregister", b2PolygonShape_swigregister, METH_O, NULL},
	 { "b2PolygonShape_swiginit", b2PolygonShape_swiginit, METH_VARARGS, NULL},
	 { "b2TreeNode_IsLeaf", _wrap_b2TreeNode_IsLeaf, METH_O, "b2TreeNode_IsLeaf(b2TreeNode self) -> bool"},
	 { "b2TreeNode_aabb_set", _wrap_b2TreeNode_aabb_set, METH_VARARGS, "b2TreeNode_aabb_set(b2TreeNode self, b2AABB aabb)"},
	 { "b2TreeNode_aabb_get", _wrap_b2TreeNode_aabb_get, METH_O, "b2TreeNode_aabb_get(b2TreeNode self) -> b2AABB"},
	 { "b2TreeNode_child1_set", _wrap_b2TreeNode_child1_set, METH_VARARGS, "b2TreeNode_child1_set(b2TreeNode self, int32 child1)"},
	 { "b2TreeNode_child1_get", _wrap_b2TreeNode_child1_get, METH_O, "b2TreeNode_child1_get(b2TreeNode self) -> int32"},
	 { "b2TreeNode_child2_set", _wrap_b2TreeNode_child2_set, METH_VARARGS, "b2TreeNode_child2_set(b2TreeNode self, int32 child2)"},
	 { "b2TreeNode_child2_get", _wrap_b2TreeNode_child2_get, METH_O, "b2TreeNode_child2_get(b2TreeNode self) -> int32"},
	 { "b2TreeNode_height_set", _wrap_b2TreeNode_height_set, METH_VARARGS, "b2TreeNode_height_set(b2TreeNode self, int32 height)"},
	 { "b2TreeNode_height_get", _wrap_b2TreeNode_height_get, METH_O, "b2TreeNode_height_get(b2TreeNode self) -> int32"},
	 { "new_b2TreeNode", _wrap_new_b2TreeNode, METH_NOARGS, "new_b2TreeNode() -> b2TreeNode"},
	 { "delete_b2TreeNode", _wrap_delete_b2TreeNode, METH_O, "delete_b2TreeNode(b2TreeNode self)"},
	 { "b2TreeNode_swigregister", b2TreeNode_swigregister, METH_O, NULL},
	 { "b2TreeNode_swiginit", b2TreeNode_swiginit, METH_VARARGS, NULL},
	 { "b2Pair_proxyIdA_set", _wrap_b2Pair_proxyIdA_set, METH_VARARGS, "b2Pair_proxyIdA_set(b2Pair self, int32 proxyIdA)"},
	 { "b2Pair_proxyIdA_get", _wrap_b2Pair_proxyIdA_get, METH_O, "b2Pair_proxyIdA_get(b2Pair self) -> int32"},
	 { "b2Pair_proxyIdB_set", _wrap_b2Pair_proxyIdB_set, METH_VARARGS, "b2Pair_proxyIdB_set(b2Pair self, int32 proxyIdB)"},
	 { "b2Pair_proxyIdB_get", _wrap_b2Pair_proxyIdB_get, METH_O, "b2Pair_proxyIdB_get(b2Pair self) -> int32"},
	 { "b2Pair___hash__", _wrap_b2Pair___hash__, METH_O, "b2Pair___hash__(b2Pair self) -> long"},
	 { "new_b2Pair", _wrap_new_b2Pair, METH_NOARGS, "new_b2Pair() -> b2Pair"},
	 { "delete_b2Pair", _wrap_delete_b2Pair, METH_O, "delete_b2Pair(b2Pair self)"},
	 { "b2Pair_swigregister", b2Pair_swigregister, METH_O, NULL},
	 { "b2Pair_swiginit", b2Pair_swiginit, METH_VARARGS, NULL},
	 { "new_b2BroadPhase", _wrap_new_b2BroadPhase, METH_NOARGS, "\n"
		"new_b2BroadPhase() -> b2BroadPhase\n"
		"The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and to track subsequent overlap.\n"
		""},
	 { "delete_b2BroadPhase", _wrap_delete_b2BroadPhase, METH_O, "delete_b2BroadPhase(b2BroadPhase self)"},
	 { "b2BroadPhase_MoveProxy", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_MoveProxy, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2BroadPhase_MoveProxy(b2BroadPhase self, int32 proxyId, b2AABB aabb, b2Vec2 displacement)\n"
		"Call MoveProxy as many times as you like, then when you are done call UpdatePairs to finalized the proxy pairs (for your time step).\n"
		""},
	 { "b2BroadPhase_TouchProxy", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_TouchProxy, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2BroadPhase_TouchProxy(b2BroadPhase self, int32 proxyId)\n"
		"Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.\n"
		""},
	 { "b2BroadPhase_GetFatAABB", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_GetFatAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2BroadPhase_GetFatAABB(b2BroadPhase self, int32 proxyId) -> b2AABB\n"
		"Get the fat AABB for a proxy.\n"
		""},
	 { "b2BroadPhase_TestOverlap", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_TestOverlap, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2BroadPhase_TestOverlap(b2BroadPhase self, int32 proxyIdA, int32 proxyIdB) -> bool\n"
		"Test overlap of fat AABBs.\n"
		""},
	 { "b2BroadPhase___GetProxyCount", _wrap_b2BroadPhase___GetProxyCount, METH_O, "\n"
		"b2BroadPhase___GetProxyCount(b2BroadPhase self) -> int32\n"
		"Get the number of proxies.\n"
		""},
	 { "b2BroadPhase___GetTreeHeight", _wrap_b2BroadPhase___GetTreeHeight, METH_O, "b2BroadPhase___GetTreeHeight(b2BroadPhase self) -> int32"},
	 { "b2BroadPhase___GetTreeBalance", _wrap_b2BroadPhase___GetTreeBalance, METH_O, "b2BroadPhase___GetTreeBalance(b2BroadPhase self) -> int32"},
	 { "b2BroadPhase___GetTreeQuality", _wrap_b2BroadPhase___GetTreeQuality, METH_O, "b2BroadPhase___GetTreeQuality(b2BroadPhase self) -> float32"},
	 { "b2BroadPhase_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "b2BroadPhase_ShiftOrigin(b2BroadPhase self, b2Vec2 newOrigin)"},
	 { "b2BroadPhase___hash__", _wrap_b2BroadPhase___hash__, METH_O, "b2BroadPhase___hash__(b2BroadPhase self) -> long"},
	 { "b2BroadPhase_swigregister", b2BroadPhase_swigregister, METH_O, NULL},
	 { "b2BroadPhase_swiginit", b2BroadPhase_swiginit, METH_VARARGS, NULL},
	 { "b2PairLessThan", (PyCFunction)(void(*)(void))_wrap_b2PairLessThan, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PairLessThan(b2Pair pair1, b2Pair pair2) -> bool\n"
		"This is used to sort pairs.\n"
		""},
	 { "new_b2DistanceProxy", _wrap_new_b2DistanceProxy, METH_NOARGS, "\n"
		"new_b2DistanceProxy() -> b2DistanceProxy\n"
		"A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n"
		""},
	 { "b2DistanceProxy_Set", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceProxy_Set(b2DistanceProxy self, b2Shape shape, int32 index)\n"
		"Initialize the proxy using the given shape. The shape must remain in scope while the proxy is in use.\n"
		""},
	 { "b2DistanceProxy_GetSupport", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_GetSupport, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceProxy_GetSupport(b2DistanceProxy self, b2Vec2 d) -> int32\n"
		"Get the supporting vertex index in the given direction.\n"
		""},
	 { "b2DistanceProxy_GetSupportVertex", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_GetSupportVertex, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceProxy_GetSupportVertex(b2DistanceProxy self, b2Vec2 d) -> b2Vec2\n"
		"Get the supporting vertex in the given direction.\n"
		""},
	 { "b2DistanceProxy___get_vertex_count", _wrap_b2DistanceProxy___get_vertex_count, METH_O, "\n"
		"b2DistanceProxy___get_vertex_count(b2DistanceProxy self) -> int32\n"
		"Get the vertex count.\n"
		""},
	 { "b2DistanceProxy___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy___get_vertex, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceProxy___get_vertex(b2DistanceProxy self, int32 index) -> b2Vec2\n"
		"Get a vertex by index. Used by b2Distance.\n"
		""},
	 { "b2DistanceProxy_m_buffer_set", _wrap_b2DistanceProxy_m_buffer_set, METH_VARARGS, "b2DistanceProxy_m_buffer_set(b2DistanceProxy self, b2Vec2 m_buffer)"},
	 { "b2DistanceProxy_m_buffer_get", _wrap_b2DistanceProxy_m_buffer_get, METH_O, "b2DistanceProxy_m_buffer_get(b2DistanceProxy self) -> b2Vec2"},
	 { "b2DistanceProxy___hash__", _wrap_b2DistanceProxy___hash__, METH_O, "b2DistanceProxy___hash__(b2DistanceProxy self) -> long"},
	 { "delete_b2DistanceProxy", _wrap_delete_b2DistanceProxy, METH_O, "delete_b2DistanceProxy(b2DistanceProxy self)"},
	 { "b2DistanceProxy_swigregister", b2DistanceProxy_swigregister, METH_O, NULL},
	 { "b2DistanceProxy_swiginit", b2DistanceProxy_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceInput_proxyA_set", _wrap_b2DistanceInput_proxyA_set, METH_VARARGS, "b2DistanceInput_proxyA_set(b2DistanceInput self, b2DistanceProxy proxyA)"},
	 { "b2DistanceInput_proxyA_get", _wrap_b2DistanceInput_proxyA_get, METH_O, "b2DistanceInput_proxyA_get(b2DistanceInput self) -> b2DistanceProxy"},
	 { "b2DistanceInput_proxyB_set", _wrap_b2DistanceInput_proxyB_set, METH_VARARGS, "b2DistanceInput_proxyB_set(b2DistanceInput self, b2DistanceProxy proxyB)"},
	 { "b2DistanceInput_proxyB_get", _wrap_b2DistanceInput_proxyB_get, METH_O, "b2DistanceInput_proxyB_get(b2DistanceInput self) -> b2DistanceProxy"},
	 { "b2DistanceInput_transformA_set", _wrap_b2DistanceInput_transformA_set, METH_VARARGS, "b2DistanceInput_transformA_set(b2DistanceInput self, b2Transform transformA)"},
	 { "b2DistanceInput_transformA_get", _wrap_b2DistanceInput_transformA_get, METH_O, "b2DistanceInput_transformA_get(b2DistanceInput self) -> b2Transform"},
	 { "b2DistanceInput_transformB_set", _wrap_b2DistanceInput_transformB_set, METH_VARARGS, "b2DistanceInput_transformB_set(b2DistanceInput self, b2Transform transformB)"},
	 { "b2DistanceInput_transformB_get", _wrap_b2DistanceInput_transformB_get, METH_O, "b2DistanceInput_transformB_get(b2DistanceInput self) -> b2Transform"},
	 { "b2DistanceInput_useRadii_set", _wrap_b2DistanceInput_useRadii_set, METH_VARARGS, "b2DistanceInput_useRadii_set(b2DistanceInput self, bool useRadii)"},
	 { "b2DistanceInput_useRadii_get", _wrap_b2DistanceInput_useRadii_get, METH_O, "b2DistanceInput_useRadii_get(b2DistanceInput self) -> bool"},
	 { "b2DistanceInput___hash__", _wrap_b2DistanceInput___hash__, METH_O, "b2DistanceInput___hash__(b2DistanceInput self) -> long"},
	 { "new_b2DistanceInput", _wrap_new_b2DistanceInput, METH_NOARGS, "\n"
		"new_b2DistanceInput() -> b2DistanceInput\n"
		"Input for b2Distance. You have to option to use the shape radii in the computation. Even\n"
		""},
	 { "delete_b2DistanceInput", _wrap_delete_b2DistanceInput, METH_O, "delete_b2DistanceInput(b2DistanceInput self)"},
	 { "b2DistanceInput_swigregister", b2DistanceInput_swigregister, METH_O, NULL},
	 { "b2DistanceInput_swiginit", b2DistanceInput_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceOutput_pointA_set", _wrap_b2DistanceOutput_pointA_set, METH_VARARGS, "b2DistanceOutput_pointA_set(b2DistanceOutput self, b2Vec2 pointA)"},
	 { "b2DistanceOutput_pointA_get", _wrap_b2DistanceOutput_pointA_get, METH_O, "b2DistanceOutput_pointA_get(b2DistanceOutput self) -> b2Vec2"},
	 { "b2DistanceOutput_pointB_set", _wrap_b2DistanceOutput_pointB_set, METH_VARARGS, "b2DistanceOutput_pointB_set(b2DistanceOutput self, b2Vec2 pointB)"},
	 { "b2DistanceOutput_pointB_get", _wrap_b2DistanceOutput_pointB_get, METH_O, "b2DistanceOutput_pointB_get(b2DistanceOutput self) -> b2Vec2"},
	 { "b2DistanceOutput_distance_set", _wrap_b2DistanceOutput_distance_set, METH_VARARGS, "b2DistanceOutput_distance_set(b2DistanceOutput self, float32 distance)"},
	 { "b2DistanceOutput_distance_get", _wrap_b2DistanceOutput_distance_get, METH_O, "b2DistanceOutput_distance_get(b2DistanceOutput self) -> float32"},
	 { "b2DistanceOutput_iterations_set", _wrap_b2DistanceOutput_iterations_set, METH_VARARGS, "b2DistanceOutput_iterations_set(b2DistanceOutput self, int32 iterations)"},
	 { "b2DistanceOutput_iterations_get", _wrap_b2DistanceOutput_iterations_get, METH_O, "b2DistanceOutput_iterations_get(b2DistanceOutput self) -> int32"},
	 { "b2DistanceOutput___hash__", _wrap_b2DistanceOutput___hash__, METH_O, "b2DistanceOutput___hash__(b2DistanceOutput self) -> long"},
	 { "new_b2DistanceOutput", _wrap_new_b2DistanceOutput, METH_NOARGS, "\n"
		"new_b2DistanceOutput() -> b2DistanceOutput\n"
		"Output for b2Distance.\n"
		""},
	 { "delete_b2DistanceOutput", _wrap_delete_b2DistanceOutput, METH_O, "delete_b2DistanceOutput(b2DistanceOutput self)"},
	 { "b2DistanceOutput_swigregister", b2DistanceOutput_swigregister, METH_O, NULL},
	 { "b2DistanceOutput_swiginit", b2DistanceOutput_swiginit, METH_VARARGS, NULL},
	 { "b2TOIInput_proxyA_set", _wrap_b2TOIInput_proxyA_set, METH_VARARGS, "b2TOIInput_proxyA_set(b2TOIInput self, b2DistanceProxy proxyA)"},
	 { "b2TOIInput_proxyA_get", _wrap_b2TOIInput_proxyA_get, METH_O, "b2TOIInput_proxyA_get(b2TOIInput self) -> b2DistanceProxy"},
	 { "b2TOIInput_proxyB_set", _wrap_b2TOIInput_proxyB_set, METH_VARARGS, "b2TOIInput_proxyB_set(b2TOIInput self, b2DistanceProxy proxyB)"},
	 { "b2TOIInput_proxyB_get", _wrap_b2TOIInput_proxyB_get, METH_O, "b2TOIInput_proxyB_get(b2TOIInput self) -> b2DistanceProxy"},
	 { "b2TOIInput_sweepA_set", _wrap_b2TOIInput_sweepA_set, METH_VARARGS, "b2TOIInput_sweepA_set(b2TOIInput self, b2Sweep sweepA)"},
	 { "b2TOIInput_sweepA_get", _wrap_b2TOIInput_sweepA_get, METH_O, "b2TOIInput_sweepA_get(b2TOIInput self) -> b2Sweep"},
	 { "b2TOIInput_sweepB_set", _wrap_b2TOIInput_sweepB_set, METH_VARARGS, "b2TOIInput_sweepB_set(b2TOIInput self, b2Sweep sweepB)"},
	 { "b2TOIInput_sweepB_get", _wrap_b2TOIInput_sweepB_get, METH_O, "b2TOIInput_sweepB_get(b2TOIInput self) -> b2Sweep"},
	 { "b2TOIInput_tMax_set", _wrap_b2TOIInput_tMax_set, METH_VARARGS, "b2TOIInput_tMax_set(b2TOIInput self, float32 tMax)"},
	 { "b2TOIInput_tMax_get", _wrap_b2TOIInput_tMax_get, METH_O, "b2TOIInput_tMax_get(b2TOIInput self) -> float32"},
	 { "b2TOIInput___hash__", _wrap_b2TOIInput___hash__, METH_O, "b2TOIInput___hash__(b2TOIInput self) -> long"},
	 { "new_b2TOIInput", _wrap_new_b2TOIInput, METH_NOARGS, "\n"
		"new_b2TOIInput() -> b2TOIInput\n"
		"Input parameters for b2TimeOfImpact.\n"
		""},
	 { "delete_b2TOIInput", _wrap_delete_b2TOIInput, METH_O, "delete_b2TOIInput(b2TOIInput self)"},
	 { "b2TOIInput_swigregister", b2TOIInput_swigregister, METH_O, NULL},
	 { "b2TOIInput_swiginit", b2TOIInput_swiginit, METH_VARARGS, NULL},
	 { "b2TOIOutput_state_set", _wrap_b2TOIOutput_state_set, METH_VARARGS, "b2TOIOutput_state_set(b2TOIOutput self, b2TOIOutput::State state)"},
	 { "b2TOIOutput_state_get", _wrap_b2TOIOutput_state_get, METH_O, "b2TOIOutput_state_get(b2TOIOutput self) -> b2TOIOutput::State"},
	 { "b2TOIOutput_t_set", _wrap_b2TOIOutput_t_set, METH_VARARGS, "b2TOIOutput_t_set(b2TOIOutput self, float32 t)"},
	 { "b2TOIOutput_t_get", _wrap_b2TOIOutput_t_get, METH_O, "b2TOIOutput_t_get(b2TOIOutput self) -> float32"},
	 { "b2TOIOutput___hash__", _wrap_b2TOIOutput___hash__, METH_O, "b2TOIOutput___hash__(b2TOIOutput self) -> long"},
	 { "new_b2TOIOutput", _wrap_new_b2TOIOutput, METH_NOARGS, "new_b2TOIOutput() -> b2TOIOutput"},
	 { "delete_b2TOIOutput", _wrap_delete_b2TOIOutput, METH_O, "delete_b2TOIOutput(b2TOIOutput self)"},
	 { "b2TOIOutput_swigregister", b2TOIOutput_swigregister, METH_O, NULL},
	 { "b2TOIOutput_swiginit", b2TOIOutput_swiginit, METH_VARARGS, NULL},
	 { "new_b2BodyDef", _wrap_new_b2BodyDef, METH_NOARGS, "\n"
		"new_b2BodyDef() -> b2BodyDef\n"
		"This constructor sets the body definition default values.\n"
		""},
	 { "b2BodyDef_type_set", _wrap_b2BodyDef_type_set, METH_VARARGS, "b2BodyDef_type_set(b2BodyDef self, b2BodyType type)"},
	 { "b2BodyDef_type_get", _wrap_b2BodyDef_type_get, METH_O, "b2BodyDef_type_get(b2BodyDef self) -> b2BodyType"},
	 { "b2BodyDef_position_set", _wrap_b2BodyDef_position_set, METH_VARARGS, "b2BodyDef_position_set(b2BodyDef self, b2Vec2 position)"},
	 { "b2BodyDef_position_get", _wrap_b2BodyDef_position_get, METH_O, "b2BodyDef_position_get(b2BodyDef self) -> b2Vec2"},
	 { "b2BodyDef_angle_set", _wrap_b2BodyDef_angle_set, METH_VARARGS, "b2BodyDef_angle_set(b2BodyDef self, float32 angle)"},
	 { "b2BodyDef_angle_get", _wrap_b2BodyDef_angle_get, METH_O, "b2BodyDef_angle_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_linearVelocity_set", _wrap_b2BodyDef_linearVelocity_set, METH_VARARGS, "b2BodyDef_linearVelocity_set(b2BodyDef self, b2Vec2 linearVelocity)"},
	 { "b2BodyDef_linearVelocity_get", _wrap_b2BodyDef_linearVelocity_get, METH_O, "b2BodyDef_linearVelocity_get(b2BodyDef self) -> b2Vec2"},
	 { "b2BodyDef_angularVelocity_set", _wrap_b2BodyDef_angularVelocity_set, METH_VARARGS, "b2BodyDef_angularVelocity_set(b2BodyDef self, float32 angularVelocity)"},
	 { "b2BodyDef_angularVelocity_get", _wrap_b2BodyDef_angularVelocity_get, METH_O, "b2BodyDef_angularVelocity_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_linearDamping_set", _wrap_b2BodyDef_linearDamping_set, METH_VARARGS, "b2BodyDef_linearDamping_set(b2BodyDef self, float32 linearDamping)"},
	 { "b2BodyDef_linearDamping_get", _wrap_b2BodyDef_linearDamping_get, METH_O, "b2BodyDef_linearDamping_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_angularDamping_set", _wrap_b2BodyDef_angularDamping_set, METH_VARARGS, "b2BodyDef_angularDamping_set(b2BodyDef self, float32 angularDamping)"},
	 { "b2BodyDef_angularDamping_get", _wrap_b2BodyDef_angularDamping_get, METH_O, "b2BodyDef_angularDamping_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_allowSleep_set", _wrap_b2BodyDef_allowSleep_set, METH_VARARGS, "b2BodyDef_allowSleep_set(b2BodyDef self, bool allowSleep)"},
	 { "b2BodyDef_allowSleep_get", _wrap_b2BodyDef_allowSleep_get, METH_O, "b2BodyDef_allowSleep_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_awake_set", _wrap_b2BodyDef_awake_set, METH_VARARGS, "b2BodyDef_awake_set(b2BodyDef self, bool awake)"},
	 { "b2BodyDef_awake_get", _wrap_b2BodyDef_awake_get, METH_O, "b2BodyDef_awake_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_fixedRotation_set", _wrap_b2BodyDef_fixedRotation_set, METH_VARARGS, "b2BodyDef_fixedRotation_set(b2BodyDef self, bool fixedRotation)"},
	 { "b2BodyDef_fixedRotation_get", _wrap_b2BodyDef_fixedRotation_get, METH_O, "b2BodyDef_fixedRotation_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_bullet_set", _wrap_b2BodyDef_bullet_set, METH_VARARGS, "b2BodyDef_bullet_set(b2BodyDef self, bool bullet)"},
	 { "b2BodyDef_bullet_get", _wrap_b2BodyDef_bullet_get, METH_O, "b2BodyDef_bullet_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_active_set", _wrap_b2BodyDef_active_set, METH_VARARGS, "b2BodyDef_active_set(b2BodyDef self, bool active)"},
	 { "b2BodyDef_active_get", _wrap_b2BodyDef_active_get, METH_O, "b2BodyDef_active_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_gravityScale_set", _wrap_b2BodyDef_gravityScale_set, METH_VARARGS, "b2BodyDef_gravityScale_set(b2BodyDef self, float32 gravityScale)"},
	 { "b2BodyDef_gravityScale_get", _wrap_b2BodyDef_gravityScale_get, METH_O, "b2BodyDef_gravityScale_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef___hash__", _wrap_b2BodyDef___hash__, METH_O, "b2BodyDef___hash__(b2BodyDef self) -> long"},
	 { "b2BodyDef___GetUserData", _wrap_b2BodyDef___GetUserData, METH_O, "b2BodyDef___GetUserData(b2BodyDef self) -> PyObject *"},
	 { "b2BodyDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2BodyDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2BodyDef___SetUserData(b2BodyDef self, PyObject * data)"},
	 { "b2BodyDef_ClearUserData", _wrap_b2BodyDef_ClearUserData, METH_O, "b2BodyDef_ClearUserData(b2BodyDef self)"},
	 { "delete_b2BodyDef", _wrap_delete_b2BodyDef, METH_O, "delete_b2BodyDef(b2BodyDef self)"},
	 { "b2BodyDef_swigregister", b2BodyDef_swigregister, METH_O, NULL},
	 { "b2BodyDef_swiginit", b2BodyDef_swiginit, METH_VARARGS, NULL},
	 { "b2Body___SetTransform", (PyCFunction)(void(*)(void))_wrap_b2Body___SetTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetTransform(b2Body self, b2Vec2 position, float32 angle)\n"
		"Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"position: \n"
		"the world position of the body's local origin.\n"
		"\n"
		"angle: \n"
		"the world rotation in radians.\n"
		""},
	 { "b2Body___GetTransform", _wrap_b2Body___GetTransform, METH_O, "\n"
		"b2Body___GetTransform(b2Body self) -> b2Transform\n"
		"Get the body transform for the body's origin. \n"
		"the world transform of the body's origin.\n"
		""},
	 { "b2Body___GetPosition", _wrap_b2Body___GetPosition, METH_O, "\n"
		"b2Body___GetPosition(b2Body self) -> b2Vec2\n"
		"Get the world body origin position. \n"
		"the world position of the body's origin.\n"
		""},
	 { "b2Body___GetAngle", _wrap_b2Body___GetAngle, METH_O, "\n"
		"b2Body___GetAngle(b2Body self) -> float32\n"
		"Get the angle in radians. \n"
		"the current world rotation angle in radians.\n"
		""},
	 { "b2Body___GetWorldCenter", _wrap_b2Body___GetWorldCenter, METH_O, "\n"
		"b2Body___GetWorldCenter(b2Body self) -> b2Vec2\n"
		"Get the world position of the center of mass.\n"
		""},
	 { "b2Body___GetLocalCenter", _wrap_b2Body___GetLocalCenter, METH_O, "\n"
		"b2Body___GetLocalCenter(b2Body self) -> b2Vec2\n"
		"Get the local position of the center of mass.\n"
		""},
	 { "b2Body___SetLinearVelocity", (PyCFunction)(void(*)(void))_wrap_b2Body___SetLinearVelocity, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetLinearVelocity(b2Body self, b2Vec2 v)\n"
		"Set the linear velocity of the center of mass.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"v: \n"
		"the new linear velocity of the center of mass.\n"
		""},
	 { "b2Body___GetLinearVelocity", _wrap_b2Body___GetLinearVelocity, METH_O, "\n"
		"b2Body___GetLinearVelocity(b2Body self) -> b2Vec2\n"
		"Get the linear velocity of the center of mass. \n"
		"the linear velocity of the center of mass.\n"
		""},
	 { "b2Body___SetAngularVelocity", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAngularVelocity, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetAngularVelocity(b2Body self, float32 omega)\n"
		"Set the angular velocity.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"omega: \n"
		"the new angular velocity in radians/second.\n"
		""},
	 { "b2Body___GetAngularVelocity", _wrap_b2Body___GetAngularVelocity, METH_O, "\n"
		"b2Body___GetAngularVelocity(b2Body self) -> float32\n"
		"Get the angular velocity. \n"
		"the angular velocity in radians/second.\n"
		""},
	 { "b2Body_ApplyForce", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_ApplyForce(b2Body self, b2Vec2 force, b2Vec2 point, bool wake)\n"
		"Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"force: \n"
		"the world force vector, usually in Newtons (N).\n"
		"\n"
		"point: \n"
		"the world position of the point of application.\n"
		""},
	 { "b2Body_ApplyForceToCenter", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyForceToCenter, METH_VARARGS|METH_KEYWORDS, "b2Body_ApplyForceToCenter(b2Body self, b2Vec2 force, bool wake)"},
	 { "b2Body_ApplyTorque", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_ApplyTorque(b2Body self, float32 torque, bool wake)\n"
		"Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"torque: \n"
		"about the z-axis (out of the screen), usually in N-m.\n"
		""},
	 { "b2Body_ApplyLinearImpulse", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyLinearImpulse, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_ApplyLinearImpulse(b2Body self, b2Vec2 impulse, b2Vec2 point, bool wake)\n"
		"Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"impulse: \n"
		"the world impulse vector, usually in N-seconds or kg-m/s.\n"
		"\n"
		"point: \n"
		"the world position of the point of application.\n"
		""},
	 { "b2Body_ApplyAngularImpulse", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyAngularImpulse, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_ApplyAngularImpulse(b2Body self, float32 impulse, bool wake)\n"
		"Apply an angular impulse.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"impulse: \n"
		"the angular impulse in units of kg*m*m/s\n"
		""},
	 { "b2Body___GetMass", _wrap_b2Body___GetMass, METH_O, "\n"
		"b2Body___GetMass(b2Body self) -> float32\n"
		"Get the total mass of the body. \n"
		"the mass, usually in kilograms (kg).\n"
		""},
	 { "b2Body___GetInertia", _wrap_b2Body___GetInertia, METH_O, "\n"
		"b2Body___GetInertia(b2Body self) -> float32\n"
		"Get the rotational inertia of the body about the local origin. \n"
		"the rotational inertia, usually in kg-m^2.\n"
		""},
	 { "b2Body_GetMassData", (PyCFunction)(void(*)(void))_wrap_b2Body_GetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetMassData(b2Body self, b2MassData data)\n"
		"Get the mass data of the body. \n"
		"a struct containing the mass, inertia and center of the body.\n"
		""},
	 { "b2Body___SetMassData", (PyCFunction)(void(*)(void))_wrap_b2Body___SetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetMassData(b2Body self, b2MassData data)\n"
		"Set the mass properties to override the mass properties of the fixtures. Note that this changes the center of mass position. Note that creating or destroying fixtures can also alter the mass. This function has no effect if the body isn't dynamic.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: \n"
		"the mass properties.\n"
		""},
	 { "b2Body_ResetMassData", _wrap_b2Body_ResetMassData, METH_O, "\n"
		"b2Body_ResetMassData(b2Body self)\n"
		"This resets the mass properties to the sum of the mass properties of the fixtures. This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.\n"
		""},
	 { "b2Body_GetWorldPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetWorldPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetWorldPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"Get the world coordinates of a point given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localPoint: \n"
		"a point on the body measured relative the the body's origin. \n"
		"the same point expressed in world coordinates.\n"
		""},
	 { "b2Body_GetWorldVector", (PyCFunction)(void(*)(void))_wrap_b2Body_GetWorldVector, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetWorldVector(b2Body self, b2Vec2 localVector) -> b2Vec2\n"
		"Get the world coordinates of a vector given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localVector: \n"
		"a vector fixed in the body. \n"
		"the same vector expressed in world coordinates.\n"
		""},
	 { "b2Body_GetLocalPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLocalPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetLocalPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"Gets a local point relative to the body's origin given a world point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in world coordinates. \n"
		"the corresponding local point relative to the body's origin.\n"
		""},
	 { "b2Body_GetLocalVector", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLocalVector, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetLocalVector(b2Body self, b2Vec2 worldVector) -> b2Vec2\n"
		"Gets a local vector given a world vector.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"vector in world coordinates. \n"
		"the corresponding local vector.\n"
		""},
	 { "b2Body_GetLinearVelocityFromWorldPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLinearVelocityFromWorldPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetLinearVelocityFromWorldPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"Get the world linear velocity of a world point attached to this body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in world coordinates. \n"
		"the world velocity of a point.\n"
		""},
	 { "b2Body_GetLinearVelocityFromLocalPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLinearVelocityFromLocalPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_GetLinearVelocityFromLocalPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"Get the world velocity of a local point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in local coordinates. \n"
		"the world velocity of a point.\n"
		""},
	 { "b2Body___GetLinearDamping", _wrap_b2Body___GetLinearDamping, METH_O, "\n"
		"b2Body___GetLinearDamping(b2Body self) -> float32\n"
		"Get the linear damping of the body.\n"
		""},
	 { "b2Body___SetLinearDamping", (PyCFunction)(void(*)(void))_wrap_b2Body___SetLinearDamping, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetLinearDamping(b2Body self, float32 linearDamping)\n"
		"Set the linear damping of the body.\n"
		""},
	 { "b2Body___GetAngularDamping", _wrap_b2Body___GetAngularDamping, METH_O, "\n"
		"b2Body___GetAngularDamping(b2Body self) -> float32\n"
		"Get the angular damping of the body.\n"
		""},
	 { "b2Body___SetAngularDamping", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAngularDamping, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetAngularDamping(b2Body self, float32 angularDamping)\n"
		"Set the angular damping of the body.\n"
		""},
	 { "b2Body___GetGravityScale", _wrap_b2Body___GetGravityScale, METH_O, "b2Body___GetGravityScale(b2Body self) -> float32"},
	 { "b2Body___SetGravityScale", (PyCFunction)(void(*)(void))_wrap_b2Body___SetGravityScale, METH_VARARGS|METH_KEYWORDS, "b2Body___SetGravityScale(b2Body self, float32 scale)"},
	 { "b2Body___SetType", (PyCFunction)(void(*)(void))_wrap_b2Body___SetType, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetType(b2Body self, b2BodyType type)\n"
		"Set the type of this body. This may alter the mass and velocity.\n"
		""},
	 { "b2Body___GetType", _wrap_b2Body___GetType, METH_O, "\n"
		"b2Body___GetType(b2Body self) -> b2BodyType\n"
		"Get the type of this body.\n"
		""},
	 { "b2Body___SetBullet", (PyCFunction)(void(*)(void))_wrap_b2Body___SetBullet, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetBullet(b2Body self, bool flag)\n"
		"Should this body be treated like a bullet for continuous collision detection?\n"
		""},
	 { "b2Body___IsBullet", _wrap_b2Body___IsBullet, METH_O, "\n"
		"b2Body___IsBullet(b2Body self) -> bool\n"
		"Is this body treated like a bullet for continuous collision detection?\n"
		""},
	 { "b2Body___SetSleepingAllowed", (PyCFunction)(void(*)(void))_wrap_b2Body___SetSleepingAllowed, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetSleepingAllowed(b2Body self, bool flag)\n"
		"You can disable sleeping on this body. If you disable sleeping, the body will be woken.\n"
		""},
	 { "b2Body___IsSleepingAllowed", _wrap_b2Body___IsSleepingAllowed, METH_O, "\n"
		"b2Body___IsSleepingAllowed(b2Body self) -> bool\n"
		"Is this body allowed to sleep.\n"
		""},
	 { "b2Body___SetAwake", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAwake, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetAwake(b2Body self, bool flag)\n"
		"Set the sleep state of the body. A sleeping body has very low CPU cost.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"flag: \n"
		"set to true to put body to sleep, false to wake it.\n"
		""},
	 { "b2Body___IsAwake", _wrap_b2Body___IsAwake, METH_O, "\n"
		"b2Body___IsAwake(b2Body self) -> bool\n"
		"Get the sleeping state of this body. \n"
		"true if the body is sleeping.\n"
		""},
	 { "b2Body___SetActive", (PyCFunction)(void(*)(void))_wrap_b2Body___SetActive, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetActive(b2Body self, bool flag)\n"
		"Set the active state of the body. An inactive body is not simulated and cannot be collided with or woken up. If you pass a flag of true, all fixtures will be added to the broad-phase. If you pass a flag of false, all fixtures will be removed from the broad-phase and all contacts will be destroyed. Fixtures and joints are otherwise unaffected. You may continue to create/destroy fixtures and joints on inactive bodies. Fixtures on an inactive body are implicitly inactive and will not participate in collisions, ray-casts, or queries. Joints connected to an inactive body are implicitly inactive. An inactive body is still owned by a  b2Worldobject and remains in the body list.\n"
		""},
	 { "b2Body___IsActive", _wrap_b2Body___IsActive, METH_O, "\n"
		"b2Body___IsActive(b2Body self) -> bool\n"
		"Get the active state of the body.\n"
		""},
	 { "b2Body___SetFixedRotation", (PyCFunction)(void(*)(void))_wrap_b2Body___SetFixedRotation, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body___SetFixedRotation(b2Body self, bool flag)\n"
		"Set this body to have fixed rotation. This causes the mass to be reset.\n"
		""},
	 { "b2Body___IsFixedRotation", _wrap_b2Body___IsFixedRotation, METH_O, "\n"
		"b2Body___IsFixedRotation(b2Body self) -> bool\n"
		"Does this body have fixed rotation?\n"
		""},
	 { "b2Body___GetFixtureList_internal", _wrap_b2Body___GetFixtureList_internal, METH_VARARGS, "\n"
		"b2Body___GetFixtureList_internal(b2Body self) -> b2Fixture\n"
		"b2Body___GetFixtureList_internal(b2Body self) -> b2Fixture\n"
		"Get the list of all fixtures attached to this body.\n"
		""},
	 { "b2Body___GetJointList_internal", _wrap_b2Body___GetJointList_internal, METH_VARARGS, "\n"
		"b2Body___GetJointList_internal(b2Body self) -> b2JointEdge\n"
		"b2Body___GetJointList_internal(b2Body self) -> b2JointEdge\n"
		"Get the list of all joints attached to this body.\n"
		""},
	 { "b2Body___GetContactList_internal", _wrap_b2Body___GetContactList_internal, METH_VARARGS, "\n"
		"b2Body___GetContactList_internal(b2Body self) -> b2ContactEdge\n"
		"b2Body___GetContactList_internal(b2Body self) -> b2ContactEdge\n"
		"Get the list of all contacts attached to this body. \n"
		"WARNING: \n"
		"this list changes during the time step and you may miss some collisions if you don't use  b2ContactListener.\n"
		""},
	 { "b2Body___GetNext", _wrap_b2Body___GetNext, METH_VARARGS, "\n"
		"b2Body___GetNext(b2Body self) -> b2Body\n"
		"b2Body___GetNext(b2Body self) -> b2Body\n"
		"Get the next body in the world's body list.\n"
		""},
	 { "b2Body___GetWorld", _wrap_b2Body___GetWorld, METH_VARARGS, "\n"
		"b2Body___GetWorld(b2Body self) -> b2World\n"
		"b2Body___GetWorld(b2Body self) -> b2World\n"
		"Get the parent world of this body.\n"
		""},
	 { "b2Body_Dump", _wrap_b2Body_Dump, METH_O, "b2Body_Dump(b2Body self)"},
	 { "b2Body___hash__", _wrap_b2Body___hash__, METH_O, "b2Body___hash__(b2Body self) -> long"},
	 { "b2Body_DestroyFixture", (PyCFunction)(void(*)(void))_wrap_b2Body_DestroyFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Body_DestroyFixture(b2Body self, b2Fixture fixture)\n"
		"Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture. This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density. All fixtures attached to a body are implicitly destroyed when the body is destroyed.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fixture: \n"
		"the fixture to be removed.\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2Body___CreateFixture", _wrap_b2Body___CreateFixture, METH_VARARGS, "\n"
		"b2Body___CreateFixture(b2Body self, b2Shape shape, float32 density) -> b2Fixture\n"
		"b2Body___CreateFixture(b2Body self, b2FixtureDef defn) -> b2Fixture\n"
		"Creates a fixture from a shape and attach it to this body. This is a convenience function. Use  b2FixtureDefif you need to set parameters like friction, restitution, user data, or filtering. If the density is non-zero, this function automatically updates the mass of the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"shape: \n"
		"the shape to be cloned.\n"
		"\n"
		"density: \n"
		"the shape density (set to zero for static bodies).\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2Body___GetUserData", _wrap_b2Body___GetUserData, METH_O, "b2Body___GetUserData(b2Body self) -> PyObject *"},
	 { "b2Body___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Body___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2Body___SetUserData(b2Body self, PyObject * data)"},
	 { "b2Body_ClearUserData", _wrap_b2Body_ClearUserData, METH_O, "b2Body_ClearUserData(b2Body self)"},
	 { "b2Body_swigregister", b2Body_swigregister, METH_O, NULL},
	 { "new_b2Filter", _wrap_new_b2Filter, METH_NOARGS, "\n"
		"new_b2Filter() -> b2Filter\n"
		"This holds contact filtering data.\n"
		""},
	 { "b2Filter_categoryBits_set", _wrap_b2Filter_categoryBits_set, METH_VARARGS, "b2Filter_categoryBits_set(b2Filter self, uint16 categoryBits)"},
	 { "b2Filter_categoryBits_get", _wrap_b2Filter_categoryBits_get, METH_O, "b2Filter_categoryBits_get(b2Filter self) -> uint16"},
	 { "b2Filter_maskBits_set", _wrap_b2Filter_maskBits_set, METH_VARARGS, "b2Filter_maskBits_set(b2Filter self, uint16 maskBits)"},
	 { "b2Filter_maskBits_get", _wrap_b2Filter_maskBits_get, METH_O, "b2Filter_maskBits_get(b2Filter self) -> uint16"},
	 { "b2Filter_groupIndex_set", _wrap_b2Filter_groupIndex_set, METH_VARARGS, "b2Filter_groupIndex_set(b2Filter self, int16 groupIndex)"},
	 { "b2Filter_groupIndex_get", _wrap_b2Filter_groupIndex_get, METH_O, "b2Filter_groupIndex_get(b2Filter self) -> int16"},
	 { "b2Filter___hash__", _wrap_b2Filter___hash__, METH_O, "b2Filter___hash__(b2Filter self) -> long"},
	 { "delete_b2Filter", _wrap_delete_b2Filter, METH_O, "delete_b2Filter(b2Filter self)"},
	 { "b2Filter_swigregister", b2Filter_swigregister, METH_O, NULL},
	 { "b2Filter_swiginit", b2Filter_swiginit, METH_VARARGS, NULL},
	 { "new_b2FixtureDef", _wrap_new_b2FixtureDef, METH_NOARGS, "\n"
		"new_b2FixtureDef() -> b2FixtureDef\n"
		"The constructor sets the default fixture definition values.\n"
		""},
	 { "b2FixtureDef_shape_set", _wrap_b2FixtureDef_shape_set, METH_VARARGS, "b2FixtureDef_shape_set(b2FixtureDef self, b2Shape shape)"},
	 { "b2FixtureDef_shape_get", _wrap_b2FixtureDef_shape_get, METH_O, "b2FixtureDef_shape_get(b2FixtureDef self) -> b2Shape"},
	 { "b2FixtureDef_friction_set", _wrap_b2FixtureDef_friction_set, METH_VARARGS, "b2FixtureDef_friction_set(b2FixtureDef self, float32 friction)"},
	 { "b2FixtureDef_friction_get", _wrap_b2FixtureDef_friction_get, METH_O, "b2FixtureDef_friction_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_restitution_set", _wrap_b2FixtureDef_restitution_set, METH_VARARGS, "b2FixtureDef_restitution_set(b2FixtureDef self, float32 restitution)"},
	 { "b2FixtureDef_restitution_get", _wrap_b2FixtureDef_restitution_get, METH_O, "b2FixtureDef_restitution_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_density_set", _wrap_b2FixtureDef_density_set, METH_VARARGS, "b2FixtureDef_density_set(b2FixtureDef self, float32 density)"},
	 { "b2FixtureDef_density_get", _wrap_b2FixtureDef_density_get, METH_O, "b2FixtureDef_density_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_isSensor_set", _wrap_b2FixtureDef_isSensor_set, METH_VARARGS, "b2FixtureDef_isSensor_set(b2FixtureDef self, bool isSensor)"},
	 { "b2FixtureDef_isSensor_get", _wrap_b2FixtureDef_isSensor_get, METH_O, "b2FixtureDef_isSensor_get(b2FixtureDef self) -> bool"},
	 { "b2FixtureDef_filter_set", _wrap_b2FixtureDef_filter_set, METH_VARARGS, "b2FixtureDef_filter_set(b2FixtureDef self, b2Filter filter)"},
	 { "b2FixtureDef_filter_get", _wrap_b2FixtureDef_filter_get, METH_O, "b2FixtureDef_filter_get(b2FixtureDef self) -> b2Filter"},
	 { "b2FixtureDef___hash__", _wrap_b2FixtureDef___hash__, METH_O, "b2FixtureDef___hash__(b2FixtureDef self) -> long"},
	 { "b2FixtureDef___GetUserData", _wrap_b2FixtureDef___GetUserData, METH_O, "b2FixtureDef___GetUserData(b2FixtureDef self) -> PyObject *"},
	 { "b2FixtureDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2FixtureDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2FixtureDef___SetUserData(b2FixtureDef self, PyObject * data)"},
	 { "b2FixtureDef_ClearUserData", _wrap_b2FixtureDef_ClearUserData, METH_O, "b2FixtureDef_ClearUserData(b2FixtureDef self)"},
	 { "delete_b2FixtureDef", _wrap_delete_b2FixtureDef, METH_O, "delete_b2FixtureDef(b2FixtureDef self)"},
	 { "b2FixtureDef_swigregister", b2FixtureDef_swigregister, METH_O, NULL},
	 { "b2FixtureDef_swiginit", b2FixtureDef_swiginit, METH_VARARGS, NULL},
	 { "b2FixtureProxy_aabb_set", _wrap_b2FixtureProxy_aabb_set, METH_VARARGS, "b2FixtureProxy_aabb_set(b2FixtureProxy self, b2AABB aabb)"},
	 { "b2FixtureProxy_aabb_get", _wrap_b2FixtureProxy_aabb_get, METH_O, "b2FixtureProxy_aabb_get(b2FixtureProxy self) -> b2AABB"},
	 { "b2FixtureProxy_fixture_set", _wrap_b2FixtureProxy_fixture_set, METH_VARARGS, "b2FixtureProxy_fixture_set(b2FixtureProxy self, b2Fixture fixture)"},
	 { "b2FixtureProxy_fixture_get", _wrap_b2FixtureProxy_fixture_get, METH_O, "b2FixtureProxy_fixture_get(b2FixtureProxy self) -> b2Fixture"},
	 { "b2FixtureProxy_childIndex_set", _wrap_b2FixtureProxy_childIndex_set, METH_VARARGS, "b2FixtureProxy_childIndex_set(b2FixtureProxy self, int32 childIndex)"},
	 { "b2FixtureProxy_childIndex_get", _wrap_b2FixtureProxy_childIndex_get, METH_O, "b2FixtureProxy_childIndex_get(b2FixtureProxy self) -> int32"},
	 { "b2FixtureProxy_proxyId_set", _wrap_b2FixtureProxy_proxyId_set, METH_VARARGS, "b2FixtureProxy_proxyId_set(b2FixtureProxy self, int32 proxyId)"},
	 { "b2FixtureProxy_proxyId_get", _wrap_b2FixtureProxy_proxyId_get, METH_O, "b2FixtureProxy_proxyId_get(b2FixtureProxy self) -> int32"},
	 { "b2FixtureProxy___hash__", _wrap_b2FixtureProxy___hash__, METH_O, "b2FixtureProxy___hash__(b2FixtureProxy self) -> long"},
	 { "new_b2FixtureProxy", _wrap_new_b2FixtureProxy, METH_NOARGS, "\n"
		"new_b2FixtureProxy() -> b2FixtureProxy\n"
		"This proxy is used internally to connect fixtures to the broad-phase.\n"
		""},
	 { "delete_b2FixtureProxy", _wrap_delete_b2FixtureProxy, METH_O, "delete_b2FixtureProxy(b2FixtureProxy self)"},
	 { "b2FixtureProxy_swigregister", b2FixtureProxy_swigregister, METH_O, NULL},
	 { "b2FixtureProxy_swiginit", b2FixtureProxy_swiginit, METH_VARARGS, NULL},
	 { "b2Fixture___GetType", _wrap_b2Fixture___GetType, METH_O, "\n"
		"b2Fixture___GetType(b2Fixture self) -> b2Shape::Type\n"
		"Get the type of the child shape. You can use this to down cast to the concrete shape. \n"
		"the shape type.\n"
		""},
	 { "b2Fixture___GetShape", _wrap_b2Fixture___GetShape, METH_VARARGS, "\n"
		"b2Fixture___GetShape(b2Fixture self) -> b2Shape\n"
		"b2Fixture___GetShape(b2Fixture self) -> b2Shape\n"
		"Get the child shape. You can modify the child shape, however you should not change the number of vertices because this will crash some collision caching mechanisms. Manipulating the shape may lead to non-physical behavior.\n"
		""},
	 { "b2Fixture___SetSensor", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetSensor, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___SetSensor(b2Fixture self, bool sensor)\n"
		"Set if this fixture is a sensor.\n"
		""},
	 { "b2Fixture___IsSensor", _wrap_b2Fixture___IsSensor, METH_O, "\n"
		"b2Fixture___IsSensor(b2Fixture self) -> bool\n"
		"Is this fixture a sensor (non-solid)? \n"
		"the true if the shape is a sensor.\n"
		""},
	 { "b2Fixture___SetFilterData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetFilterData, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___SetFilterData(b2Fixture self, b2Filter filter)\n"
		"Set the contact filtering data. This will not update contacts until the next time step when either parent body is active and awake. This automatically calls Refilter.\n"
		""},
	 { "b2Fixture___GetFilterData", _wrap_b2Fixture___GetFilterData, METH_O, "\n"
		"b2Fixture___GetFilterData(b2Fixture self) -> b2Filter\n"
		"Get the contact filtering data.\n"
		""},
	 { "b2Fixture_Refilter", _wrap_b2Fixture_Refilter, METH_O, "\n"
		"b2Fixture_Refilter(b2Fixture self)\n"
		"Call this if you want to establish collision that was previously disabled by  b2ContactFilter::ShouldCollide.\n"
		""},
	 { "b2Fixture___GetBody", _wrap_b2Fixture___GetBody, METH_VARARGS, "\n"
		"b2Fixture___GetBody(b2Fixture self) -> b2Body\n"
		"b2Fixture___GetBody(b2Fixture self) -> b2Body\n"
		"Get the parent body of this fixture. This is NULL if the fixture is not attached. \n"
		"the parent body.\n"
		""},
	 { "b2Fixture___GetNext", _wrap_b2Fixture___GetNext, METH_VARARGS, "\n"
		"b2Fixture___GetNext(b2Fixture self) -> b2Fixture\n"
		"b2Fixture___GetNext(b2Fixture self) -> b2Fixture\n"
		"Get the next fixture in the parent body's fixture list. \n"
		"the next shape.\n"
		""},
	 { "b2Fixture_TestPoint", (PyCFunction)(void(*)(void))_wrap_b2Fixture_TestPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture_TestPoint(b2Fixture self, b2Vec2 p) -> bool\n"
		"Test a point for containment in this fixture.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p: \n"
		"a point in world coordinates.\n"
		""},
	 { "b2Fixture_RayCast", (PyCFunction)(void(*)(void))_wrap_b2Fixture_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture_RayCast(b2Fixture self, b2RayCastOutput output, b2RayCastInput input, int32 childIndex) -> bool\n"
		"Cast a ray against this shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"output: \n"
		"the ray-cast results.\n"
		"\n"
		"input: \n"
		"the ray-cast input parameters.\n"
		""},
	 { "b2Fixture___GetMassData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___GetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___GetMassData(b2Fixture self, b2MassData massData)\n"
		"Get the mass data for this fixture. The mass data is based on the density and the shape. The rotational inertia is about the shape's origin. This operation may be expensive.\n"
		""},
	 { "b2Fixture___SetDensity", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetDensity, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___SetDensity(b2Fixture self, float32 density)\n"
		"Set the density of this fixture. This will _not_ automatically adjust the mass of the body. You must call  b2Body::ResetMassDatato update the body's mass.\n"
		""},
	 { "b2Fixture___GetDensity", _wrap_b2Fixture___GetDensity, METH_O, "\n"
		"b2Fixture___GetDensity(b2Fixture self) -> float32\n"
		"Get the density of this fixture.\n"
		""},
	 { "b2Fixture___GetFriction", _wrap_b2Fixture___GetFriction, METH_O, "\n"
		"b2Fixture___GetFriction(b2Fixture self) -> float32\n"
		"Get the coefficient of friction.\n"
		""},
	 { "b2Fixture___SetFriction", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___SetFriction(b2Fixture self, float32 friction)\n"
		"Set the coefficient of friction. This will immediately update the mixed friction on all associated contacts.\n"
		""},
	 { "b2Fixture___GetRestitution", _wrap_b2Fixture___GetRestitution, METH_O, "\n"
		"b2Fixture___GetRestitution(b2Fixture self) -> float32\n"
		"Get the coefficient of restitution.\n"
		""},
	 { "b2Fixture___SetRestitution", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture___SetRestitution(b2Fixture self, float32 restitution)\n"
		"Set the coefficient of restitution. This will immediately update the mixed restitution on all associated contacts.\n"
		""},
	 { "b2Fixture_GetAABB", (PyCFunction)(void(*)(void))_wrap_b2Fixture_GetAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Fixture_GetAABB(b2Fixture self, int32 childIndex) -> b2AABB\n"
		"Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a more accurate AABB, compute it using the shape and the body transform.\n"
		""},
	 { "b2Fixture_Dump", (PyCFunction)(void(*)(void))_wrap_b2Fixture_Dump, METH_VARARGS|METH_KEYWORDS, "b2Fixture_Dump(b2Fixture self, int32 bodyIndex)"},
	 { "b2Fixture___hash__", _wrap_b2Fixture___hash__, METH_O, "b2Fixture___hash__(b2Fixture self) -> long"},
	 { "b2Fixture___GetUserData", _wrap_b2Fixture___GetUserData, METH_O, "b2Fixture___GetUserData(b2Fixture self) -> PyObject *"},
	 { "b2Fixture___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2Fixture___SetUserData(b2Fixture self, PyObject * data)"},
	 { "b2Fixture_ClearUserData", _wrap_b2Fixture_ClearUserData, METH_O, "b2Fixture_ClearUserData(b2Fixture self)"},
	 { "delete_b2Fixture", _wrap_delete_b2Fixture, METH_O, "delete_b2Fixture(b2Fixture self)"},
	 { "b2Fixture_swigregister", b2Fixture_swigregister, METH_O, NULL},
	 { "delete_b2DestructionListener", _wrap_delete_b2DestructionListener, METH_O, "delete_b2DestructionListener(b2DestructionListener self)"},
	 { "b2DestructionListener_SayGoodbye", _wrap_b2DestructionListener_SayGoodbye, METH_VARARGS, "\n"
		"b2DestructionListener_SayGoodbye(b2DestructionListener self, b2Joint joint)\n"
		"b2DestructionListener_SayGoodbye(b2DestructionListener self, b2Fixture fixture)\n"
		"Called when any fixture is about to be destroyed due to the destruction of its parent body.\n"
		""},
	 { "b2DestructionListener___hash__", _wrap_b2DestructionListener___hash__, METH_O, "b2DestructionListener___hash__(b2DestructionListener self) -> long"},
	 { "new_b2DestructionListener", (PyCFunction)(void(*)(void))_wrap_new_b2DestructionListener, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2DestructionListener(PyObject * _self) -> b2DestructionListener\n"
		"Joints and fixtures are destroyed when their associated body is destroyed. Implement this listener so that you may nullify references to these joints and shapes.\n"
		""},
	 { "disown_b2DestructionListener", (PyCFunction)(void(*)(void))_wrap_disown_b2DestructionListener, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2DestructionListener_swigregister", b2DestructionListener_swigregister, METH_O, NULL},
	 { "b2DestructionListener_swiginit", b2DestructionListener_swiginit, METH_VARARGS, NULL},
	 { "delete_b2ContactFilter", _wrap_delete_b2ContactFilter, METH_O, "delete_b2ContactFilter(b2ContactFilter self)"},
	 { "b2ContactFilter_ShouldCollide", (PyCFunction)(void(*)(void))_wrap_b2ContactFilter_ShouldCollide, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ContactFilter_ShouldCollide(b2ContactFilter self, b2Fixture fixtureA, b2Fixture fixtureB) -> bool\n"
		"Return true if contact calculations should be performed between these two shapes. \n"
		"WARNING: \n"
		"for performance reasons this is only called when the AABBs begin to overlap.\n"
		""},
	 { "b2ContactFilter___hash__", _wrap_b2ContactFilter___hash__, METH_O, "b2ContactFilter___hash__(b2ContactFilter self) -> long"},
	 { "new_b2ContactFilter", (PyCFunction)(void(*)(void))_wrap_new_b2ContactFilter, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2ContactFilter(PyObject * _self) -> b2ContactFilter\n"
		"Implement this class to provide collision filtering. In other words, you can implement this class if you want finer control over contact creation.\n"
		""},
	 { "disown_b2ContactFilter", (PyCFunction)(void(*)(void))_wrap_disown_b2ContactFilter, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2ContactFilter_swigregister", b2ContactFilter_swigregister, METH_O, NULL},
	 { "b2ContactFilter_swiginit", b2ContactFilter_swiginit, METH_VARARGS, NULL},
	 { "b2ContactImpulse_count_set", _wrap_b2ContactImpulse_count_set, METH_VARARGS, "b2ContactImpulse_count_set(b2ContactImpulse self, int32 count)"},
	 { "b2ContactImpulse_count_get", _wrap_b2ContactImpulse_count_get, METH_O, "b2ContactImpulse_count_get(b2ContactImpulse self) -> int32"},
	 { "b2ContactImpulse___hash__", _wrap_b2ContactImpulse___hash__, METH_O, "b2ContactImpulse___hash__(b2ContactImpulse self) -> long"},
	 { "b2ContactImpulse___get_normal_impulses", _wrap_b2ContactImpulse___get_normal_impulses, METH_O, "b2ContactImpulse___get_normal_impulses(b2ContactImpulse self) -> PyObject *"},
	 { "b2ContactImpulse___get_tangent_impulses", _wrap_b2ContactImpulse___get_tangent_impulses, METH_O, "b2ContactImpulse___get_tangent_impulses(b2ContactImpulse self) -> PyObject *"},
	 { "new_b2ContactImpulse", _wrap_new_b2ContactImpulse, METH_NOARGS, "\n"
		"new_b2ContactImpulse() -> b2ContactImpulse\n"
		"Contact impulses for reporting. Impulses are used instead of forces because sub-step forces may approach infinity for rigid body collisions. These match up one-to-one with the contact points in  b2Manifold.\n"
		""},
	 { "delete_b2ContactImpulse", _wrap_delete_b2ContactImpulse, METH_O, "delete_b2ContactImpulse(b2ContactImpulse self)"},
	 { "b2ContactImpulse_swigregister", b2ContactImpulse_swigregister, METH_O, NULL},
	 { "b2ContactImpulse_swiginit", b2ContactImpulse_swiginit, METH_VARARGS, NULL},
	 { "delete_b2ContactListener", _wrap_delete_b2ContactListener, METH_O, "delete_b2ContactListener(b2ContactListener self)"},
	 { "b2ContactListener_BeginContact", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_BeginContact, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ContactListener_BeginContact(b2ContactListener self, b2Contact contact)\n"
		"Called when two fixtures begin to touch.\n"
		""},
	 { "b2ContactListener_EndContact", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_EndContact, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ContactListener_EndContact(b2ContactListener self, b2Contact contact)\n"
		"Called when two fixtures cease to touch.\n"
		""},
	 { "b2ContactListener_PreSolve", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_PreSolve, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ContactListener_PreSolve(b2ContactListener self, b2Contact contact, b2Manifold oldManifold)\n"
		"This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. disable contact). A copy of the old manifold is provided so that you can detect changes. Note: this is called only for awake bodies. Note: this is called even when the number of contact points is zero. Note: this is not called for sensors. Note: if you set the number of contact points to zero, you will not get an EndContact callback. However, you may get a BeginContact callback the next step.\n"
		""},
	 { "b2ContactListener_PostSolve", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_PostSolve, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ContactListener_PostSolve(b2ContactListener self, b2Contact contact, b2ContactImpulse impulse)\n"
		"This lets you inspect a contact after the solver is finished. This is useful for inspecting impulses. Note: the contact manifold does not include time of impact impulses, which can be arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly in a separate data structure. Note: this is only called for contacts that are touching, solid, and awake.\n"
		""},
	 { "b2ContactListener___hash__", _wrap_b2ContactListener___hash__, METH_O, "b2ContactListener___hash__(b2ContactListener self) -> long"},
	 { "new_b2ContactListener", (PyCFunction)(void(*)(void))_wrap_new_b2ContactListener, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2ContactListener(PyObject * _self) -> b2ContactListener\n"
		"Implement this class to get contact information. You can use these results for things like sounds and game logic. You can also get contact results by traversing the contact lists after the time step. However, you might miss some contacts because continuous physics leads to sub-stepping. Additionally you may receive multiple callbacks for the same contact in a single time step. You should strive to make your callbacks efficient because there may be many callbacks per time step. \n"
		"WARNING: \n"
		"You cannot create/destroy Box2D entities inside these callbacks.\n"
		""},
	 { "disown_b2ContactListener", (PyCFunction)(void(*)(void))_wrap_disown_b2ContactListener, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2ContactListener_swigregister", b2ContactListener_swigregister, METH_O, NULL},
	 { "b2ContactListener_swiginit", b2ContactListener_swiginit, METH_VARARGS, NULL},
	 { "delete_b2QueryCallback", _wrap_delete_b2QueryCallback, METH_O, "delete_b2QueryCallback(b2QueryCallback self)"},
	 { "b2QueryCallback_ReportFixture", (PyCFunction)(void(*)(void))_wrap_b2QueryCallback_ReportFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2QueryCallback_ReportFixture(b2QueryCallback self, b2Fixture fixture) -> bool\n"
		"Called for each fixture found in the query AABB. \n"
		"false to terminate the query.\n"
		""},
	 { "b2QueryCallback___hash__", _wrap_b2QueryCallback___hash__, METH_O, "b2QueryCallback___hash__(b2QueryCallback self) -> long"},
	 { "new_b2QueryCallback", (PyCFunction)(void(*)(void))_wrap_new_b2QueryCallback, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2QueryCallback(PyObject * _self) -> b2QueryCallback\n"
		"Callback class for AABB queries. See b2World::Query\n"
		""},
	 { "disown_b2QueryCallback", (PyCFunction)(void(*)(void))_wrap_disown_b2QueryCallback, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2QueryCallback_swigregister", b2QueryCallback_swigregister, METH_O, NULL},
	 { "b2QueryCallback_swiginit", b2QueryCallback_swiginit, METH_VARARGS, NULL},
	 { "delete_b2RayCastCallback", _wrap_delete_b2RayCastCallback, METH_O, "delete_b2RayCastCallback(b2RayCastCallback self)"},
	 { "b2RayCastCallback_ReportFixture", (PyCFunction)(void(*)(void))_wrap_b2RayCastCallback_ReportFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RayCastCallback_ReportFixture(b2RayCastCallback self, b2Fixture fixture, b2Vec2 point, b2Vec2 normal, float32 fraction) -> float32\n"
		"Called for each fixture found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this fixture and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fixture: \n"
		"the fixture hit by the ray\n"
		"\n"
		"point: \n"
		"the point of initial intersection\n"
		"\n"
		"normal: \n"
		"the normal vector at the point of intersection \n"
		"-1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue\n"
		""},
	 { "b2RayCastCallback___hash__", _wrap_b2RayCastCallback___hash__, METH_O, "b2RayCastCallback___hash__(b2RayCastCallback self) -> long"},
	 { "new_b2RayCastCallback", (PyCFunction)(void(*)(void))_wrap_new_b2RayCastCallback, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2RayCastCallback(PyObject * _self) -> b2RayCastCallback\n"
		"Callback class for ray casts. See  b2World::RayCast\n"
		""},
	 { "disown_b2RayCastCallback", (PyCFunction)(void(*)(void))_wrap_disown_b2RayCastCallback, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2RayCastCallback_swigregister", b2RayCastCallback_swigregister, METH_O, NULL},
	 { "b2RayCastCallback_swiginit", b2RayCastCallback_swiginit, METH_VARARGS, NULL},
	 { "b2Profile_step_set", _wrap_b2Profile_step_set, METH_VARARGS, "b2Profile_step_set(b2Profile self, float32 step)"},
	 { "b2Profile_step_get", _wrap_b2Profile_step_get, METH_O, "b2Profile_step_get(b2Profile self) -> float32"},
	 { "b2Profile_collide_set", _wrap_b2Profile_collide_set, METH_VARARGS, "b2Profile_collide_set(b2Profile self, float32 collide)"},
	 { "b2Profile_collide_get", _wrap_b2Profile_collide_get, METH_O, "b2Profile_collide_get(b2Profile self) -> float32"},
	 { "b2Profile_solve_set", _wrap_b2Profile_solve_set, METH_VARARGS, "b2Profile_solve_set(b2Profile self, float32 solve)"},
	 { "b2Profile_solve_get", _wrap_b2Profile_solve_get, METH_O, "b2Profile_solve_get(b2Profile self) -> float32"},
	 { "b2Profile_solveInit_set", _wrap_b2Profile_solveInit_set, METH_VARARGS, "b2Profile_solveInit_set(b2Profile self, float32 solveInit)"},
	 { "b2Profile_solveInit_get", _wrap_b2Profile_solveInit_get, METH_O, "b2Profile_solveInit_get(b2Profile self) -> float32"},
	 { "b2Profile_solveVelocity_set", _wrap_b2Profile_solveVelocity_set, METH_VARARGS, "b2Profile_solveVelocity_set(b2Profile self, float32 solveVelocity)"},
	 { "b2Profile_solveVelocity_get", _wrap_b2Profile_solveVelocity_get, METH_O, "b2Profile_solveVelocity_get(b2Profile self) -> float32"},
	 { "b2Profile_solvePosition_set", _wrap_b2Profile_solvePosition_set, METH_VARARGS, "b2Profile_solvePosition_set(b2Profile self, float32 solvePosition)"},
	 { "b2Profile_solvePosition_get", _wrap_b2Profile_solvePosition_get, METH_O, "b2Profile_solvePosition_get(b2Profile self) -> float32"},
	 { "b2Profile_broadphase_set", _wrap_b2Profile_broadphase_set, METH_VARARGS, "b2Profile_broadphase_set(b2Profile self, float32 broadphase)"},
	 { "b2Profile_broadphase_get", _wrap_b2Profile_broadphase_get, METH_O, "b2Profile_broadphase_get(b2Profile self) -> float32"},
	 { "b2Profile_solveTOI_set", _wrap_b2Profile_solveTOI_set, METH_VARARGS, "b2Profile_solveTOI_set(b2Profile self, float32 solveTOI)"},
	 { "b2Profile_solveTOI_get", _wrap_b2Profile_solveTOI_get, METH_O, "b2Profile_solveTOI_get(b2Profile self) -> float32"},
	 { "new_b2Profile", _wrap_new_b2Profile, METH_NOARGS, "new_b2Profile() -> b2Profile"},
	 { "delete_b2Profile", _wrap_delete_b2Profile, METH_O, "delete_b2Profile(b2Profile self)"},
	 { "b2Profile_swigregister", b2Profile_swigregister, METH_O, NULL},
	 { "b2Profile_swiginit", b2Profile_swiginit, METH_VARARGS, NULL},
	 { "b2SolverData_step_set", _wrap_b2SolverData_step_set, METH_VARARGS, "b2SolverData_step_set(b2SolverData self, b2TimeStep * step)"},
	 { "b2SolverData_step_get", _wrap_b2SolverData_step_get, METH_O, "b2SolverData_step_get(b2SolverData self) -> b2TimeStep *"},
	 { "b2SolverData_positions_set", _wrap_b2SolverData_positions_set, METH_VARARGS, "b2SolverData_positions_set(b2SolverData self, b2Position * positions)"},
	 { "b2SolverData_positions_get", _wrap_b2SolverData_positions_get, METH_O, "b2SolverData_positions_get(b2SolverData self) -> b2Position *"},
	 { "b2SolverData_velocities_set", _wrap_b2SolverData_velocities_set, METH_VARARGS, "b2SolverData_velocities_set(b2SolverData self, b2Velocity * velocities)"},
	 { "b2SolverData_velocities_get", _wrap_b2SolverData_velocities_get, METH_O, "b2SolverData_velocities_get(b2SolverData self) -> b2Velocity *"},
	 { "new_b2SolverData", _wrap_new_b2SolverData, METH_NOARGS, "new_b2SolverData() -> b2SolverData"},
	 { "delete_b2SolverData", _wrap_delete_b2SolverData, METH_O, "delete_b2SolverData(b2SolverData self)"},
	 { "b2SolverData_swigregister", b2SolverData_swigregister, METH_O, NULL},
	 { "b2SolverData_swiginit", b2SolverData_swiginit, METH_VARARGS, NULL},
	 { "new_b2ContactManager", _wrap_new_b2ContactManager, METH_NOARGS, "new_b2ContactManager() -> b2ContactManager"},
	 { "b2ContactManager_AddPair", (PyCFunction)(void(*)(void))_wrap_b2ContactManager_AddPair, METH_VARARGS|METH_KEYWORDS, "b2ContactManager_AddPair(b2ContactManager self, void * proxyUserDataA, void * proxyUserDataB)"},
	 { "b2ContactManager_FindNewContacts", _wrap_b2ContactManager_FindNewContacts, METH_O, "b2ContactManager_FindNewContacts(b2ContactManager self)"},
	 { "b2ContactManager_Destroy", (PyCFunction)(void(*)(void))_wrap_b2ContactManager_Destroy, METH_VARARGS|METH_KEYWORDS, "b2ContactManager_Destroy(b2ContactManager self, b2Contact c)"},
	 { "b2ContactManager_Collide", _wrap_b2ContactManager_Collide, METH_O, "b2ContactManager_Collide(b2ContactManager self)"},
	 { "b2ContactManager_broadPhase_set", _wrap_b2ContactManager_broadPhase_set, METH_VARARGS, "b2ContactManager_broadPhase_set(b2ContactManager self, b2BroadPhase m_broadPhase)"},
	 { "b2ContactManager_broadPhase_get", _wrap_b2ContactManager_broadPhase_get, METH_O, "b2ContactManager_broadPhase_get(b2ContactManager self) -> b2BroadPhase"},
	 { "b2ContactManager_contactList_set", _wrap_b2ContactManager_contactList_set, METH_VARARGS, "b2ContactManager_contactList_set(b2ContactManager self, b2Contact m_contactList)"},
	 { "b2ContactManager_contactList_get", _wrap_b2ContactManager_contactList_get, METH_O, "b2ContactManager_contactList_get(b2ContactManager self) -> b2Contact"},
	 { "b2ContactManager_contactCount_set", _wrap_b2ContactManager_contactCount_set, METH_VARARGS, "b2ContactManager_contactCount_set(b2ContactManager self, int32 m_contactCount)"},
	 { "b2ContactManager_contactCount_get", _wrap_b2ContactManager_contactCount_get, METH_O, "b2ContactManager_contactCount_get(b2ContactManager self) -> int32"},
	 { "b2ContactManager_contactFilter_set", _wrap_b2ContactManager_contactFilter_set, METH_VARARGS, "b2ContactManager_contactFilter_set(b2ContactManager self, b2ContactFilter m_contactFilter)"},
	 { "b2ContactManager_contactFilter_get", _wrap_b2ContactManager_contactFilter_get, METH_O, "b2ContactManager_contactFilter_get(b2ContactManager self) -> b2ContactFilter"},
	 { "b2ContactManager_contactListener_set", _wrap_b2ContactManager_contactListener_set, METH_VARARGS, "b2ContactManager_contactListener_set(b2ContactManager self, b2ContactListener m_contactListener)"},
	 { "b2ContactManager_contactListener_get", _wrap_b2ContactManager_contactListener_get, METH_O, "b2ContactManager_contactListener_get(b2ContactManager self) -> b2ContactListener"},
	 { "b2ContactManager_allocator_set", _wrap_b2ContactManager_allocator_set, METH_VARARGS, "b2ContactManager_allocator_set(b2ContactManager self, b2BlockAllocator * m_allocator)"},
	 { "b2ContactManager_allocator_get", _wrap_b2ContactManager_allocator_get, METH_O, "b2ContactManager_allocator_get(b2ContactManager self) -> b2BlockAllocator *"},
	 { "b2ContactManager___hash__", _wrap_b2ContactManager___hash__, METH_O, "b2ContactManager___hash__(b2ContactManager self) -> long"},
	 { "delete_b2ContactManager", _wrap_delete_b2ContactManager, METH_O, "delete_b2ContactManager(b2ContactManager self)"},
	 { "b2ContactManager_swigregister", b2ContactManager_swigregister, METH_O, NULL},
	 { "b2ContactManager_swiginit", b2ContactManager_swiginit, METH_VARARGS, NULL},
	 { "new_b2World", (PyCFunction)(void(*)(void))_wrap_new_b2World, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2World(b2Vec2 gravity) -> b2World\n"
		"Construct a world object.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gravity: \n"
		"the world gravity vector.\n"
		"\n"
		"doSleep: \n"
		"improve performance by not simulating inactive bodies.\n"
		""},
	 { "delete_b2World", _wrap_delete_b2World, METH_O, "\n"
		"delete_b2World(b2World self)\n"
		"Destruct the world. All physics entities are destroyed and all heap memory is released.\n"
		""},
	 { "b2World___SetDestructionListener_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetDestructionListener_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetDestructionListener_internal(b2World self, b2DestructionListener listener)\n"
		"Register a destruction listener. The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetContactFilter_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetContactFilter_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetContactFilter_internal(b2World self, b2ContactFilter filter)\n"
		"Register a contact filter to provide specific control over collision. Otherwise the default filter is used (b2_defaultFilter). The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetContactListener_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetContactListener_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetContactListener_internal(b2World self, b2ContactListener listener)\n"
		"Register a contact event listener. The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetDebugDraw_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetDebugDraw_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetDebugDraw_internal(b2World self, b2Draw debugDraw)\n"
		"Register a routine for debug drawing. The debug draw functions are called inside with  b2World::DrawDebugDatamethod. The debug draw object is owned by you and must remain in scope.\n"
		""},
	 { "b2World_Step", (PyCFunction)(void(*)(void))_wrap_b2World_Step, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World_Step(b2World self, float32 timeStep, int32 velocityIterations, int32 positionIterations)\n"
		"Take a time step. This performs collision detection, integration, and constraint solution.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"timeStep: \n"
		"the amount of time to simulate, this should not vary.\n"
		"\n"
		"velocityIterations: \n"
		"for the velocity constraint solver.\n"
		"\n"
		"positionIterations: \n"
		"for the position constraint solver.\n"
		""},
	 { "b2World_ClearForces", _wrap_b2World_ClearForces, METH_O, "\n"
		"b2World_ClearForces(b2World self)\n"
		"Manually clear the force buffer on all bodies. By default, forces are cleared automatically after each call to Step. The default behavior is modified by calling SetAutoClearForces. The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain a fixed sized time step under a variable frame-rate. When you perform sub-stepping you will disable auto clearing of forces and instead call ClearForces after all sub-steps are complete in one pass of your game loop. \n"
		"See: \n"
		" SetAutoClearForces\n"
		""},
	 { "b2World_DrawDebugData", _wrap_b2World_DrawDebugData, METH_O, "\n"
		"b2World_DrawDebugData(b2World self)\n"
		"Call this to draw shapes and other debug draw data.\n"
		""},
	 { "b2World_QueryAABB", (PyCFunction)(void(*)(void))_wrap_b2World_QueryAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World_QueryAABB(b2World self, b2QueryCallback callback, b2AABB aabb)\n"
		"Query the world for all fixtures that potentially overlap the provided AABB.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"callback: \n"
		"a user implemented callback class.\n"
		"\n"
		"aabb: \n"
		"the query box.\n"
		""},
	 { "b2World_RayCast", (PyCFunction)(void(*)(void))_wrap_b2World_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World_RayCast(b2World self, b2RayCastCallback callback, b2Vec2 point1, b2Vec2 point2)\n"
		"Ray-cast the world for all fixtures in the path of the ray. Your callback controls whether you get the closest point, any point, or n-points. The ray-cast ignores shapes that contain the starting point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"callback: \n"
		"a user implemented callback class.\n"
		"\n"
		"point1: \n"
		"the ray starting point\n"
		"\n"
		"point2: \n"
		"the ray ending point\n"
		""},
	 { "b2World___GetBodyList_internal", _wrap_b2World___GetBodyList_internal, METH_VARARGS, "\n"
		"b2World___GetBodyList_internal(b2World self) -> b2Body\n"
		"b2World___GetBodyList_internal(b2World self) -> b2Body\n"
		"Get the world body list. With the returned body, use  b2Body::GetNextto get the next body in the world list. A NULL body indicates the end of the list. \n"
		"the head of the world body list.\n"
		""},
	 { "b2World___GetJointList_internal", _wrap_b2World___GetJointList_internal, METH_VARARGS, "\n"
		"b2World___GetJointList_internal(b2World self) -> b2Joint\n"
		"b2World___GetJointList_internal(b2World self) -> b2Joint\n"
		"Get the world joint list. With the returned joint, use  b2Joint::GetNextto get the next joint in the world list. A NULL joint indicates the end of the list. \n"
		"the head of the world joint list.\n"
		""},
	 { "b2World___GetContactList_internal", _wrap_b2World___GetContactList_internal, METH_VARARGS, "\n"
		"b2World___GetContactList_internal(b2World self) -> b2Contact\n"
		"b2World___GetContactList_internal(b2World self) -> b2Contact\n"
		"Get the world contact list. With the returned contact, use  b2Contact::GetNextto get the next contact in the world list. A NULL contact indicates the end of the list. \n"
		"the head of the world contact list.\n"
		"\n"
		"WARNING: \n"
		"contacts are\n"
		""},
	 { "b2World_SetAllowSleeping", (PyCFunction)(void(*)(void))_wrap_b2World_SetAllowSleeping, METH_VARARGS|METH_KEYWORDS, "b2World_SetAllowSleeping(b2World self, bool flag)"},
	 { "b2World_GetAllowSleeping", _wrap_b2World_GetAllowSleeping, METH_O, "b2World_GetAllowSleeping(b2World self) -> bool"},
	 { "b2World___SetWarmStarting", (PyCFunction)(void(*)(void))_wrap_b2World___SetWarmStarting, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetWarmStarting(b2World self, bool flag)\n"
		"Enable/disable warm starting. For testing.\n"
		""},
	 { "b2World___GetWarmStarting", _wrap_b2World___GetWarmStarting, METH_O, "b2World___GetWarmStarting(b2World self) -> bool"},
	 { "b2World___SetContinuousPhysics", (PyCFunction)(void(*)(void))_wrap_b2World___SetContinuousPhysics, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetContinuousPhysics(b2World self, bool flag)\n"
		"Enable/disable continuous physics. For testing.\n"
		""},
	 { "b2World___GetContinuousPhysics", _wrap_b2World___GetContinuousPhysics, METH_O, "b2World___GetContinuousPhysics(b2World self) -> bool"},
	 { "b2World___SetSubStepping", (PyCFunction)(void(*)(void))_wrap_b2World___SetSubStepping, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetSubStepping(b2World self, bool flag)\n"
		"Enable/disable single stepped continuous physics. For testing.\n"
		""},
	 { "b2World___GetSubStepping", _wrap_b2World___GetSubStepping, METH_O, "b2World___GetSubStepping(b2World self) -> bool"},
	 { "b2World___GetProxyCount", _wrap_b2World___GetProxyCount, METH_O, "\n"
		"b2World___GetProxyCount(b2World self) -> int32\n"
		"Get the number of broad-phase proxies.\n"
		""},
	 { "b2World___GetBodyCount", _wrap_b2World___GetBodyCount, METH_O, "\n"
		"b2World___GetBodyCount(b2World self) -> int32\n"
		"Get the number of bodies.\n"
		""},
	 { "b2World___GetJointCount", _wrap_b2World___GetJointCount, METH_O, "\n"
		"b2World___GetJointCount(b2World self) -> int32\n"
		"Get the number of joints.\n"
		""},
	 { "b2World___GetContactCount", _wrap_b2World___GetContactCount, METH_O, "\n"
		"b2World___GetContactCount(b2World self) -> int32\n"
		"Get the number of contacts (each may have 0 or more contact points).\n"
		""},
	 { "b2World_GetTreeHeight", _wrap_b2World_GetTreeHeight, METH_O, "b2World_GetTreeHeight(b2World self) -> int32"},
	 { "b2World_GetTreeBalance", _wrap_b2World_GetTreeBalance, METH_O, "b2World_GetTreeBalance(b2World self) -> int32"},
	 { "b2World_GetTreeQuality", _wrap_b2World_GetTreeQuality, METH_O, "b2World_GetTreeQuality(b2World self) -> float32"},
	 { "b2World___SetGravity", (PyCFunction)(void(*)(void))_wrap_b2World___SetGravity, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetGravity(b2World self, b2Vec2 gravity)\n"
		"Change the global gravity vector.\n"
		""},
	 { "b2World___GetGravity", _wrap_b2World___GetGravity, METH_O, "\n"
		"b2World___GetGravity(b2World self) -> b2Vec2\n"
		"Get the global gravity vector.\n"
		""},
	 { "b2World___IsLocked", _wrap_b2World___IsLocked, METH_O, "\n"
		"b2World___IsLocked(b2World self) -> bool\n"
		"Is the world locked (in the middle of a time step).\n"
		""},
	 { "b2World___SetAutoClearForces", (PyCFunction)(void(*)(void))_wrap_b2World___SetAutoClearForces, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World___SetAutoClearForces(b2World self, bool flag)\n"
		"Set flag to control automatic clearing of forces after each time step.\n"
		""},
	 { "b2World___GetAutoClearForces", _wrap_b2World___GetAutoClearForces, METH_O, "\n"
		"b2World___GetAutoClearForces(b2World self) -> bool\n"
		"Get the flag that controls automatic clearing of forces after each time step.\n"
		""},
	 { "b2World_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2World_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "b2World_ShiftOrigin(b2World self, b2Vec2 newOrigin)"},
	 { "b2World___GetContactManager", _wrap_b2World___GetContactManager, METH_O, "\n"
		"b2World___GetContactManager(b2World self) -> b2ContactManager\n"
		"Get the contact manager for testing.\n"
		""},
	 { "b2World_GetProfile", _wrap_b2World_GetProfile, METH_O, "b2World_GetProfile(b2World self) -> b2Profile"},
	 { "b2World_Dump", _wrap_b2World_Dump, METH_O, "b2World_Dump(b2World self)"},
	 { "b2World___hash__", _wrap_b2World___hash__, METH_O, "b2World___hash__(b2World self) -> long"},
	 { "b2World___CreateBody", (PyCFunction)(void(*)(void))_wrap_b2World___CreateBody, METH_VARARGS|METH_KEYWORDS, "b2World___CreateBody(b2World self, b2BodyDef defn) -> b2Body"},
	 { "b2World___CreateJoint", (PyCFunction)(void(*)(void))_wrap_b2World___CreateJoint, METH_VARARGS|METH_KEYWORDS, "b2World___CreateJoint(b2World self, b2JointDef defn) -> b2Joint"},
	 { "b2World_DestroyBody", (PyCFunction)(void(*)(void))_wrap_b2World_DestroyBody, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World_DestroyBody(b2World self, b2Body body)\n"
		"Destroy a rigid body given a definition. No reference to the definition is retained. This function is locked during callbacks. \n"
		"WARNING: \n"
		"This automatically deletes all associated shapes and joints. \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2World_DestroyJoint", (PyCFunction)(void(*)(void))_wrap_b2World_DestroyJoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2World_DestroyJoint(b2World self, b2Joint joint)\n"
		"Destroy a joint. This may cause the connected bodies to begin colliding. \n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2World_swigregister", b2World_swigregister, METH_O, NULL},
	 { "b2World_swiginit", b2World_swiginit, METH_VARARGS, NULL},
	 { "b2MixFriction", (PyCFunction)(void(*)(void))_wrap_b2MixFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MixFriction(float32 friction1, float32 friction2) -> float32\n"
		"Friction mixing law. Feel free to customize this.\n"
		""},
	 { "b2MixRestitution", (PyCFunction)(void(*)(void))_wrap_b2MixRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MixRestitution(float32 restitution1, float32 restitution2) -> float32\n"
		"Restitution mixing law. Feel free to customize this.\n"
		""},
	 { "b2ContactEdge_other_set", _wrap_b2ContactEdge_other_set, METH_VARARGS, "b2ContactEdge_other_set(b2ContactEdge self, b2Body other)"},
	 { "b2ContactEdge_other_get", _wrap_b2ContactEdge_other_get, METH_O, "b2ContactEdge_other_get(b2ContactEdge self) -> b2Body"},
	 { "b2ContactEdge_contact_set", _wrap_b2ContactEdge_contact_set, METH_VARARGS, "b2ContactEdge_contact_set(b2ContactEdge self, b2Contact contact)"},
	 { "b2ContactEdge_contact_get", _wrap_b2ContactEdge_contact_get, METH_O, "b2ContactEdge_contact_get(b2ContactEdge self) -> b2Contact"},
	 { "b2ContactEdge_prev_set", _wrap_b2ContactEdge_prev_set, METH_VARARGS, "b2ContactEdge_prev_set(b2ContactEdge self, b2ContactEdge prev)"},
	 { "b2ContactEdge_prev_get", _wrap_b2ContactEdge_prev_get, METH_O, "b2ContactEdge_prev_get(b2ContactEdge self) -> b2ContactEdge"},
	 { "b2ContactEdge_next_set", _wrap_b2ContactEdge_next_set, METH_VARARGS, "b2ContactEdge_next_set(b2ContactEdge self, b2ContactEdge next)"},
	 { "b2ContactEdge_next_get", _wrap_b2ContactEdge_next_get, METH_O, "b2ContactEdge_next_get(b2ContactEdge self) -> b2ContactEdge"},
	 { "b2ContactEdge___hash__", _wrap_b2ContactEdge___hash__, METH_O, "b2ContactEdge___hash__(b2ContactEdge self) -> long"},
	 { "new_b2ContactEdge", _wrap_new_b2ContactEdge, METH_NOARGS, "\n"
		"new_b2ContactEdge() -> b2ContactEdge\n"
		"A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each contact has two contact nodes, one for each attached body.\n"
		""},
	 { "delete_b2ContactEdge", _wrap_delete_b2ContactEdge, METH_O, "delete_b2ContactEdge(b2ContactEdge self)"},
	 { "b2ContactEdge_swigregister", b2ContactEdge_swigregister, METH_O, NULL},
	 { "b2ContactEdge_swiginit", b2ContactEdge_swiginit, METH_VARARGS, NULL},
	 { "b2Contact___GetManifold", _wrap_b2Contact___GetManifold, METH_VARARGS, "\n"
		"b2Contact___GetManifold(b2Contact self) -> b2Manifold\n"
		"b2Contact___GetManifold(b2Contact self) -> b2Manifold\n"
		"Get the contact manifold. Do not modify the manifold unless you understand the internals of Box2D.\n"
		""},
	 { "b2Contact___GetWorldManifold_internal", (PyCFunction)(void(*)(void))_wrap_b2Contact___GetWorldManifold_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Contact___GetWorldManifold_internal(b2Contact self, b2WorldManifold worldManifold)\n"
		"Get the world manifold.\n"
		""},
	 { "b2Contact___IsTouching", _wrap_b2Contact___IsTouching, METH_O, "\n"
		"b2Contact___IsTouching(b2Contact self) -> bool\n"
		"Is this contact touching?\n"
		""},
	 { "b2Contact___SetEnabled", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetEnabled, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Contact___SetEnabled(b2Contact self, bool flag)\n"
		"Enable/disable this contact. This can be used inside the pre-solve contact listener. The contact is only disabled for the current time step (or sub-step in continuous collisions).\n"
		""},
	 { "b2Contact___IsEnabled", _wrap_b2Contact___IsEnabled, METH_O, "\n"
		"b2Contact___IsEnabled(b2Contact self) -> bool\n"
		"Has this contact been disabled?\n"
		""},
	 { "b2Contact___GetNext", _wrap_b2Contact___GetNext, METH_VARARGS, "\n"
		"b2Contact___GetNext(b2Contact self) -> b2Contact\n"
		"b2Contact___GetNext(b2Contact self) -> b2Contact\n"
		"Get the next contact in the world's contact list.\n"
		""},
	 { "b2Contact___GetFixtureA", _wrap_b2Contact___GetFixtureA, METH_VARARGS, "\n"
		"b2Contact___GetFixtureA(b2Contact self) -> b2Fixture\n"
		"b2Contact___GetFixtureA(b2Contact self) -> b2Fixture\n"
		"Get fixture A in this contact.\n"
		""},
	 { "b2Contact___GetChildIndexA", _wrap_b2Contact___GetChildIndexA, METH_O, "\n"
		"b2Contact___GetChildIndexA(b2Contact self) -> int32\n"
		"Get the child primitive index for fixture A.\n"
		""},
	 { "b2Contact___GetFixtureB", _wrap_b2Contact___GetFixtureB, METH_VARARGS, "\n"
		"b2Contact___GetFixtureB(b2Contact self) -> b2Fixture\n"
		"b2Contact___GetFixtureB(b2Contact self) -> b2Fixture\n"
		"Get fixture B in this contact.\n"
		""},
	 { "b2Contact___GetChildIndexB", _wrap_b2Contact___GetChildIndexB, METH_O, "\n"
		"b2Contact___GetChildIndexB(b2Contact self) -> int32\n"
		"Get the child primitive index for fixture B.\n"
		""},
	 { "b2Contact___SetFriction", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Contact___SetFriction(b2Contact self, float32 friction)\n"
		"Override the default friction mixture. You can call this in  b2ContactListener::PreSolve. This value persists until set or reset.\n"
		""},
	 { "b2Contact___GetFriction", _wrap_b2Contact___GetFriction, METH_O, "\n"
		"b2Contact___GetFriction(b2Contact self) -> float32\n"
		"Get the friction.\n"
		""},
	 { "b2Contact_ResetFriction", _wrap_b2Contact_ResetFriction, METH_O, "\n"
		"b2Contact_ResetFriction(b2Contact self)\n"
		"Reset the friction mixture to the default value.\n"
		""},
	 { "b2Contact___SetRestitution", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Contact___SetRestitution(b2Contact self, float32 restitution)\n"
		"Override the default restitution mixture. You can call this in  b2ContactListener::PreSolve. The value persists until you set or reset.\n"
		""},
	 { "b2Contact___GetRestitution", _wrap_b2Contact___GetRestitution, METH_O, "\n"
		"b2Contact___GetRestitution(b2Contact self) -> float32\n"
		"Get the restitution.\n"
		""},
	 { "b2Contact_ResetRestitution", _wrap_b2Contact_ResetRestitution, METH_O, "\n"
		"b2Contact_ResetRestitution(b2Contact self)\n"
		"Reset the restitution to the default value.\n"
		""},
	 { "b2Contact___SetTangentSpeed", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetTangentSpeed, METH_VARARGS|METH_KEYWORDS, "b2Contact___SetTangentSpeed(b2Contact self, float32 speed)"},
	 { "b2Contact___GetTangentSpeed", _wrap_b2Contact___GetTangentSpeed, METH_O, "b2Contact___GetTangentSpeed(b2Contact self) -> float32"},
	 { "b2Contact_Evaluate", (PyCFunction)(void(*)(void))_wrap_b2Contact_Evaluate, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Contact_Evaluate(b2Contact self, b2Manifold manifold, b2Transform xfA, b2Transform xfB)\n"
		"Evaluate this contact with your own manifold and transforms.\n"
		""},
	 { "b2Contact___hash__", _wrap_b2Contact___hash__, METH_O, "b2Contact___hash__(b2Contact self) -> long"},
	 { "b2Contact_swigregister", b2Contact_swigregister, METH_O, NULL},
	 { "b2Jacobian_linear_set", _wrap_b2Jacobian_linear_set, METH_VARARGS, "b2Jacobian_linear_set(b2Jacobian self, b2Vec2 linear)"},
	 { "b2Jacobian_linear_get", _wrap_b2Jacobian_linear_get, METH_O, "b2Jacobian_linear_get(b2Jacobian self) -> b2Vec2"},
	 { "b2Jacobian_angularA_set", _wrap_b2Jacobian_angularA_set, METH_VARARGS, "b2Jacobian_angularA_set(b2Jacobian self, float32 angularA)"},
	 { "b2Jacobian_angularA_get", _wrap_b2Jacobian_angularA_get, METH_O, "b2Jacobian_angularA_get(b2Jacobian self) -> float32"},
	 { "b2Jacobian_angularB_set", _wrap_b2Jacobian_angularB_set, METH_VARARGS, "b2Jacobian_angularB_set(b2Jacobian self, float32 angularB)"},
	 { "b2Jacobian_angularB_get", _wrap_b2Jacobian_angularB_get, METH_O, "b2Jacobian_angularB_get(b2Jacobian self) -> float32"},
	 { "b2Jacobian___hash__", _wrap_b2Jacobian___hash__, METH_O, "b2Jacobian___hash__(b2Jacobian self) -> long"},
	 { "new_b2Jacobian", _wrap_new_b2Jacobian, METH_NOARGS, "new_b2Jacobian() -> b2Jacobian"},
	 { "delete_b2Jacobian", _wrap_delete_b2Jacobian, METH_O, "delete_b2Jacobian(b2Jacobian self)"},
	 { "b2Jacobian_swigregister", b2Jacobian_swigregister, METH_O, NULL},
	 { "b2Jacobian_swiginit", b2Jacobian_swiginit, METH_VARARGS, NULL},
	 { "b2JointEdge_other_set", _wrap_b2JointEdge_other_set, METH_VARARGS, "b2JointEdge_other_set(b2JointEdge self, b2Body other)"},
	 { "b2JointEdge_other_get", _wrap_b2JointEdge_other_get, METH_O, "b2JointEdge_other_get(b2JointEdge self) -> b2Body"},
	 { "b2JointEdge_joint_set", _wrap_b2JointEdge_joint_set, METH_VARARGS, "b2JointEdge_joint_set(b2JointEdge self, b2Joint joint)"},
	 { "b2JointEdge_joint_get", _wrap_b2JointEdge_joint_get, METH_O, "b2JointEdge_joint_get(b2JointEdge self) -> b2Joint"},
	 { "b2JointEdge_prev_set", _wrap_b2JointEdge_prev_set, METH_VARARGS, "b2JointEdge_prev_set(b2JointEdge self, b2JointEdge prev)"},
	 { "b2JointEdge_prev_get", _wrap_b2JointEdge_prev_get, METH_O, "b2JointEdge_prev_get(b2JointEdge self) -> b2JointEdge"},
	 { "b2JointEdge_next_set", _wrap_b2JointEdge_next_set, METH_VARARGS, "b2JointEdge_next_set(b2JointEdge self, b2JointEdge next)"},
	 { "b2JointEdge_next_get", _wrap_b2JointEdge_next_get, METH_O, "b2JointEdge_next_get(b2JointEdge self) -> b2JointEdge"},
	 { "b2JointEdge___hash__", _wrap_b2JointEdge___hash__, METH_O, "b2JointEdge___hash__(b2JointEdge self) -> long"},
	 { "new_b2JointEdge", _wrap_new_b2JointEdge, METH_NOARGS, "\n"
		"new_b2JointEdge() -> b2JointEdge\n"
		"A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two joint nodes, one for each attached body.\n"
		""},
	 { "delete_b2JointEdge", _wrap_delete_b2JointEdge, METH_O, "delete_b2JointEdge(b2JointEdge self)"},
	 { "b2JointEdge_swigregister", b2JointEdge_swigregister, METH_O, NULL},
	 { "b2JointEdge_swiginit", b2JointEdge_swiginit, METH_VARARGS, NULL},
	 { "new_b2JointDef", _wrap_new_b2JointDef, METH_NOARGS, "\n"
		"new_b2JointDef() -> b2JointDef\n"
		"Joint definitions are used to construct joints.\n"
		""},
	 { "b2JointDef_type_set", _wrap_b2JointDef_type_set, METH_VARARGS, "b2JointDef_type_set(b2JointDef self, b2JointType type)"},
	 { "b2JointDef_type_get", _wrap_b2JointDef_type_get, METH_O, "b2JointDef_type_get(b2JointDef self) -> b2JointType"},
	 { "b2JointDef_bodyA_set", _wrap_b2JointDef_bodyA_set, METH_VARARGS, "b2JointDef_bodyA_set(b2JointDef self, b2Body bodyA)"},
	 { "b2JointDef_bodyA_get", _wrap_b2JointDef_bodyA_get, METH_O, "b2JointDef_bodyA_get(b2JointDef self) -> b2Body"},
	 { "b2JointDef_bodyB_set", _wrap_b2JointDef_bodyB_set, METH_VARARGS, "b2JointDef_bodyB_set(b2JointDef self, b2Body bodyB)"},
	 { "b2JointDef_bodyB_get", _wrap_b2JointDef_bodyB_get, METH_O, "b2JointDef_bodyB_get(b2JointDef self) -> b2Body"},
	 { "b2JointDef_collideConnected_set", _wrap_b2JointDef_collideConnected_set, METH_VARARGS, "b2JointDef_collideConnected_set(b2JointDef self, bool collideConnected)"},
	 { "b2JointDef_collideConnected_get", _wrap_b2JointDef_collideConnected_get, METH_O, "b2JointDef_collideConnected_get(b2JointDef self) -> bool"},
	 { "b2JointDef___hash__", _wrap_b2JointDef___hash__, METH_O, "b2JointDef___hash__(b2JointDef self) -> long"},
	 { "b2JointDef___GetUserData", _wrap_b2JointDef___GetUserData, METH_O, "b2JointDef___GetUserData(b2JointDef self) -> PyObject *"},
	 { "b2JointDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2JointDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2JointDef___SetUserData(b2JointDef self, PyObject * data)"},
	 { "b2JointDef_ClearUserData", _wrap_b2JointDef_ClearUserData, METH_O, "b2JointDef_ClearUserData(b2JointDef self)"},
	 { "delete_b2JointDef", _wrap_delete_b2JointDef, METH_O, "delete_b2JointDef(b2JointDef self)"},
	 { "b2JointDef_swigregister", b2JointDef_swigregister, METH_O, NULL},
	 { "b2JointDef_swiginit", b2JointDef_swiginit, METH_VARARGS, NULL},
	 { "b2Joint___GetType", _wrap_b2Joint___GetType, METH_O, "\n"
		"b2Joint___GetType(b2Joint self) -> b2JointType\n"
		"Get the type of the concrete joint.\n"
		""},
	 { "b2Joint___GetBodyA", _wrap_b2Joint___GetBodyA, METH_O, "\n"
		"b2Joint___GetBodyA(b2Joint self) -> b2Body\n"
		"Get the first body attached to this joint.\n"
		""},
	 { "b2Joint___GetBodyB", _wrap_b2Joint___GetBodyB, METH_O, "\n"
		"b2Joint___GetBodyB(b2Joint self) -> b2Body\n"
		"Get the second body attached to this joint.\n"
		""},
	 { "b2Joint___GetAnchorA", _wrap_b2Joint___GetAnchorA, METH_O, "\n"
		"b2Joint___GetAnchorA(b2Joint self) -> b2Vec2\n"
		"Get the anchor point on bodyA in world coordinates.\n"
		""},
	 { "b2Joint___GetAnchorB", _wrap_b2Joint___GetAnchorB, METH_O, "\n"
		"b2Joint___GetAnchorB(b2Joint self) -> b2Vec2\n"
		"Get the anchor point on bodyB in world coordinates.\n"
		""},
	 { "b2Joint_GetReactionForce", (PyCFunction)(void(*)(void))_wrap_b2Joint_GetReactionForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Joint_GetReactionForce(b2Joint self, float32 inv_dt) -> b2Vec2\n"
		"Get the reaction force on body2 at the joint anchor in Newtons.\n"
		""},
	 { "b2Joint_GetReactionTorque", (PyCFunction)(void(*)(void))_wrap_b2Joint_GetReactionTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Joint_GetReactionTorque(b2Joint self, float32 inv_dt) -> float32\n"
		"Get the reaction torque on body2 in N*m.\n"
		""},
	 { "b2Joint___GetNext", _wrap_b2Joint___GetNext, METH_VARARGS, "\n"
		"b2Joint___GetNext(b2Joint self) -> b2Joint\n"
		"b2Joint___GetNext(b2Joint self) -> b2Joint\n"
		"Get the next joint the world joint list.\n"
		""},
	 { "b2Joint___IsActive", _wrap_b2Joint___IsActive, METH_O, "\n"
		"b2Joint___IsActive(b2Joint self) -> bool\n"
		"Short-cut function to determine if either body is inactive.\n"
		""},
	 { "b2Joint___GetCollideConnected", _wrap_b2Joint___GetCollideConnected, METH_O, "b2Joint___GetCollideConnected(b2Joint self) -> bool"},
	 { "b2Joint_Dump", _wrap_b2Joint_Dump, METH_O, "b2Joint_Dump(b2Joint self)"},
	 { "b2Joint_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2Joint_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "b2Joint_ShiftOrigin(b2Joint self, b2Vec2 newOrigin)"},
	 { "b2Joint___hash__", _wrap_b2Joint___hash__, METH_O, "b2Joint___hash__(b2Joint self) -> long"},
	 { "b2Joint___GetUserData", _wrap_b2Joint___GetUserData, METH_O, "b2Joint___GetUserData(b2Joint self) -> PyObject *"},
	 { "b2Joint___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Joint___SetUserData, METH_VARARGS|METH_KEYWORDS, "b2Joint___SetUserData(b2Joint self, PyObject * data)"},
	 { "b2Joint_ClearUserData", _wrap_b2Joint_ClearUserData, METH_O, "b2Joint_ClearUserData(b2Joint self)"},
	 { "b2Joint_swigregister", b2Joint_swigregister, METH_O, NULL},
	 { "new_b2DistanceJointDef", _wrap_new_b2DistanceJointDef, METH_NOARGS, "\n"
		"new_b2DistanceJointDef() -> b2DistanceJointDef\n"
		"Distance joint definition. This requires defining an anchor point on both bodies and the non-zero length of the distance joint. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. This helps when saving and loading a game. \n"
		"WARNING: \n"
		"Do not use a zero or short length.\n"
		""},
	 { "b2DistanceJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2DistanceJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceJointDef_Initialize(b2DistanceJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchorA, b2Vec2 anchorB)\n"
		"Initialize the bodies, anchors, and length using the world anchors.\n"
		""},
	 { "b2DistanceJointDef_localAnchorA_set", _wrap_b2DistanceJointDef_localAnchorA_set, METH_VARARGS, "b2DistanceJointDef_localAnchorA_set(b2DistanceJointDef self, b2Vec2 localAnchorA)"},
	 { "b2DistanceJointDef_localAnchorA_get", _wrap_b2DistanceJointDef_localAnchorA_get, METH_O, "b2DistanceJointDef_localAnchorA_get(b2DistanceJointDef self) -> b2Vec2"},
	 { "b2DistanceJointDef_localAnchorB_set", _wrap_b2DistanceJointDef_localAnchorB_set, METH_VARARGS, "b2DistanceJointDef_localAnchorB_set(b2DistanceJointDef self, b2Vec2 localAnchorB)"},
	 { "b2DistanceJointDef_localAnchorB_get", _wrap_b2DistanceJointDef_localAnchorB_get, METH_O, "b2DistanceJointDef_localAnchorB_get(b2DistanceJointDef self) -> b2Vec2"},
	 { "b2DistanceJointDef_length_set", _wrap_b2DistanceJointDef_length_set, METH_VARARGS, "b2DistanceJointDef_length_set(b2DistanceJointDef self, float32 length)"},
	 { "b2DistanceJointDef_length_get", _wrap_b2DistanceJointDef_length_get, METH_O, "b2DistanceJointDef_length_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef_frequencyHz_set", _wrap_b2DistanceJointDef_frequencyHz_set, METH_VARARGS, "b2DistanceJointDef_frequencyHz_set(b2DistanceJointDef self, float32 frequencyHz)"},
	 { "b2DistanceJointDef_frequencyHz_get", _wrap_b2DistanceJointDef_frequencyHz_get, METH_O, "b2DistanceJointDef_frequencyHz_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef_dampingRatio_set", _wrap_b2DistanceJointDef_dampingRatio_set, METH_VARARGS, "b2DistanceJointDef_dampingRatio_set(b2DistanceJointDef self, float32 dampingRatio)"},
	 { "b2DistanceJointDef_dampingRatio_get", _wrap_b2DistanceJointDef_dampingRatio_get, METH_O, "b2DistanceJointDef_dampingRatio_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef___hash__", _wrap_b2DistanceJointDef___hash__, METH_O, "b2DistanceJointDef___hash__(b2DistanceJointDef self) -> long"},
	 { "delete_b2DistanceJointDef", _wrap_delete_b2DistanceJointDef, METH_O, "delete_b2DistanceJointDef(b2DistanceJointDef self)"},
	 { "b2DistanceJointDef_swigregister", b2DistanceJointDef_swigregister, METH_O, NULL},
	 { "b2DistanceJointDef_swiginit", b2DistanceJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceJoint_GetLocalAnchorA", _wrap_b2DistanceJoint_GetLocalAnchorA, METH_O, "b2DistanceJoint_GetLocalAnchorA(b2DistanceJoint self) -> b2Vec2"},
	 { "b2DistanceJoint_GetLocalAnchorB", _wrap_b2DistanceJoint_GetLocalAnchorB, METH_O, "b2DistanceJoint_GetLocalAnchorB(b2DistanceJoint self) -> b2Vec2"},
	 { "b2DistanceJoint___SetLength", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetLength, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2DistanceJoint___SetLength(b2DistanceJoint self, float32 length)\n"
		"Set/get the natural length. Manipulating the length can lead to non-physical behavior when the frequency is zero.\n"
		""},
	 { "b2DistanceJoint___GetLength", _wrap_b2DistanceJoint___GetLength, METH_O, "b2DistanceJoint___GetLength(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetFrequency, METH_VARARGS|METH_KEYWORDS, "b2DistanceJoint___SetFrequency(b2DistanceJoint self, float32 hz)"},
	 { "b2DistanceJoint___GetFrequency", _wrap_b2DistanceJoint___GetFrequency, METH_O, "b2DistanceJoint___GetFrequency(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "b2DistanceJoint___SetDampingRatio(b2DistanceJoint self, float32 ratio)"},
	 { "b2DistanceJoint___GetDampingRatio", _wrap_b2DistanceJoint___GetDampingRatio, METH_O, "b2DistanceJoint___GetDampingRatio(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___hash__", _wrap_b2DistanceJoint___hash__, METH_O, "b2DistanceJoint___hash__(b2DistanceJoint self) -> long"},
	 { "delete_b2DistanceJoint", _wrap_delete_b2DistanceJoint, METH_O, "delete_b2DistanceJoint(b2DistanceJoint self)"},
	 { "b2DistanceJoint_swigregister", b2DistanceJoint_swigregister, METH_O, NULL},
	 { "new_b2FrictionJointDef", _wrap_new_b2FrictionJointDef, METH_NOARGS, "\n"
		"new_b2FrictionJointDef() -> b2FrictionJointDef\n"
		"Friction joint definition.\n"
		""},
	 { "b2FrictionJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2FrictionJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2FrictionJointDef_Initialize(b2FrictionJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2FrictionJointDef_localAnchorA_set", _wrap_b2FrictionJointDef_localAnchorA_set, METH_VARARGS, "b2FrictionJointDef_localAnchorA_set(b2FrictionJointDef self, b2Vec2 localAnchorA)"},
	 { "b2FrictionJointDef_localAnchorA_get", _wrap_b2FrictionJointDef_localAnchorA_get, METH_O, "b2FrictionJointDef_localAnchorA_get(b2FrictionJointDef self) -> b2Vec2"},
	 { "b2FrictionJointDef_localAnchorB_set", _wrap_b2FrictionJointDef_localAnchorB_set, METH_VARARGS, "b2FrictionJointDef_localAnchorB_set(b2FrictionJointDef self, b2Vec2 localAnchorB)"},
	 { "b2FrictionJointDef_localAnchorB_get", _wrap_b2FrictionJointDef_localAnchorB_get, METH_O, "b2FrictionJointDef_localAnchorB_get(b2FrictionJointDef self) -> b2Vec2"},
	 { "b2FrictionJointDef_maxForce_set", _wrap_b2FrictionJointDef_maxForce_set, METH_VARARGS, "b2FrictionJointDef_maxForce_set(b2FrictionJointDef self, float32 maxForce)"},
	 { "b2FrictionJointDef_maxForce_get", _wrap_b2FrictionJointDef_maxForce_get, METH_O, "b2FrictionJointDef_maxForce_get(b2FrictionJointDef self) -> float32"},
	 { "b2FrictionJointDef_maxTorque_set", _wrap_b2FrictionJointDef_maxTorque_set, METH_VARARGS, "b2FrictionJointDef_maxTorque_set(b2FrictionJointDef self, float32 maxTorque)"},
	 { "b2FrictionJointDef_maxTorque_get", _wrap_b2FrictionJointDef_maxTorque_get, METH_O, "b2FrictionJointDef_maxTorque_get(b2FrictionJointDef self) -> float32"},
	 { "b2FrictionJointDef___hash__", _wrap_b2FrictionJointDef___hash__, METH_O, "b2FrictionJointDef___hash__(b2FrictionJointDef self) -> long"},
	 { "delete_b2FrictionJointDef", _wrap_delete_b2FrictionJointDef, METH_O, "delete_b2FrictionJointDef(b2FrictionJointDef self)"},
	 { "b2FrictionJointDef_swigregister", b2FrictionJointDef_swigregister, METH_O, NULL},
	 { "b2FrictionJointDef_swiginit", b2FrictionJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2FrictionJoint_GetLocalAnchorA", _wrap_b2FrictionJoint_GetLocalAnchorA, METH_O, "b2FrictionJoint_GetLocalAnchorA(b2FrictionJoint self) -> b2Vec2"},
	 { "b2FrictionJoint_GetLocalAnchorB", _wrap_b2FrictionJoint_GetLocalAnchorB, METH_O, "b2FrictionJoint_GetLocalAnchorB(b2FrictionJoint self) -> b2Vec2"},
	 { "b2FrictionJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2FrictionJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2FrictionJoint___SetMaxForce(b2FrictionJoint self, float32 force)\n"
		"Set the maximum friction force in N.\n"
		""},
	 { "b2FrictionJoint___GetMaxForce", _wrap_b2FrictionJoint___GetMaxForce, METH_O, "\n"
		"b2FrictionJoint___GetMaxForce(b2FrictionJoint self) -> float32\n"
		"Get the maximum friction force in N.\n"
		""},
	 { "b2FrictionJoint___SetMaxTorque", (PyCFunction)(void(*)(void))_wrap_b2FrictionJoint___SetMaxTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2FrictionJoint___SetMaxTorque(b2FrictionJoint self, float32 torque)\n"
		"Set the maximum friction torque in N*m.\n"
		""},
	 { "b2FrictionJoint___GetMaxTorque", _wrap_b2FrictionJoint___GetMaxTorque, METH_O, "\n"
		"b2FrictionJoint___GetMaxTorque(b2FrictionJoint self) -> float32\n"
		"Get the maximum friction torque in N*m.\n"
		""},
	 { "b2FrictionJoint___hash__", _wrap_b2FrictionJoint___hash__, METH_O, "b2FrictionJoint___hash__(b2FrictionJoint self) -> long"},
	 { "delete_b2FrictionJoint", _wrap_delete_b2FrictionJoint, METH_O, "delete_b2FrictionJoint(b2FrictionJoint self)"},
	 { "b2FrictionJoint_swigregister", b2FrictionJoint_swigregister, METH_O, NULL},
	 { "new_b2GearJointDef", _wrap_new_b2GearJointDef, METH_NOARGS, "\n"
		"new_b2GearJointDef() -> b2GearJointDef\n"
		"Gear joint definition. This definition requires two existing revolute or prismatic joints (any combination will work). The provided joints must attach a dynamic body to a static body.\n"
		""},
	 { "b2GearJointDef_joint1_set", _wrap_b2GearJointDef_joint1_set, METH_VARARGS, "b2GearJointDef_joint1_set(b2GearJointDef self, b2Joint joint1)"},
	 { "b2GearJointDef_joint1_get", _wrap_b2GearJointDef_joint1_get, METH_O, "b2GearJointDef_joint1_get(b2GearJointDef self) -> b2Joint"},
	 { "b2GearJointDef_joint2_set", _wrap_b2GearJointDef_joint2_set, METH_VARARGS, "b2GearJointDef_joint2_set(b2GearJointDef self, b2Joint joint2)"},
	 { "b2GearJointDef_joint2_get", _wrap_b2GearJointDef_joint2_get, METH_O, "b2GearJointDef_joint2_get(b2GearJointDef self) -> b2Joint"},
	 { "b2GearJointDef_ratio_set", _wrap_b2GearJointDef_ratio_set, METH_VARARGS, "b2GearJointDef_ratio_set(b2GearJointDef self, float32 ratio)"},
	 { "b2GearJointDef_ratio_get", _wrap_b2GearJointDef_ratio_get, METH_O, "b2GearJointDef_ratio_get(b2GearJointDef self) -> float32"},
	 { "b2GearJointDef___hash__", _wrap_b2GearJointDef___hash__, METH_O, "b2GearJointDef___hash__(b2GearJointDef self) -> long"},
	 { "delete_b2GearJointDef", _wrap_delete_b2GearJointDef, METH_O, "delete_b2GearJointDef(b2GearJointDef self)"},
	 { "b2GearJointDef_swigregister", b2GearJointDef_swigregister, METH_O, NULL},
	 { "b2GearJointDef_swiginit", b2GearJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2GearJoint_GetJoint1", _wrap_b2GearJoint_GetJoint1, METH_O, "b2GearJoint_GetJoint1(b2GearJoint self) -> b2Joint"},
	 { "b2GearJoint_GetJoint2", _wrap_b2GearJoint_GetJoint2, METH_O, "b2GearJoint_GetJoint2(b2GearJoint self) -> b2Joint"},
	 { "b2GearJoint___SetRatio", (PyCFunction)(void(*)(void))_wrap_b2GearJoint___SetRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2GearJoint___SetRatio(b2GearJoint self, float32 ratio)\n"
		"Set/Get the gear ratio.\n"
		""},
	 { "b2GearJoint___GetRatio", _wrap_b2GearJoint___GetRatio, METH_O, "b2GearJoint___GetRatio(b2GearJoint self) -> float32"},
	 { "b2GearJoint___hash__", _wrap_b2GearJoint___hash__, METH_O, "b2GearJoint___hash__(b2GearJoint self) -> long"},
	 { "delete_b2GearJoint", _wrap_delete_b2GearJoint, METH_O, "delete_b2GearJoint(b2GearJoint self)"},
	 { "b2GearJoint_swigregister", b2GearJoint_swigregister, METH_O, NULL},
	 { "new_b2MotorJointDef", _wrap_new_b2MotorJointDef, METH_NOARGS, "new_b2MotorJointDef() -> b2MotorJointDef"},
	 { "b2MotorJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2MotorJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "b2MotorJointDef_Initialize(b2MotorJointDef self, b2Body bodyA, b2Body bodyB)"},
	 { "b2MotorJointDef_linearOffset_set", _wrap_b2MotorJointDef_linearOffset_set, METH_VARARGS, "b2MotorJointDef_linearOffset_set(b2MotorJointDef self, b2Vec2 linearOffset)"},
	 { "b2MotorJointDef_linearOffset_get", _wrap_b2MotorJointDef_linearOffset_get, METH_O, "b2MotorJointDef_linearOffset_get(b2MotorJointDef self) -> b2Vec2"},
	 { "b2MotorJointDef_angularOffset_set", _wrap_b2MotorJointDef_angularOffset_set, METH_VARARGS, "b2MotorJointDef_angularOffset_set(b2MotorJointDef self, float32 angularOffset)"},
	 { "b2MotorJointDef_angularOffset_get", _wrap_b2MotorJointDef_angularOffset_get, METH_O, "b2MotorJointDef_angularOffset_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_maxForce_set", _wrap_b2MotorJointDef_maxForce_set, METH_VARARGS, "b2MotorJointDef_maxForce_set(b2MotorJointDef self, float32 maxForce)"},
	 { "b2MotorJointDef_maxForce_get", _wrap_b2MotorJointDef_maxForce_get, METH_O, "b2MotorJointDef_maxForce_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_maxTorque_set", _wrap_b2MotorJointDef_maxTorque_set, METH_VARARGS, "b2MotorJointDef_maxTorque_set(b2MotorJointDef self, float32 maxTorque)"},
	 { "b2MotorJointDef_maxTorque_get", _wrap_b2MotorJointDef_maxTorque_get, METH_O, "b2MotorJointDef_maxTorque_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_correctionFactor_set", _wrap_b2MotorJointDef_correctionFactor_set, METH_VARARGS, "b2MotorJointDef_correctionFactor_set(b2MotorJointDef self, float32 correctionFactor)"},
	 { "b2MotorJointDef_correctionFactor_get", _wrap_b2MotorJointDef_correctionFactor_get, METH_O, "b2MotorJointDef_correctionFactor_get(b2MotorJointDef self) -> float32"},
	 { "delete_b2MotorJointDef", _wrap_delete_b2MotorJointDef, METH_O, "delete_b2MotorJointDef(b2MotorJointDef self)"},
	 { "b2MotorJointDef_swigregister", b2MotorJointDef_swigregister, METH_O, NULL},
	 { "b2MotorJointDef_swiginit", b2MotorJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2MotorJoint___SetLinearOffset", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetLinearOffset, METH_VARARGS|METH_KEYWORDS, "b2MotorJoint___SetLinearOffset(b2MotorJoint self, b2Vec2 linearOffset)"},
	 { "b2MotorJoint___GetLinearOffset", _wrap_b2MotorJoint___GetLinearOffset, METH_O, "b2MotorJoint___GetLinearOffset(b2MotorJoint self) -> b2Vec2"},
	 { "b2MotorJoint___SetAngularOffset", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetAngularOffset, METH_VARARGS|METH_KEYWORDS, "b2MotorJoint___SetAngularOffset(b2MotorJoint self, float32 angularOffset)"},
	 { "b2MotorJoint___GetAngularOffset", _wrap_b2MotorJoint___GetAngularOffset, METH_O, "b2MotorJoint___GetAngularOffset(b2MotorJoint self) -> float32"},
	 { "b2MotorJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "b2MotorJoint___SetMaxForce(b2MotorJoint self, float32 force)"},
	 { "b2MotorJoint___GetMaxForce", _wrap_b2MotorJoint___GetMaxForce, METH_O, "b2MotorJoint___GetMaxForce(b2MotorJoint self) -> float32"},
	 { "b2MotorJoint___SetMaxTorque", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetMaxTorque, METH_VARARGS|METH_KEYWORDS, "b2MotorJoint___SetMaxTorque(b2MotorJoint self, float32 torque)"},
	 { "b2MotorJoint___GetMaxTorque", _wrap_b2MotorJoint___GetMaxTorque, METH_O, "b2MotorJoint___GetMaxTorque(b2MotorJoint self) -> float32"},
	 { "delete_b2MotorJoint", _wrap_delete_b2MotorJoint, METH_O, "delete_b2MotorJoint(b2MotorJoint self)"},
	 { "b2MotorJoint_swigregister", b2MotorJoint_swigregister, METH_O, NULL},
	 { "new_b2MouseJointDef", _wrap_new_b2MouseJointDef, METH_NOARGS, "\n"
		"new_b2MouseJointDef() -> b2MouseJointDef\n"
		"Mouse joint definition. This requires a world target point, tuning parameters, and the time step.\n"
		""},
	 { "b2MouseJointDef_target_set", _wrap_b2MouseJointDef_target_set, METH_VARARGS, "b2MouseJointDef_target_set(b2MouseJointDef self, b2Vec2 target)"},
	 { "b2MouseJointDef_target_get", _wrap_b2MouseJointDef_target_get, METH_O, "b2MouseJointDef_target_get(b2MouseJointDef self) -> b2Vec2"},
	 { "b2MouseJointDef_maxForce_set", _wrap_b2MouseJointDef_maxForce_set, METH_VARARGS, "b2MouseJointDef_maxForce_set(b2MouseJointDef self, float32 maxForce)"},
	 { "b2MouseJointDef_maxForce_get", _wrap_b2MouseJointDef_maxForce_get, METH_O, "b2MouseJointDef_maxForce_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef_frequencyHz_set", _wrap_b2MouseJointDef_frequencyHz_set, METH_VARARGS, "b2MouseJointDef_frequencyHz_set(b2MouseJointDef self, float32 frequencyHz)"},
	 { "b2MouseJointDef_frequencyHz_get", _wrap_b2MouseJointDef_frequencyHz_get, METH_O, "b2MouseJointDef_frequencyHz_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef_dampingRatio_set", _wrap_b2MouseJointDef_dampingRatio_set, METH_VARARGS, "b2MouseJointDef_dampingRatio_set(b2MouseJointDef self, float32 dampingRatio)"},
	 { "b2MouseJointDef_dampingRatio_get", _wrap_b2MouseJointDef_dampingRatio_get, METH_O, "b2MouseJointDef_dampingRatio_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef___hash__", _wrap_b2MouseJointDef___hash__, METH_O, "b2MouseJointDef___hash__(b2MouseJointDef self) -> long"},
	 { "delete_b2MouseJointDef", _wrap_delete_b2MouseJointDef, METH_O, "delete_b2MouseJointDef(b2MouseJointDef self)"},
	 { "b2MouseJointDef_swigregister", b2MouseJointDef_swigregister, METH_O, NULL},
	 { "b2MouseJointDef_swiginit", b2MouseJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2MouseJoint___SetTarget", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetTarget, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MouseJoint___SetTarget(b2MouseJoint self, b2Vec2 target)\n"
		"Use this to update the target point.\n"
		""},
	 { "b2MouseJoint___GetTarget", _wrap_b2MouseJoint___GetTarget, METH_O, "b2MouseJoint___GetTarget(b2MouseJoint self) -> b2Vec2"},
	 { "b2MouseJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MouseJoint___SetMaxForce(b2MouseJoint self, float32 force)\n"
		"Set/get the maximum force in Newtons.\n"
		""},
	 { "b2MouseJoint___GetMaxForce", _wrap_b2MouseJoint___GetMaxForce, METH_O, "b2MouseJoint___GetMaxForce(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetFrequency, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MouseJoint___SetFrequency(b2MouseJoint self, float32 hz)\n"
		"Set/get the frequency in Hertz.\n"
		""},
	 { "b2MouseJoint___GetFrequency", _wrap_b2MouseJoint___GetFrequency, METH_O, "b2MouseJoint___GetFrequency(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MouseJoint___SetDampingRatio(b2MouseJoint self, float32 ratio)\n"
		"Set/get the damping ratio (dimensionless).\n"
		""},
	 { "b2MouseJoint___GetDampingRatio", _wrap_b2MouseJoint___GetDampingRatio, METH_O, "b2MouseJoint___GetDampingRatio(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___hash__", _wrap_b2MouseJoint___hash__, METH_O, "b2MouseJoint___hash__(b2MouseJoint self) -> long"},
	 { "delete_b2MouseJoint", _wrap_delete_b2MouseJoint, METH_O, "delete_b2MouseJoint(b2MouseJoint self)"},
	 { "b2MouseJoint_swigregister", b2MouseJoint_swigregister, METH_O, NULL},
	 { "new_b2PrismaticJointDef", _wrap_new_b2PrismaticJointDef, METH_NOARGS, "\n"
		"new_b2PrismaticJointDef() -> b2PrismaticJointDef\n"
		"Prismatic joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game. \n"
		"WARNING: \n"
		"at least one body should by dynamic with a non-fixed rotation.\n"
		""},
	 { "b2PrismaticJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJointDef_Initialize(b2PrismaticJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor, b2Vec2 axis)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2PrismaticJointDef_localAnchorA_set", _wrap_b2PrismaticJointDef_localAnchorA_set, METH_VARARGS, "b2PrismaticJointDef_localAnchorA_set(b2PrismaticJointDef self, b2Vec2 localAnchorA)"},
	 { "b2PrismaticJointDef_localAnchorA_get", _wrap_b2PrismaticJointDef_localAnchorA_get, METH_O, "b2PrismaticJointDef_localAnchorA_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_localAnchorB_set", _wrap_b2PrismaticJointDef_localAnchorB_set, METH_VARARGS, "b2PrismaticJointDef_localAnchorB_set(b2PrismaticJointDef self, b2Vec2 localAnchorB)"},
	 { "b2PrismaticJointDef_localAnchorB_get", _wrap_b2PrismaticJointDef_localAnchorB_get, METH_O, "b2PrismaticJointDef_localAnchorB_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_localAxisA_set", _wrap_b2PrismaticJointDef_localAxisA_set, METH_VARARGS, "b2PrismaticJointDef_localAxisA_set(b2PrismaticJointDef self, b2Vec2 localAxisA)"},
	 { "b2PrismaticJointDef_localAxisA_get", _wrap_b2PrismaticJointDef_localAxisA_get, METH_O, "b2PrismaticJointDef_localAxisA_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_referenceAngle_set", _wrap_b2PrismaticJointDef_referenceAngle_set, METH_VARARGS, "b2PrismaticJointDef_referenceAngle_set(b2PrismaticJointDef self, float32 referenceAngle)"},
	 { "b2PrismaticJointDef_referenceAngle_get", _wrap_b2PrismaticJointDef_referenceAngle_get, METH_O, "b2PrismaticJointDef_referenceAngle_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_enableLimit_set", _wrap_b2PrismaticJointDef_enableLimit_set, METH_VARARGS, "b2PrismaticJointDef_enableLimit_set(b2PrismaticJointDef self, bool enableLimit)"},
	 { "b2PrismaticJointDef_enableLimit_get", _wrap_b2PrismaticJointDef_enableLimit_get, METH_O, "b2PrismaticJointDef_enableLimit_get(b2PrismaticJointDef self) -> bool"},
	 { "b2PrismaticJointDef_lowerTranslation_set", _wrap_b2PrismaticJointDef_lowerTranslation_set, METH_VARARGS, "b2PrismaticJointDef_lowerTranslation_set(b2PrismaticJointDef self, float32 lowerTranslation)"},
	 { "b2PrismaticJointDef_lowerTranslation_get", _wrap_b2PrismaticJointDef_lowerTranslation_get, METH_O, "b2PrismaticJointDef_lowerTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_upperTranslation_set", _wrap_b2PrismaticJointDef_upperTranslation_set, METH_VARARGS, "b2PrismaticJointDef_upperTranslation_set(b2PrismaticJointDef self, float32 upperTranslation)"},
	 { "b2PrismaticJointDef_upperTranslation_get", _wrap_b2PrismaticJointDef_upperTranslation_get, METH_O, "b2PrismaticJointDef_upperTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_enableMotor_set", _wrap_b2PrismaticJointDef_enableMotor_set, METH_VARARGS, "b2PrismaticJointDef_enableMotor_set(b2PrismaticJointDef self, bool enableMotor)"},
	 { "b2PrismaticJointDef_enableMotor_get", _wrap_b2PrismaticJointDef_enableMotor_get, METH_O, "b2PrismaticJointDef_enableMotor_get(b2PrismaticJointDef self) -> bool"},
	 { "b2PrismaticJointDef_maxMotorForce_set", _wrap_b2PrismaticJointDef_maxMotorForce_set, METH_VARARGS, "b2PrismaticJointDef_maxMotorForce_set(b2PrismaticJointDef self, float32 maxMotorForce)"},
	 { "b2PrismaticJointDef_maxMotorForce_get", _wrap_b2PrismaticJointDef_maxMotorForce_get, METH_O, "b2PrismaticJointDef_maxMotorForce_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_motorSpeed_set", _wrap_b2PrismaticJointDef_motorSpeed_set, METH_VARARGS, "b2PrismaticJointDef_motorSpeed_set(b2PrismaticJointDef self, float32 motorSpeed)"},
	 { "b2PrismaticJointDef_motorSpeed_get", _wrap_b2PrismaticJointDef_motorSpeed_get, METH_O, "b2PrismaticJointDef_motorSpeed_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef___hash__", _wrap_b2PrismaticJointDef___hash__, METH_O, "b2PrismaticJointDef___hash__(b2PrismaticJointDef self) -> long"},
	 { "delete_b2PrismaticJointDef", _wrap_delete_b2PrismaticJointDef, METH_O, "delete_b2PrismaticJointDef(b2PrismaticJointDef self)"},
	 { "b2PrismaticJointDef_swigregister", b2PrismaticJointDef_swigregister, METH_O, NULL},
	 { "b2PrismaticJointDef_swiginit", b2PrismaticJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2PrismaticJoint_GetLocalAnchorA", _wrap_b2PrismaticJoint_GetLocalAnchorA, METH_O, "b2PrismaticJoint_GetLocalAnchorA(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetLocalAnchorB", _wrap_b2PrismaticJoint_GetLocalAnchorB, METH_O, "b2PrismaticJoint_GetLocalAnchorB(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetLocalAxisA", _wrap_b2PrismaticJoint_GetLocalAxisA, METH_O, "b2PrismaticJoint_GetLocalAxisA(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetReferenceAngle", _wrap_b2PrismaticJoint_GetReferenceAngle, METH_O, "b2PrismaticJoint_GetReferenceAngle(b2PrismaticJoint self) -> float32"},
	 { "b2PrismaticJoint___GetJointTranslation", _wrap_b2PrismaticJoint___GetJointTranslation, METH_O, "\n"
		"b2PrismaticJoint___GetJointTranslation(b2PrismaticJoint self) -> float32\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___GetJointSpeed", _wrap_b2PrismaticJoint___GetJointSpeed, METH_O, "\n"
		"b2PrismaticJoint___GetJointSpeed(b2PrismaticJoint self) -> float32\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___IsLimitEnabled", _wrap_b2PrismaticJoint___IsLimitEnabled, METH_O, "\n"
		"b2PrismaticJoint___IsLimitEnabled(b2PrismaticJoint self) -> bool\n"
		"Is the joint limit enabled?\n"
		""},
	 { "b2PrismaticJoint___EnableLimit", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___EnableLimit, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint___EnableLimit(b2PrismaticJoint self, bool flag)\n"
		"Enable/disable the joint limit.\n"
		""},
	 { "b2PrismaticJoint___GetLowerLimit", _wrap_b2PrismaticJoint___GetLowerLimit, METH_O, "\n"
		"b2PrismaticJoint___GetLowerLimit(b2PrismaticJoint self) -> float32\n"
		"Get the lower joint limit, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___GetUpperLimit", _wrap_b2PrismaticJoint___GetUpperLimit, METH_O, "\n"
		"b2PrismaticJoint___GetUpperLimit(b2PrismaticJoint self) -> float32\n"
		"Get the upper joint limit, usually in meters.\n"
		""},
	 { "b2PrismaticJoint_SetLimits", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint_SetLimits, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint_SetLimits(b2PrismaticJoint self, float32 lower, float32 upper)\n"
		"Set the joint limits, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___IsMotorEnabled", _wrap_b2PrismaticJoint___IsMotorEnabled, METH_O, "\n"
		"b2PrismaticJoint___IsMotorEnabled(b2PrismaticJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2PrismaticJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint___EnableMotor(b2PrismaticJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2PrismaticJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint___SetMotorSpeed(b2PrismaticJoint self, float32 speed)\n"
		"Set the motor speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___GetMotorSpeed", _wrap_b2PrismaticJoint___GetMotorSpeed, METH_O, "\n"
		"b2PrismaticJoint___GetMotorSpeed(b2PrismaticJoint self) -> float32\n"
		"Get the motor speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___SetMaxMotorForce", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___SetMaxMotorForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint___SetMaxMotorForce(b2PrismaticJoint self, float32 force)\n"
		"Set the maximum motor force, usually in N.\n"
		""},
	 { "b2PrismaticJoint___GetMaxMotorForce", _wrap_b2PrismaticJoint___GetMaxMotorForce, METH_O, "b2PrismaticJoint___GetMaxMotorForce(b2PrismaticJoint self) -> float32"},
	 { "b2PrismaticJoint_GetMotorForce", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint_GetMotorForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PrismaticJoint_GetMotorForce(b2PrismaticJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor force given the inverse time step, usually in N.\n"
		""},
	 { "b2PrismaticJoint___hash__", _wrap_b2PrismaticJoint___hash__, METH_O, "b2PrismaticJoint___hash__(b2PrismaticJoint self) -> long"},
	 { "delete_b2PrismaticJoint", _wrap_delete_b2PrismaticJoint, METH_O, "delete_b2PrismaticJoint(b2PrismaticJoint self)"},
	 { "b2PrismaticJoint_swigregister", b2PrismaticJoint_swigregister, METH_O, NULL},
	 { "new_b2PulleyJointDef", _wrap_new_b2PulleyJointDef, METH_NOARGS, "\n"
		"new_b2PulleyJointDef() -> b2PulleyJointDef\n"
		"Pulley joint definition. This requires two ground anchors, two dynamic body anchor points, max lengths for each side, and a pulley ratio.\n"
		""},
	 { "b2PulleyJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2PulleyJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PulleyJointDef_Initialize(b2PulleyJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 groundAnchorA, b2Vec2 groundAnchorB, b2Vec2 anchorA, b2Vec2 anchorB, float32 ratio)\n"
		"Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.\n"
		""},
	 { "b2PulleyJointDef_groundAnchorA_set", _wrap_b2PulleyJointDef_groundAnchorA_set, METH_VARARGS, "b2PulleyJointDef_groundAnchorA_set(b2PulleyJointDef self, b2Vec2 groundAnchorA)"},
	 { "b2PulleyJointDef_groundAnchorA_get", _wrap_b2PulleyJointDef_groundAnchorA_get, METH_O, "b2PulleyJointDef_groundAnchorA_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_groundAnchorB_set", _wrap_b2PulleyJointDef_groundAnchorB_set, METH_VARARGS, "b2PulleyJointDef_groundAnchorB_set(b2PulleyJointDef self, b2Vec2 groundAnchorB)"},
	 { "b2PulleyJointDef_groundAnchorB_get", _wrap_b2PulleyJointDef_groundAnchorB_get, METH_O, "b2PulleyJointDef_groundAnchorB_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_localAnchorA_set", _wrap_b2PulleyJointDef_localAnchorA_set, METH_VARARGS, "b2PulleyJointDef_localAnchorA_set(b2PulleyJointDef self, b2Vec2 localAnchorA)"},
	 { "b2PulleyJointDef_localAnchorA_get", _wrap_b2PulleyJointDef_localAnchorA_get, METH_O, "b2PulleyJointDef_localAnchorA_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_localAnchorB_set", _wrap_b2PulleyJointDef_localAnchorB_set, METH_VARARGS, "b2PulleyJointDef_localAnchorB_set(b2PulleyJointDef self, b2Vec2 localAnchorB)"},
	 { "b2PulleyJointDef_localAnchorB_get", _wrap_b2PulleyJointDef_localAnchorB_get, METH_O, "b2PulleyJointDef_localAnchorB_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_lengthA_set", _wrap_b2PulleyJointDef_lengthA_set, METH_VARARGS, "b2PulleyJointDef_lengthA_set(b2PulleyJointDef self, float32 lengthA)"},
	 { "b2PulleyJointDef_lengthA_get", _wrap_b2PulleyJointDef_lengthA_get, METH_O, "b2PulleyJointDef_lengthA_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef_lengthB_set", _wrap_b2PulleyJointDef_lengthB_set, METH_VARARGS, "b2PulleyJointDef_lengthB_set(b2PulleyJointDef self, float32 lengthB)"},
	 { "b2PulleyJointDef_lengthB_get", _wrap_b2PulleyJointDef_lengthB_get, METH_O, "b2PulleyJointDef_lengthB_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef_ratio_set", _wrap_b2PulleyJointDef_ratio_set, METH_VARARGS, "b2PulleyJointDef_ratio_set(b2PulleyJointDef self, float32 ratio)"},
	 { "b2PulleyJointDef_ratio_get", _wrap_b2PulleyJointDef_ratio_get, METH_O, "b2PulleyJointDef_ratio_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef___hash__", _wrap_b2PulleyJointDef___hash__, METH_O, "b2PulleyJointDef___hash__(b2PulleyJointDef self) -> long"},
	 { "delete_b2PulleyJointDef", _wrap_delete_b2PulleyJointDef, METH_O, "delete_b2PulleyJointDef(b2PulleyJointDef self)"},
	 { "b2PulleyJointDef_swigregister", b2PulleyJointDef_swigregister, METH_O, NULL},
	 { "b2PulleyJointDef_swiginit", b2PulleyJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2PulleyJoint___GetGroundAnchorA", _wrap_b2PulleyJoint___GetGroundAnchorA, METH_O, "\n"
		"b2PulleyJoint___GetGroundAnchorA(b2PulleyJoint self) -> b2Vec2\n"
		"Get the first ground anchor.\n"
		""},
	 { "b2PulleyJoint___GetGroundAnchorB", _wrap_b2PulleyJoint___GetGroundAnchorB, METH_O, "\n"
		"b2PulleyJoint___GetGroundAnchorB(b2PulleyJoint self) -> b2Vec2\n"
		"Get the second ground anchor.\n"
		""},
	 { "b2PulleyJoint___GetLengthA", _wrap_b2PulleyJoint___GetLengthA, METH_O, "b2PulleyJoint___GetLengthA(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___GetLengthB", _wrap_b2PulleyJoint___GetLengthB, METH_O, "b2PulleyJoint___GetLengthB(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___GetRatio", _wrap_b2PulleyJoint___GetRatio, METH_O, "\n"
		"b2PulleyJoint___GetRatio(b2PulleyJoint self) -> float32\n"
		"Get the pulley ratio.\n"
		""},
	 { "b2PulleyJoint_GetCurrentLengthA", _wrap_b2PulleyJoint_GetCurrentLengthA, METH_O, "b2PulleyJoint_GetCurrentLengthA(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint_GetCurrentLengthB", _wrap_b2PulleyJoint_GetCurrentLengthB, METH_O, "b2PulleyJoint_GetCurrentLengthB(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___hash__", _wrap_b2PulleyJoint___hash__, METH_O, "b2PulleyJoint___hash__(b2PulleyJoint self) -> long"},
	 { "delete_b2PulleyJoint", _wrap_delete_b2PulleyJoint, METH_O, "delete_b2PulleyJoint(b2PulleyJoint self)"},
	 { "b2PulleyJoint_swigregister", b2PulleyJoint_swigregister, METH_O, NULL},
	 { "new_b2RevoluteJointDef", _wrap_new_b2RevoluteJointDef, METH_NOARGS, "\n"
		"new_b2RevoluteJointDef() -> b2RevoluteJointDef\n"
		"Revolute joint definition. This requires defining an anchor point where the bodies are joined. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor points are measured from the body's origin rather than the center of mass because: 1. you might not know where the center of mass will be. 2. if you add/remove shapes from a body and recompute the mass, the joints will be broken.\n"
		""},
	 { "b2RevoluteJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJointDef_Initialize(b2RevoluteJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, and reference angle using a world anchor point.\n"
		""},
	 { "b2RevoluteJointDef_localAnchorA_set", _wrap_b2RevoluteJointDef_localAnchorA_set, METH_VARARGS, "b2RevoluteJointDef_localAnchorA_set(b2RevoluteJointDef self, b2Vec2 localAnchorA)"},
	 { "b2RevoluteJointDef_localAnchorA_get", _wrap_b2RevoluteJointDef_localAnchorA_get, METH_O, "b2RevoluteJointDef_localAnchorA_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { "b2RevoluteJointDef_localAnchorB_set", _wrap_b2RevoluteJointDef_localAnchorB_set, METH_VARARGS, "b2RevoluteJointDef_localAnchorB_set(b2RevoluteJointDef self, b2Vec2 localAnchorB)"},
	 { "b2RevoluteJointDef_localAnchorB_get", _wrap_b2RevoluteJointDef_localAnchorB_get, METH_O, "b2RevoluteJointDef_localAnchorB_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { "b2RevoluteJointDef_referenceAngle_set", _wrap_b2RevoluteJointDef_referenceAngle_set, METH_VARARGS, "b2RevoluteJointDef_referenceAngle_set(b2RevoluteJointDef self, float32 referenceAngle)"},
	 { "b2RevoluteJointDef_referenceAngle_get", _wrap_b2RevoluteJointDef_referenceAngle_get, METH_O, "b2RevoluteJointDef_referenceAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_enableLimit_set", _wrap_b2RevoluteJointDef_enableLimit_set, METH_VARARGS, "b2RevoluteJointDef_enableLimit_set(b2RevoluteJointDef self, bool enableLimit)"},
	 { "b2RevoluteJointDef_enableLimit_get", _wrap_b2RevoluteJointDef_enableLimit_get, METH_O, "b2RevoluteJointDef_enableLimit_get(b2RevoluteJointDef self) -> bool"},
	 { "b2RevoluteJointDef_lowerAngle_set", _wrap_b2RevoluteJointDef_lowerAngle_set, METH_VARARGS, "b2RevoluteJointDef_lowerAngle_set(b2RevoluteJointDef self, float32 lowerAngle)"},
	 { "b2RevoluteJointDef_lowerAngle_get", _wrap_b2RevoluteJointDef_lowerAngle_get, METH_O, "b2RevoluteJointDef_lowerAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_upperAngle_set", _wrap_b2RevoluteJointDef_upperAngle_set, METH_VARARGS, "b2RevoluteJointDef_upperAngle_set(b2RevoluteJointDef self, float32 upperAngle)"},
	 { "b2RevoluteJointDef_upperAngle_get", _wrap_b2RevoluteJointDef_upperAngle_get, METH_O, "b2RevoluteJointDef_upperAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_enableMotor_set", _wrap_b2RevoluteJointDef_enableMotor_set, METH_VARARGS, "b2RevoluteJointDef_enableMotor_set(b2RevoluteJointDef self, bool enableMotor)"},
	 { "b2RevoluteJointDef_enableMotor_get", _wrap_b2RevoluteJointDef_enableMotor_get, METH_O, "b2RevoluteJointDef_enableMotor_get(b2RevoluteJointDef self) -> bool"},
	 { "b2RevoluteJointDef_motorSpeed_set", _wrap_b2RevoluteJointDef_motorSpeed_set, METH_VARARGS, "b2RevoluteJointDef_motorSpeed_set(b2RevoluteJointDef self, float32 motorSpeed)"},
	 { "b2RevoluteJointDef_motorSpeed_get", _wrap_b2RevoluteJointDef_motorSpeed_get, METH_O, "b2RevoluteJointDef_motorSpeed_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_maxMotorTorque_set", _wrap_b2RevoluteJointDef_maxMotorTorque_set, METH_VARARGS, "b2RevoluteJointDef_maxMotorTorque_set(b2RevoluteJointDef self, float32 maxMotorTorque)"},
	 { "b2RevoluteJointDef_maxMotorTorque_get", _wrap_b2RevoluteJointDef_maxMotorTorque_get, METH_O, "b2RevoluteJointDef_maxMotorTorque_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef___hash__", _wrap_b2RevoluteJointDef___hash__, METH_O, "b2RevoluteJointDef___hash__(b2RevoluteJointDef self) -> long"},
	 { "delete_b2RevoluteJointDef", _wrap_delete_b2RevoluteJointDef, METH_O, "delete_b2RevoluteJointDef(b2RevoluteJointDef self)"},
	 { "b2RevoluteJointDef_swigregister", b2RevoluteJointDef_swigregister, METH_O, NULL},
	 { "b2RevoluteJointDef_swiginit", b2RevoluteJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2RevoluteJoint_GetLocalAnchorA", _wrap_b2RevoluteJoint_GetLocalAnchorA, METH_O, "b2RevoluteJoint_GetLocalAnchorA(b2RevoluteJoint self) -> b2Vec2"},
	 { "b2RevoluteJoint_GetLocalAnchorB", _wrap_b2RevoluteJoint_GetLocalAnchorB, METH_O, "b2RevoluteJoint_GetLocalAnchorB(b2RevoluteJoint self) -> b2Vec2"},
	 { "b2RevoluteJoint_GetReferenceAngle", _wrap_b2RevoluteJoint_GetReferenceAngle, METH_O, "b2RevoluteJoint_GetReferenceAngle(b2RevoluteJoint self) -> float32"},
	 { "b2RevoluteJoint___GetJointAngle", _wrap_b2RevoluteJoint___GetJointAngle, METH_O, "\n"
		"b2RevoluteJoint___GetJointAngle(b2RevoluteJoint self) -> float32\n"
		"Get the current joint angle in radians.\n"
		""},
	 { "b2RevoluteJoint___GetJointSpeed", _wrap_b2RevoluteJoint___GetJointSpeed, METH_O, "\n"
		"b2RevoluteJoint___GetJointSpeed(b2RevoluteJoint self) -> float32\n"
		"Get the current joint angle speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___IsLimitEnabled", _wrap_b2RevoluteJoint___IsLimitEnabled, METH_O, "\n"
		"b2RevoluteJoint___IsLimitEnabled(b2RevoluteJoint self) -> bool\n"
		"Is the joint limit enabled?\n"
		""},
	 { "b2RevoluteJoint___EnableLimit", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___EnableLimit, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint___EnableLimit(b2RevoluteJoint self, bool flag)\n"
		"Enable/disable the joint limit.\n"
		""},
	 { "b2RevoluteJoint___GetLowerLimit", _wrap_b2RevoluteJoint___GetLowerLimit, METH_O, "\n"
		"b2RevoluteJoint___GetLowerLimit(b2RevoluteJoint self) -> float32\n"
		"Get the lower joint limit in radians.\n"
		""},
	 { "b2RevoluteJoint___GetUpperLimit", _wrap_b2RevoluteJoint___GetUpperLimit, METH_O, "\n"
		"b2RevoluteJoint___GetUpperLimit(b2RevoluteJoint self) -> float32\n"
		"Get the upper joint limit in radians.\n"
		""},
	 { "b2RevoluteJoint_SetLimits", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint_SetLimits, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint_SetLimits(b2RevoluteJoint self, float32 lower, float32 upper)\n"
		"Set the joint limits in radians.\n"
		""},
	 { "b2RevoluteJoint___IsMotorEnabled", _wrap_b2RevoluteJoint___IsMotorEnabled, METH_O, "\n"
		"b2RevoluteJoint___IsMotorEnabled(b2RevoluteJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2RevoluteJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint___EnableMotor(b2RevoluteJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2RevoluteJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint___SetMotorSpeed(b2RevoluteJoint self, float32 speed)\n"
		"Set the motor speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___GetMotorSpeed", _wrap_b2RevoluteJoint___GetMotorSpeed, METH_O, "\n"
		"b2RevoluteJoint___GetMotorSpeed(b2RevoluteJoint self) -> float32\n"
		"Get the motor speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___SetMaxMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___SetMaxMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint___SetMaxMotorTorque(b2RevoluteJoint self, float32 torque)\n"
		"Set the maximum motor torque, usually in N-m.\n"
		""},
	 { "b2RevoluteJoint_GetMaxMotorTorque", _wrap_b2RevoluteJoint_GetMaxMotorTorque, METH_O, "b2RevoluteJoint_GetMaxMotorTorque(b2RevoluteJoint self) -> float32"},
	 { "b2RevoluteJoint_GetMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint_GetMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2RevoluteJoint_GetMotorTorque(b2RevoluteJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor torque given the inverse time step. Unit is N*m.\n"
		""},
	 { "b2RevoluteJoint___hash__", _wrap_b2RevoluteJoint___hash__, METH_O, "b2RevoluteJoint___hash__(b2RevoluteJoint self) -> long"},
	 { "delete_b2RevoluteJoint", _wrap_delete_b2RevoluteJoint, METH_O, "delete_b2RevoluteJoint(b2RevoluteJoint self)"},
	 { "b2RevoluteJoint_swigregister", b2RevoluteJoint_swigregister, METH_O, NULL},
	 { "new_b2RopeJointDef", _wrap_new_b2RopeJointDef, METH_NOARGS, "\n"
		"new_b2RopeJointDef() -> b2RopeJointDef\n"
		"Rope joint definition. This requires two body anchor points and a maximum lengths. Note: by default the connected objects will not collide. see collideConnected in  b2JointDef.\n"
		""},
	 { "b2RopeJointDef_localAnchorA_set", _wrap_b2RopeJointDef_localAnchorA_set, METH_VARARGS, "b2RopeJointDef_localAnchorA_set(b2RopeJointDef self, b2Vec2 localAnchorA)"},
	 { "b2RopeJointDef_localAnchorA_get", _wrap_b2RopeJointDef_localAnchorA_get, METH_O, "b2RopeJointDef_localAnchorA_get(b2RopeJointDef self) -> b2Vec2"},
	 { "b2RopeJointDef_localAnchorB_set", _wrap_b2RopeJointDef_localAnchorB_set, METH_VARARGS, "b2RopeJointDef_localAnchorB_set(b2RopeJointDef self, b2Vec2 localAnchorB)"},
	 { "b2RopeJointDef_localAnchorB_get", _wrap_b2RopeJointDef_localAnchorB_get, METH_O, "b2RopeJointDef_localAnchorB_get(b2RopeJointDef self) -> b2Vec2"},
	 { "b2RopeJointDef_maxLength_set", _wrap_b2RopeJointDef_maxLength_set, METH_VARARGS, "b2RopeJointDef_maxLength_set(b2RopeJointDef self, float32 maxLength)"},
	 { "b2RopeJointDef_maxLength_get", _wrap_b2RopeJointDef_maxLength_get, METH_O, "b2RopeJointDef_maxLength_get(b2RopeJointDef self) -> float32"},
	 { "b2RopeJointDef___hash__", _wrap_b2RopeJointDef___hash__, METH_O, "b2RopeJointDef___hash__(b2RopeJointDef self) -> long"},
	 { "delete_b2RopeJointDef", _wrap_delete_b2RopeJointDef, METH_O, "delete_b2RopeJointDef(b2RopeJointDef self)"},
	 { "b2RopeJointDef_swigregister", b2RopeJointDef_swigregister, METH_O, NULL},
	 { "b2RopeJointDef_swiginit", b2RopeJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2RopeJoint_GetLocalAnchorA", _wrap_b2RopeJoint_GetLocalAnchorA, METH_O, "b2RopeJoint_GetLocalAnchorA(b2RopeJoint self) -> b2Vec2"},
	 { "b2RopeJoint_GetLocalAnchorB", _wrap_b2RopeJoint_GetLocalAnchorB, METH_O, "b2RopeJoint_GetLocalAnchorB(b2RopeJoint self) -> b2Vec2"},
	 { "b2RopeJoint_SetMaxLength", (PyCFunction)(void(*)(void))_wrap_b2RopeJoint_SetMaxLength, METH_VARARGS|METH_KEYWORDS, "b2RopeJoint_SetMaxLength(b2RopeJoint self, float32 length)"},
	 { "b2RopeJoint___GetMaxLength", _wrap_b2RopeJoint___GetMaxLength, METH_O, "\n"
		"b2RopeJoint___GetMaxLength(b2RopeJoint self) -> float32\n"
		"Get the maximum length of the rope.\n"
		""},
	 { "b2RopeJoint___GetLimitState", _wrap_b2RopeJoint___GetLimitState, METH_O, "b2RopeJoint___GetLimitState(b2RopeJoint self) -> b2LimitState"},
	 { "b2RopeJoint___hash__", _wrap_b2RopeJoint___hash__, METH_O, "b2RopeJoint___hash__(b2RopeJoint self) -> long"},
	 { "delete_b2RopeJoint", _wrap_delete_b2RopeJoint, METH_O, "delete_b2RopeJoint(b2RopeJoint self)"},
	 { "b2RopeJoint_swigregister", b2RopeJoint_swigregister, METH_O, NULL},
	 { "new_b2WeldJointDef", _wrap_new_b2WeldJointDef, METH_NOARGS, "\n"
		"new_b2WeldJointDef() -> b2WeldJointDef\n"
		"Weld joint definition. You need to specify local anchor points where they are attached and the relative body angle. The position of the anchor points is important for computing the reaction torque.\n"
		""},
	 { "b2WeldJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WeldJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WeldJointDef_Initialize(b2WeldJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, and reference angle using a world anchor point.\n"
		""},
	 { "b2WeldJointDef_localAnchorA_set", _wrap_b2WeldJointDef_localAnchorA_set, METH_VARARGS, "b2WeldJointDef_localAnchorA_set(b2WeldJointDef self, b2Vec2 localAnchorA)"},
	 { "b2WeldJointDef_localAnchorA_get", _wrap_b2WeldJointDef_localAnchorA_get, METH_O, "b2WeldJointDef_localAnchorA_get(b2WeldJointDef self) -> b2Vec2"},
	 { "b2WeldJointDef_localAnchorB_set", _wrap_b2WeldJointDef_localAnchorB_set, METH_VARARGS, "b2WeldJointDef_localAnchorB_set(b2WeldJointDef self, b2Vec2 localAnchorB)"},
	 { "b2WeldJointDef_localAnchorB_get", _wrap_b2WeldJointDef_localAnchorB_get, METH_O, "b2WeldJointDef_localAnchorB_get(b2WeldJointDef self) -> b2Vec2"},
	 { "b2WeldJointDef_referenceAngle_set", _wrap_b2WeldJointDef_referenceAngle_set, METH_VARARGS, "b2WeldJointDef_referenceAngle_set(b2WeldJointDef self, float32 referenceAngle)"},
	 { "b2WeldJointDef_referenceAngle_get", _wrap_b2WeldJointDef_referenceAngle_get, METH_O, "b2WeldJointDef_referenceAngle_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef_frequencyHz_set", _wrap_b2WeldJointDef_frequencyHz_set, METH_VARARGS, "b2WeldJointDef_frequencyHz_set(b2WeldJointDef self, float32 frequencyHz)"},
	 { "b2WeldJointDef_frequencyHz_get", _wrap_b2WeldJointDef_frequencyHz_get, METH_O, "b2WeldJointDef_frequencyHz_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef_dampingRatio_set", _wrap_b2WeldJointDef_dampingRatio_set, METH_VARARGS, "b2WeldJointDef_dampingRatio_set(b2WeldJointDef self, float32 dampingRatio)"},
	 { "b2WeldJointDef_dampingRatio_get", _wrap_b2WeldJointDef_dampingRatio_get, METH_O, "b2WeldJointDef_dampingRatio_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef___hash__", _wrap_b2WeldJointDef___hash__, METH_O, "b2WeldJointDef___hash__(b2WeldJointDef self) -> long"},
	 { "delete_b2WeldJointDef", _wrap_delete_b2WeldJointDef, METH_O, "delete_b2WeldJointDef(b2WeldJointDef self)"},
	 { "b2WeldJointDef_swigregister", b2WeldJointDef_swigregister, METH_O, NULL},
	 { "b2WeldJointDef_swiginit", b2WeldJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2WeldJoint_GetLocalAnchorA", _wrap_b2WeldJoint_GetLocalAnchorA, METH_O, "b2WeldJoint_GetLocalAnchorA(b2WeldJoint self) -> b2Vec2"},
	 { "b2WeldJoint_GetLocalAnchorB", _wrap_b2WeldJoint_GetLocalAnchorB, METH_O, "b2WeldJoint_GetLocalAnchorB(b2WeldJoint self) -> b2Vec2"},
	 { "b2WeldJoint_GetReferenceAngle", _wrap_b2WeldJoint_GetReferenceAngle, METH_O, "b2WeldJoint_GetReferenceAngle(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint_SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2WeldJoint_SetFrequency, METH_VARARGS|METH_KEYWORDS, "b2WeldJoint_SetFrequency(b2WeldJoint self, float32 hz)"},
	 { "b2WeldJoint_GetFrequency", _wrap_b2WeldJoint_GetFrequency, METH_O, "b2WeldJoint_GetFrequency(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint_SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2WeldJoint_SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "b2WeldJoint_SetDampingRatio(b2WeldJoint self, float32 ratio)"},
	 { "b2WeldJoint_GetDampingRatio", _wrap_b2WeldJoint_GetDampingRatio, METH_O, "b2WeldJoint_GetDampingRatio(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint___hash__", _wrap_b2WeldJoint___hash__, METH_O, "b2WeldJoint___hash__(b2WeldJoint self) -> long"},
	 { "delete_b2WeldJoint", _wrap_delete_b2WeldJoint, METH_O, "delete_b2WeldJoint(b2WeldJoint self)"},
	 { "b2WeldJoint_swigregister", b2WeldJoint_swigregister, METH_O, NULL},
	 { "new_b2WheelJointDef", _wrap_new_b2WheelJointDef, METH_NOARGS, "\n"
		"new_b2WheelJointDef() -> b2WheelJointDef\n"
		"Line joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game.\n"
		""},
	 { "b2WheelJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WheelJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJointDef_Initialize(b2WheelJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor, b2Vec2 axis)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2WheelJointDef_localAnchorA_set", _wrap_b2WheelJointDef_localAnchorA_set, METH_VARARGS, "b2WheelJointDef_localAnchorA_set(b2WheelJointDef self, b2Vec2 localAnchorA)"},
	 { "b2WheelJointDef_localAnchorA_get", _wrap_b2WheelJointDef_localAnchorA_get, METH_O, "b2WheelJointDef_localAnchorA_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_localAnchorB_set", _wrap_b2WheelJointDef_localAnchorB_set, METH_VARARGS, "b2WheelJointDef_localAnchorB_set(b2WheelJointDef self, b2Vec2 localAnchorB)"},
	 { "b2WheelJointDef_localAnchorB_get", _wrap_b2WheelJointDef_localAnchorB_get, METH_O, "b2WheelJointDef_localAnchorB_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_localAxisA_set", _wrap_b2WheelJointDef_localAxisA_set, METH_VARARGS, "b2WheelJointDef_localAxisA_set(b2WheelJointDef self, b2Vec2 localAxisA)"},
	 { "b2WheelJointDef_localAxisA_get", _wrap_b2WheelJointDef_localAxisA_get, METH_O, "b2WheelJointDef_localAxisA_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_enableMotor_set", _wrap_b2WheelJointDef_enableMotor_set, METH_VARARGS, "b2WheelJointDef_enableMotor_set(b2WheelJointDef self, bool enableMotor)"},
	 { "b2WheelJointDef_enableMotor_get", _wrap_b2WheelJointDef_enableMotor_get, METH_O, "b2WheelJointDef_enableMotor_get(b2WheelJointDef self) -> bool"},
	 { "b2WheelJointDef_maxMotorTorque_set", _wrap_b2WheelJointDef_maxMotorTorque_set, METH_VARARGS, "b2WheelJointDef_maxMotorTorque_set(b2WheelJointDef self, float32 maxMotorTorque)"},
	 { "b2WheelJointDef_maxMotorTorque_get", _wrap_b2WheelJointDef_maxMotorTorque_get, METH_O, "b2WheelJointDef_maxMotorTorque_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_motorSpeed_set", _wrap_b2WheelJointDef_motorSpeed_set, METH_VARARGS, "b2WheelJointDef_motorSpeed_set(b2WheelJointDef self, float32 motorSpeed)"},
	 { "b2WheelJointDef_motorSpeed_get", _wrap_b2WheelJointDef_motorSpeed_get, METH_O, "b2WheelJointDef_motorSpeed_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_frequencyHz_set", _wrap_b2WheelJointDef_frequencyHz_set, METH_VARARGS, "b2WheelJointDef_frequencyHz_set(b2WheelJointDef self, float32 frequencyHz)"},
	 { "b2WheelJointDef_frequencyHz_get", _wrap_b2WheelJointDef_frequencyHz_get, METH_O, "b2WheelJointDef_frequencyHz_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_dampingRatio_set", _wrap_b2WheelJointDef_dampingRatio_set, METH_VARARGS, "b2WheelJointDef_dampingRatio_set(b2WheelJointDef self, float32 dampingRatio)"},
	 { "b2WheelJointDef_dampingRatio_get", _wrap_b2WheelJointDef_dampingRatio_get, METH_O, "b2WheelJointDef_dampingRatio_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef___hash__", _wrap_b2WheelJointDef___hash__, METH_O, "b2WheelJointDef___hash__(b2WheelJointDef self) -> long"},
	 { "delete_b2WheelJointDef", _wrap_delete_b2WheelJointDef, METH_O, "delete_b2WheelJointDef(b2WheelJointDef self)"},
	 { "b2WheelJointDef_swigregister", b2WheelJointDef_swigregister, METH_O, NULL},
	 { "b2WheelJointDef_swiginit", b2WheelJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2WheelJoint_GetLocalAnchorA", _wrap_b2WheelJoint_GetLocalAnchorA, METH_O, "b2WheelJoint_GetLocalAnchorA(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint_GetLocalAnchorB", _wrap_b2WheelJoint_GetLocalAnchorB, METH_O, "b2WheelJoint_GetLocalAnchorB(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint_GetLocalAxisA", _wrap_b2WheelJoint_GetLocalAxisA, METH_O, "b2WheelJoint_GetLocalAxisA(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint___GetJointTranslation", _wrap_b2WheelJoint___GetJointTranslation, METH_O, "\n"
		"b2WheelJoint___GetJointTranslation(b2WheelJoint self) -> float32\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { "b2WheelJoint___GetJointSpeed", _wrap_b2WheelJoint___GetJointSpeed, METH_O, "\n"
		"b2WheelJoint___GetJointSpeed(b2WheelJoint self) -> float32\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { "b2WheelJoint___IsMotorEnabled", _wrap_b2WheelJoint___IsMotorEnabled, METH_O, "\n"
		"b2WheelJoint___IsMotorEnabled(b2WheelJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2WheelJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint___EnableMotor(b2WheelJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2WheelJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint___SetMotorSpeed(b2WheelJoint self, float32 speed)\n"
		"Set the motor speed, usually in radians per second.\n"
		""},
	 { "b2WheelJoint___GetMotorSpeed", _wrap_b2WheelJoint___GetMotorSpeed, METH_O, "\n"
		"b2WheelJoint___GetMotorSpeed(b2WheelJoint self) -> float32\n"
		"Get the motor speed, usually in radians per second.\n"
		""},
	 { "b2WheelJoint___SetMaxMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetMaxMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint___SetMaxMotorTorque(b2WheelJoint self, float32 torque)\n"
		"Set/Get the maximum motor force, usually in N-m.\n"
		""},
	 { "b2WheelJoint___GetMaxMotorTorque", _wrap_b2WheelJoint___GetMaxMotorTorque, METH_O, "b2WheelJoint___GetMaxMotorTorque(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint_GetMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint_GetMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint_GetMotorTorque(b2WheelJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor torque given the inverse time step, usually in N-m.\n"
		""},
	 { "b2WheelJoint___SetSpringFrequencyHz", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetSpringFrequencyHz, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint___SetSpringFrequencyHz(b2WheelJoint self, float32 hz)\n"
		"Set/Get the spring frequency in hertz. Setting the frequency to zero disables the spring.\n"
		""},
	 { "b2WheelJoint___GetSpringFrequencyHz", _wrap_b2WheelJoint___GetSpringFrequencyHz, METH_O, "b2WheelJoint___GetSpringFrequencyHz(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint___SetSpringDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetSpringDampingRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2WheelJoint___SetSpringDampingRatio(b2WheelJoint self, float32 ratio)\n"
		"Set/Get the spring damping ratio.\n"
		""},
	 { "b2WheelJoint___GetSpringDampingRatio", _wrap_b2WheelJoint___GetSpringDampingRatio, METH_O, "b2WheelJoint___GetSpringDampingRatio(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint___hash__", _wrap_b2WheelJoint___hash__, METH_O, "b2WheelJoint___hash__(b2WheelJoint self) -> long"},
	 { "delete_b2WheelJoint", _wrap_delete_b2WheelJoint, METH_O, "delete_b2WheelJoint(b2WheelJoint self)"},
	 { "b2WheelJoint_swigregister", b2WheelJoint_swigregister, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "__jointeq", (PyCFunction)(void(*)(void))_wrap___jointeq, METH_VARARGS|METH_KEYWORDS, "__jointeq(b2Joint a, b2Joint b) -> bool"},
	 { "__bodyeq", (PyCFunction)(void(*)(void))_wrap___bodyeq, METH_VARARGS|METH_KEYWORDS, "__bodyeq(b2Body a, b2Body b) -> bool"},
	 { "__shapeeq", (PyCFunction)(void(*)(void))_wrap___shapeeq, METH_VARARGS|METH_KEYWORDS, "__shapeeq(b2Shape a, b2Shape b) -> bool"},
	 { "__fixtureeq", (PyCFunction)(void(*)(void))_wrap___fixtureeq, METH_VARARGS|METH_KEYWORDS, "__fixtureeq(b2Fixture a, b2Fixture b) -> bool"},
	 { "__b2ComputeCentroid", (PyCFunction)(void(*)(void))_wrap___b2ComputeCentroid, METH_VARARGS|METH_KEYWORDS, "__b2ComputeCentroid(b2Vec2 vs, int32 count) -> b2Vec2"},
	 { "b2CheckVertices", (PyCFunction)(void(*)(void))_wrap_b2CheckVertices, METH_VARARGS|METH_KEYWORDS, "b2CheckVertices(b2Vec2 vertices, int32 count, bool additional_checks=True) -> bool"},
	 { "b2CheckPolygon", (PyCFunction)(void(*)(void))_wrap_b2CheckPolygon, METH_VARARGS|METH_KEYWORDS, "b2CheckPolygon(b2PolygonShape shape, bool additional_checks=True) -> bool"},
	 { "b2Random", _wrap_b2Random, METH_VARARGS, "\n"
		"b2Random() -> float32\n"
		"b2Random(float32 lo, float32 hi) -> float32\n"
		""},
	 { "_b2Distance", _wrap__b2Distance, METH_VARARGS, "\n"
		"_b2Distance(b2Shape shapeA, int idxA, b2Shape shapeB, int idxB, b2Transform transformA, b2Transform transformB, bool useRadii=True) -> b2DistanceOutput\n"
		"_b2Distance(b2DistanceInput input) -> b2DistanceOutput\n"
		""},
	 { "b2GetPointStates", (PyCFunction)(void(*)(void))_wrap_b2GetPointStates, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2GetPointStates(b2Manifold manifold1, b2Manifold manifold2) -> PyObject *\n"
		"Compute the point states given two manifolds. The states pertain to the transition from manifold1 to manifold2. So state1 is either persist or remove while state2 is either add or persist.\n"
		""},
	 { "new_b2ContactPoint", _wrap_new_b2ContactPoint, METH_NOARGS, "new_b2ContactPoint() -> b2ContactPoint"},
	 { "delete_b2ContactPoint", _wrap_delete_b2ContactPoint, METH_O, "delete_b2ContactPoint(b2ContactPoint self)"},
	 { "b2ContactPoint_fixtureA_set", _wrap_b2ContactPoint_fixtureA_set, METH_VARARGS, "b2ContactPoint_fixtureA_set(b2ContactPoint self, b2Fixture fixtureA)"},
	 { "b2ContactPoint_fixtureA_get", _wrap_b2ContactPoint_fixtureA_get, METH_O, "b2ContactPoint_fixtureA_get(b2ContactPoint self) -> b2Fixture"},
	 { "b2ContactPoint_fixtureB_set", _wrap_b2ContactPoint_fixtureB_set, METH_VARARGS, "b2ContactPoint_fixtureB_set(b2ContactPoint self, b2Fixture fixtureB)"},
	 { "b2ContactPoint_fixtureB_get", _wrap_b2ContactPoint_fixtureB_get, METH_O, "b2ContactPoint_fixtureB_get(b2ContactPoint self) -> b2Fixture"},
	 { "b2ContactPoint_normal_set", _wrap_b2ContactPoint_normal_set, METH_VARARGS, "b2ContactPoint_normal_set(b2ContactPoint self, b2Vec2 normal)"},
	 { "b2ContactPoint_normal_get", _wrap_b2ContactPoint_normal_get, METH_O, "b2ContactPoint_normal_get(b2ContactPoint self) -> b2Vec2"},
	 { "b2ContactPoint_position_set", _wrap_b2ContactPoint_position_set, METH_VARARGS, "b2ContactPoint_position_set(b2ContactPoint self, b2Vec2 position)"},
	 { "b2ContactPoint_position_get", _wrap_b2ContactPoint_position_get, METH_O, "b2ContactPoint_position_get(b2ContactPoint self) -> b2Vec2"},
	 { "b2ContactPoint_state_set", _wrap_b2ContactPoint_state_set, METH_VARARGS, "b2ContactPoint_state_set(b2ContactPoint self, b2PointState state)"},
	 { "b2ContactPoint_state_get", _wrap_b2ContactPoint_state_get, METH_O, "b2ContactPoint_state_get(b2ContactPoint self) -> b2PointState"},
	 { "b2ContactPoint___hash__", _wrap_b2ContactPoint___hash__, METH_O, "__hash__(b2ContactPoint self) -> long"},
	 { "b2ContactPoint_swigregister", b2ContactPoint_swigregister, METH_O, NULL},
	 { "b2ContactPoint_swiginit", b2ContactPoint_swiginit, METH_VARARGS, NULL},
	 { "_b2TimeOfImpact", _wrap__b2TimeOfImpact, METH_VARARGS, "\n"
		"_b2TimeOfImpact(b2Shape shapeA, int idxA, b2Shape shapeB, int idxB, b2Sweep sweepA, b2Sweep sweepB, float32 tMax) -> b2TOIOutput\n"
		"_b2TimeOfImpact(b2TOIInput input) -> b2TOIOutput\n"
		""},
	 { "b2AssertException___hash__", _wrap_b2AssertException___hash__, METH_O, "__hash__(b2AssertException self) -> long"},
	 { "new_b2AssertException", _wrap_new_b2AssertException, METH_NOARGS, "new_b2AssertException() -> b2AssertException"},
	 { "delete_b2AssertException", _wrap_delete_b2AssertException, METH_O, "delete_b2AssertException(b2AssertException self)"},
	 { "b2AssertException_swigregister", b2AssertException_swigregister, METH_O, NULL},
	 { "b2AssertException_swiginit", b2AssertException_swiginit, METH_VARARGS, NULL},
	 { "b2Alloc", (PyCFunction)(void(*)(void))_wrap_b2Alloc, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Alloc(int32 size) -> void *\n"
		"Implement this function to use your own memory allocator.\n"
		""},
	 { "b2Free", (PyCFunction)(void(*)(void))_wrap_b2Free, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2Free(void * mem)\n"
		"If you implement b2Alloc, you should also implement this function.\n"
		""},
	 { "b2Log", (PyCFunction)(void(*)(void))_wrap_b2Log, METH_VARARGS|METH_KEYWORDS, "b2Log(char const * string)"},
	 { "b2Version_major_set", _wrap_b2Version_major_set, METH_VARARGS, "b2Version_major_set(b2Version self, int32 major)"},
	 { "b2Version_major_get", _wrap_b2Version_major_get, METH_O, "b2Version_major_get(b2Version self) -> int32"},
	 { "b2Version_minor_set", _wrap_b2Version_minor_set, METH_VARARGS, "b2Version_minor_set(b2Version self, int32 minor)"},
	 { "b2Version_minor_get", _wrap_b2Version_minor_get, METH_O, "b2Version_minor_get(b2Version self) -> int32"},
	 { "b2Version_revision_set", _wrap_b2Version_revision_set, METH_VARARGS, "b2Version_revision_set(b2Version self, int32 revision)"},
	 { "b2Version_revision_get", _wrap_b2Version_revision_get, METH_O, "b2Version_revision_get(b2Version self) -> int32"},
	 { "b2Version___hash__", _wrap_b2Version___hash__, METH_O, "__hash__(b2Version self) -> long"},
	 { "new_b2Version", _wrap_new_b2Version, METH_NOARGS, "\n"
		"new_b2Version() -> b2Version\n"
		"Version numbering scheme. See http://en.wikipedia.org/wiki/Software_versioning\n"
		""},
	 { "delete_b2Version", _wrap_delete_b2Version, METH_O, "delete_b2Version(b2Version self)"},
	 { "b2Version_swigregister", b2Version_swigregister, METH_O, NULL},
	 { "b2Version_swiginit", b2Version_swiginit, METH_VARARGS, NULL},
	 { "b2IsValid", (PyCFunction)(void(*)(void))_wrap_b2IsValid, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2IsValid(float32 x) -> bool\n"
		"This function is used to ensure that a floating point number is not a NaN or infinity.\n"
		""},
	 { "b2InvSqrt", (PyCFunction)(void(*)(void))_wrap_b2InvSqrt, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2InvSqrt(float32 x) -> float32\n"
		"This is a approximate yet fast inverse square-root.\n"
		""},
	 { "b2Vec2_SetZero", _wrap_b2Vec2_SetZero, METH_O, "\n"
		"SetZero(b2Vec2 self)\n"
		"Set this vector to all zeros.\n"
		""},
	 { "b2Vec2_Set", (PyCFunction)(void(*)(void))_wrap_b2Vec2_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"Set(b2Vec2 self, float32 x_, float32 y_)\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { "b2Vec2___neg__", _wrap_b2Vec2___neg__, METH_O, "__neg__(b2Vec2 self) -> b2Vec2"},
	 { "b2Vec2___call__", _wrap_b2Vec2___call__, METH_VARARGS, "\n"
		"__call__(b2Vec2 self, int32 i) -> float32\n"
		"__call__(b2Vec2 self, int32 i) -> float32 &\n"
		""},
	 { "b2Vec2___add_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec2___add_vector, METH_VARARGS|METH_KEYWORDS, "__add_vector(b2Vec2 self, b2Vec2 v)"},
	 { "b2Vec2___sub_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec2___sub_vector, METH_VARARGS|METH_KEYWORDS, "__sub_vector(b2Vec2 self, b2Vec2 v)"},
	 { "b2Vec2___mul_float", (PyCFunction)(void(*)(void))_wrap_b2Vec2___mul_float, METH_VARARGS|METH_KEYWORDS, "__mul_float(b2Vec2 self, float32 a)"},
	 { "b2Vec2___Length", _wrap_b2Vec2___Length, METH_O, "\n"
		"__Length(b2Vec2 self) -> float32\n"
		"Get the length of this vector (the norm).\n"
		""},
	 { "b2Vec2___LengthSquared", _wrap_b2Vec2___LengthSquared, METH_O, "\n"
		"__LengthSquared(b2Vec2 self) -> float32\n"
		"Get the length squared. For performance, use this instead of  b2Vec2::Length(if possible).\n"
		""},
	 { "b2Vec2_Normalize", _wrap_b2Vec2_Normalize, METH_O, "\n"
		"Normalize(b2Vec2 self) -> float32\n"
		"Convert this vector into a unit vector. Returns the length.\n"
		""},
	 { "b2Vec2___IsValid", _wrap_b2Vec2___IsValid, METH_O, "\n"
		"__IsValid(b2Vec2 self) -> bool\n"
		"Does this vector contain finite coordinates?\n"
		""},
	 { "b2Vec2___Skew", _wrap_b2Vec2___Skew, METH_O, "\n"
		"__Skew(b2Vec2 self) -> b2Vec2\n"
		"Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n"
		""},
	 { "b2Vec2_x_set", _wrap_b2Vec2_x_set, METH_VARARGS, "b2Vec2_x_set(b2Vec2 self, float32 x)"},
	 { "b2Vec2_x_get", _wrap_b2Vec2_x_get, METH_O, "b2Vec2_x_get(b2Vec2 self) -> float32"},
	 { "b2Vec2_y_set", _wrap_b2Vec2_y_set, METH_VARARGS, "b2Vec2_y_set(b2Vec2 self, float32 y)"},
	 { "b2Vec2_y_get", _wrap_b2Vec2_y_get, METH_O, "b2Vec2_y_get(b2Vec2 self) -> float32"},
	 { "b2Vec2___hash__", _wrap_b2Vec2___hash__, METH_O, "__hash__(b2Vec2 self) -> long"},
	 { "new_b2Vec2", _wrap_new_b2Vec2, METH_VARARGS, "\n"
		"b2Vec2(float32 x, float32 y)\n"
		"b2Vec2()\n"
		"new_b2Vec2(b2Vec2 other) -> b2Vec2\n"
		"Construct using coordinates.\n"
		""},
	 { "b2Vec2_cross", _wrap_b2Vec2_cross, METH_VARARGS, "\n"
		"cross(b2Vec2 self, b2Vec2 other) -> float32\n"
		"cross(b2Vec2 self, float32 s) -> b2Vec2\n"
		""},
	 { "b2Vec2___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___getitem__, METH_VARARGS|METH_KEYWORDS, "__getitem__(b2Vec2 self, int i) -> float32"},
	 { "b2Vec2___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(b2Vec2 self, int i, float32 value)"},
	 { "b2Vec2___equ", (PyCFunction)(void(*)(void))_wrap_b2Vec2___equ, METH_VARARGS|METH_KEYWORDS, "__equ(b2Vec2 self, b2Vec2 other) -> bool"},
	 { "b2Vec2_dot", (PyCFunction)(void(*)(void))_wrap_b2Vec2_dot, METH_VARARGS|METH_KEYWORDS, "dot(b2Vec2 self, b2Vec2 other) -> float32"},
	 { "b2Vec2___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___truediv__, METH_VARARGS|METH_KEYWORDS, "__truediv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___div__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___div__, METH_VARARGS|METH_KEYWORDS, "__div__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___mul__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___add__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___add__, METH_VARARGS|METH_KEYWORDS, "__add__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { "b2Vec2___sub__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { "b2Vec2___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___rmul__, METH_VARARGS|METH_KEYWORDS, "__rmul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___rdiv__", (PyCFunction)(void(*)(void))_wrap_b2Vec2___rdiv__, METH_VARARGS|METH_KEYWORDS, "__rdiv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { "b2Vec2___div_float", (PyCFunction)(void(*)(void))_wrap_b2Vec2___div_float, METH_VARARGS|METH_KEYWORDS, "__div_float(b2Vec2 self, float32 a)"},
	 { "delete_b2Vec2", _wrap_delete_b2Vec2, METH_O, "delete_b2Vec2(b2Vec2 self)"},
	 { "b2Vec2_swigregister", b2Vec2_swigregister, METH_O, NULL},
	 { "b2Vec2_swiginit", b2Vec2_swiginit, METH_VARARGS, NULL},
	 { "b2Vec3_SetZero", _wrap_b2Vec3_SetZero, METH_O, "\n"
		"SetZero(b2Vec3 self)\n"
		"Set this vector to all zeros.\n"
		""},
	 { "b2Vec3_Set", (PyCFunction)(void(*)(void))_wrap_b2Vec3_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"Set(b2Vec3 self, float32 x_, float32 y_, float32 z_)\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { "b2Vec3___neg__", _wrap_b2Vec3___neg__, METH_O, "__neg__(b2Vec3 self) -> b2Vec3"},
	 { "b2Vec3___add_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec3___add_vector, METH_VARARGS|METH_KEYWORDS, "__add_vector(b2Vec3 self, b2Vec3 v)"},
	 { "b2Vec3___sub_vector", (PyCFunction)(void(*)(void))_wrap_b2Vec3___sub_vector, METH_VARARGS|METH_KEYWORDS, "__sub_vector(b2Vec3 self, b2Vec3 v)"},
	 { "b2Vec3___mul_float", (PyCFunction)(void(*)(void))_wrap_b2Vec3___mul_float, METH_VARARGS|METH_KEYWORDS, "__mul_float(b2Vec3 self, float32 s)"},
	 { "b2Vec3_x_set", _wrap_b2Vec3_x_set, METH_VARARGS, "b2Vec3_x_set(b2Vec3 self, float32 x)"},
	 { "b2Vec3_x_get", _wrap_b2Vec3_x_get, METH_O, "b2Vec3_x_get(b2Vec3 self) -> float32"},
	 { "b2Vec3_y_set", _wrap_b2Vec3_y_set, METH_VARARGS, "b2Vec3_y_set(b2Vec3 self, float32 y)"},
	 { "b2Vec3_y_get", _wrap_b2Vec3_y_get, METH_O, "b2Vec3_y_get(b2Vec3 self) -> float32"},
	 { "b2Vec3_z_set", _wrap_b2Vec3_z_set, METH_VARARGS, "b2Vec3_z_set(b2Vec3 self, float32 z)"},
	 { "b2Vec3_z_get", _wrap_b2Vec3_z_get, METH_O, "b2Vec3_z_get(b2Vec3 self) -> float32"},
	 { "b2Vec3___hash__", _wrap_b2Vec3___hash__, METH_O, "__hash__(b2Vec3 self) -> long"},
	 { "new_b2Vec3", _wrap_new_b2Vec3, METH_VARARGS, "\n"
		"b2Vec3(float32 x, float32 y, float32 z)\n"
		"b2Vec3()\n"
		"b2Vec3(b2Vec3 other)\n"
		"new_b2Vec3(b2Vec2 other) -> b2Vec3\n"
		"Construct using coordinates.\n"
		""},
	 { "b2Vec3_cross", (PyCFunction)(void(*)(void))_wrap_b2Vec3_cross, METH_VARARGS|METH_KEYWORDS, "cross(b2Vec3 self, b2Vec3 b) -> b2Vec3"},
	 { "b2Vec3___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___getitem__, METH_VARARGS|METH_KEYWORDS, "__getitem__(b2Vec3 self, int i) -> float32"},
	 { "b2Vec3___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(b2Vec3 self, int i, float32 value)"},
	 { "b2Vec3___IsValid", _wrap_b2Vec3___IsValid, METH_O, "__IsValid(b2Vec3 self) -> bool"},
	 { "b2Vec3___Length", _wrap_b2Vec3___Length, METH_O, "__Length(b2Vec3 self) -> float32"},
	 { "b2Vec3___LengthSquared", _wrap_b2Vec3___LengthSquared, METH_O, "__LengthSquared(b2Vec3 self) -> float32"},
	 { "b2Vec3___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___truediv__, METH_VARARGS|METH_KEYWORDS, "__truediv__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___div__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___div__, METH_VARARGS|METH_KEYWORDS, "__div__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___mul__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___add__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___add__, METH_VARARGS|METH_KEYWORDS, "__add__(b2Vec3 self, b2Vec3 other) -> b2Vec3"},
	 { "b2Vec3___sub__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(b2Vec3 self, b2Vec3 other) -> b2Vec3"},
	 { "b2Vec3___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___rmul__, METH_VARARGS|METH_KEYWORDS, "__rmul__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___rdiv__", (PyCFunction)(void(*)(void))_wrap_b2Vec3___rdiv__, METH_VARARGS|METH_KEYWORDS, "__rdiv__(b2Vec3 self, float32 a) -> b2Vec3"},
	 { "b2Vec3___div_float", (PyCFunction)(void(*)(void))_wrap_b2Vec3___div_float, METH_VARARGS|METH_KEYWORDS, "__div_float(b2Vec3 self, float32 a)"},
	 { "delete_b2Vec3", _wrap_delete_b2Vec3, METH_O, "delete_b2Vec3(b2Vec3 self)"},
	 { "b2Vec3_swigregister", b2Vec3_swigregister, METH_O, NULL},
	 { "b2Vec3_swiginit", b2Vec3_swiginit, METH_VARARGS, NULL},
	 { "b2Mat22_SetIdentity", _wrap_b2Mat22_SetIdentity, METH_O, "\n"
		"SetIdentity(b2Mat22 self)\n"
		"Set this to the identity matrix.\n"
		""},
	 { "b2Mat22_SetZero", _wrap_b2Mat22_SetZero, METH_O, "\n"
		"SetZero(b2Mat22 self)\n"
		"Set this matrix to all zeros.\n"
		""},
	 { "b2Mat22___GetInverse", _wrap_b2Mat22___GetInverse, METH_O, "__GetInverse(b2Mat22 self) -> b2Mat22"},
	 { "b2Mat22_Solve", (PyCFunction)(void(*)(void))_wrap_b2Mat22_Solve, METH_VARARGS|METH_KEYWORDS, "\n"
		"Solve(b2Mat22 self, b2Vec2 b) -> b2Vec2\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { "b2Mat22_col1_set", _wrap_b2Mat22_col1_set, METH_VARARGS, "b2Mat22_col1_set(b2Mat22 self, b2Vec2 ex)"},
	 { "b2Mat22_col1_get", _wrap_b2Mat22_col1_get, METH_O, "b2Mat22_col1_get(b2Mat22 self) -> b2Vec2"},
	 { "b2Mat22_col2_set", _wrap_b2Mat22_col2_set, METH_VARARGS, "b2Mat22_col2_set(b2Mat22 self, b2Vec2 ey)"},
	 { "b2Mat22_col2_get", _wrap_b2Mat22_col2_get, METH_O, "b2Mat22_col2_get(b2Mat22 self) -> b2Vec2"},
	 { "b2Mat22___hash__", _wrap_b2Mat22___hash__, METH_O, "__hash__(b2Mat22 self) -> long"},
	 { "new_b2Mat22", _wrap_new_b2Mat22, METH_VARARGS, "\n"
		"b2Mat22(b2Vec2 c1, b2Vec2 c2)\n"
		"b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)\n"
		"new_b2Mat22() -> b2Mat22\n"
		"Construct this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { "b2Mat22___GetAngle", _wrap_b2Mat22___GetAngle, METH_O, "__GetAngle(b2Mat22 self) -> float32"},
	 { "b2Mat22___SetAngle", _wrap_b2Mat22___SetAngle, METH_VARARGS, "\n"
		"__SetAngle(b2Mat22 self, b2Vec2 c1, b2Vec2 c2)\n"
		"__SetAngle(b2Mat22 self, float32 angle)\n"
		"Initialize this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { "b2Mat22___mul__", _wrap_b2Mat22___mul__, METH_VARARGS, "\n"
		"__mul__(b2Mat22 self, b2Vec2 v) -> b2Vec2\n"
		"__mul__(b2Mat22 self, b2Mat22 m) -> b2Mat22\n"
		""},
	 { "b2Mat22___add__", (PyCFunction)(void(*)(void))_wrap_b2Mat22___add__, METH_VARARGS|METH_KEYWORDS, "__add__(b2Mat22 self, b2Mat22 m) -> b2Mat22"},
	 { "b2Mat22___sub__", (PyCFunction)(void(*)(void))_wrap_b2Mat22___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(b2Mat22 self, b2Mat22 m) -> b2Mat22"},
	 { "b2Mat22___iadd", (PyCFunction)(void(*)(void))_wrap_b2Mat22___iadd, METH_VARARGS|METH_KEYWORDS, "__iadd(b2Mat22 self, b2Mat22 m)"},
	 { "b2Mat22___isub", (PyCFunction)(void(*)(void))_wrap_b2Mat22___isub, METH_VARARGS|METH_KEYWORDS, "__isub(b2Mat22 self, b2Mat22 m)"},
	 { "delete_b2Mat22", _wrap_delete_b2Mat22, METH_O, "delete_b2Mat22(b2Mat22 self)"},
	 { "b2Mat22_swigregister", b2Mat22_swigregister, METH_O, NULL},
	 { "b2Mat22_swiginit", b2Mat22_swiginit, METH_VARARGS, NULL},
	 { "b2Mat33_SetZero", _wrap_b2Mat33_SetZero, METH_O, "\n"
		"SetZero(b2Mat33 self)\n"
		"Set this matrix to all zeros.\n"
		""},
	 { "b2Mat33_Solve33", (PyCFunction)(void(*)(void))_wrap_b2Mat33_Solve33, METH_VARARGS|METH_KEYWORDS, "\n"
		"Solve33(b2Mat33 self, b2Vec3 b) -> b2Vec3\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { "b2Mat33_Solve22", (PyCFunction)(void(*)(void))_wrap_b2Mat33_Solve22, METH_VARARGS|METH_KEYWORDS, "\n"
		"Solve22(b2Mat33 self, b2Vec2 b) -> b2Vec2\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix equation.\n"
		""},
	 { "b2Mat33_GetInverse22", (PyCFunction)(void(*)(void))_wrap_b2Mat33_GetInverse22, METH_VARARGS|METH_KEYWORDS, "GetInverse22(b2Mat33 self, b2Mat33 M)"},
	 { "b2Mat33_GetSymInverse33", (PyCFunction)(void(*)(void))_wrap_b2Mat33_GetSymInverse33, METH_VARARGS|METH_KEYWORDS, "GetSymInverse33(b2Mat33 self, b2Mat33 M)"},
	 { "b2Mat33_col1_set", _wrap_b2Mat33_col1_set, METH_VARARGS, "b2Mat33_col1_set(b2Mat33 self, b2Vec3 ex)"},
	 { "b2Mat33_col1_get", _wrap_b2Mat33_col1_get, METH_O, "b2Mat33_col1_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33_col2_set", _wrap_b2Mat33_col2_set, METH_VARARGS, "b2Mat33_col2_set(b2Mat33 self, b2Vec3 ey)"},
	 { "b2Mat33_col2_get", _wrap_b2Mat33_col2_get, METH_O, "b2Mat33_col2_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33_col3_set", _wrap_b2Mat33_col3_set, METH_VARARGS, "b2Mat33_col3_set(b2Mat33 self, b2Vec3 ez)"},
	 { "b2Mat33_col3_get", _wrap_b2Mat33_col3_get, METH_O, "b2Mat33_col3_get(b2Mat33 self) -> b2Vec3"},
	 { "b2Mat33___hash__", _wrap_b2Mat33___hash__, METH_O, "__hash__(b2Mat33 self) -> long"},
	 { "new_b2Mat33", _wrap_new_b2Mat33, METH_VARARGS, "\n"
		"b2Mat33(b2Vec3 c1, b2Vec3 c2, b2Vec3 c3)\n"
		"new_b2Mat33() -> b2Mat33\n"
		"Construct this matrix using columns.\n"
		""},
	 { "b2Mat33___mul__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Mat33 self, b2Vec3 v) -> b2Vec3"},
	 { "b2Mat33___add__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___add__, METH_VARARGS|METH_KEYWORDS, "__add__(b2Mat33 self, b2Mat33 other) -> b2Mat33"},
	 { "b2Mat33___sub__", (PyCFunction)(void(*)(void))_wrap_b2Mat33___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(b2Mat33 self, b2Mat33 other) -> b2Mat33"},
	 { "b2Mat33___iadd", (PyCFunction)(void(*)(void))_wrap_b2Mat33___iadd, METH_VARARGS|METH_KEYWORDS, "__iadd(b2Mat33 self, b2Mat33 other)"},
	 { "b2Mat33___isub", (PyCFunction)(void(*)(void))_wrap_b2Mat33___isub, METH_VARARGS|METH_KEYWORDS, "__isub(b2Mat33 self, b2Mat33 other)"},
	 { "delete_b2Mat33", _wrap_delete_b2Mat33, METH_O, "delete_b2Mat33(b2Mat33 self)"},
	 { "b2Mat33_swigregister", b2Mat33_swigregister, METH_O, NULL},
	 { "b2Mat33_swiginit", b2Mat33_swiginit, METH_VARARGS, NULL},
	 { "new_b2Rot", _wrap_new_b2Rot, METH_VARARGS, "\n"
		"b2Rot()\n"
		"new_b2Rot(float32 angle) -> b2Rot\n"
		""},
	 { "b2Rot___SetAngle", (PyCFunction)(void(*)(void))_wrap_b2Rot___SetAngle, METH_VARARGS|METH_KEYWORDS, "__SetAngle(b2Rot self, float32 angle)"},
	 { "b2Rot_SetIdentity", _wrap_b2Rot_SetIdentity, METH_O, "SetIdentity(b2Rot self)"},
	 { "b2Rot___GetAngle", _wrap_b2Rot___GetAngle, METH_O, "__GetAngle(b2Rot self) -> float32"},
	 { "b2Rot_GetXAxis", _wrap_b2Rot_GetXAxis, METH_O, "GetXAxis(b2Rot self) -> b2Vec2"},
	 { "b2Rot_GetYAxis", _wrap_b2Rot_GetYAxis, METH_O, "GetYAxis(b2Rot self) -> b2Vec2"},
	 { "b2Rot_s_set", _wrap_b2Rot_s_set, METH_VARARGS, "b2Rot_s_set(b2Rot self, float32 s)"},
	 { "b2Rot_s_get", _wrap_b2Rot_s_get, METH_O, "b2Rot_s_get(b2Rot self) -> float32"},
	 { "b2Rot_c_set", _wrap_b2Rot_c_set, METH_VARARGS, "b2Rot_c_set(b2Rot self, float32 c)"},
	 { "b2Rot_c_get", _wrap_b2Rot_c_get, METH_O, "b2Rot_c_get(b2Rot self) -> float32"},
	 { "b2Rot___mul__", (PyCFunction)(void(*)(void))_wrap_b2Rot___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Rot self, b2Vec2 v) -> b2Vec2"},
	 { "delete_b2Rot", _wrap_delete_b2Rot, METH_O, "delete_b2Rot(b2Rot self)"},
	 { "b2Rot_swigregister", b2Rot_swigregister, METH_O, NULL},
	 { "b2Rot_swiginit", b2Rot_swiginit, METH_VARARGS, NULL},
	 { "new_b2Transform", _wrap_new_b2Transform, METH_VARARGS, "\n"
		"b2Transform()\n"
		"new_b2Transform(b2Vec2 position, b2Rot rotation) -> b2Transform\n"
		"Initialize using a position vector and a rotation matrix.\n"
		""},
	 { "b2Transform_SetIdentity", _wrap_b2Transform_SetIdentity, METH_O, "\n"
		"SetIdentity(b2Transform self)\n"
		"Set this to the identity transform.\n"
		""},
	 { "b2Transform_Set", (PyCFunction)(void(*)(void))_wrap_b2Transform_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"Set(b2Transform self, b2Vec2 position, float32 angle)\n"
		"Set this based on the position and angle.\n"
		""},
	 { "b2Transform_position_set", _wrap_b2Transform_position_set, METH_VARARGS, "b2Transform_position_set(b2Transform self, b2Vec2 p)"},
	 { "b2Transform_position_get", _wrap_b2Transform_position_get, METH_O, "b2Transform_position_get(b2Transform self) -> b2Vec2"},
	 { "b2Transform_q_set", _wrap_b2Transform_q_set, METH_VARARGS, "b2Transform_q_set(b2Transform self, b2Rot q)"},
	 { "b2Transform_q_get", _wrap_b2Transform_q_get, METH_O, "b2Transform_q_get(b2Transform self) -> b2Rot"},
	 { "b2Transform___hash__", _wrap_b2Transform___hash__, METH_O, "__hash__(b2Transform self) -> long"},
	 { "b2Transform___get_rotation_matrix", _wrap_b2Transform___get_rotation_matrix, METH_O, "__get_rotation_matrix(b2Transform self) -> b2Rot"},
	 { "b2Transform___mul__", (PyCFunction)(void(*)(void))_wrap_b2Transform___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Transform self, b2Vec2 v) -> b2Vec2"},
	 { "delete_b2Transform", _wrap_delete_b2Transform, METH_O, "delete_b2Transform(b2Transform self)"},
	 { "b2Transform_swigregister", b2Transform_swigregister, METH_O, NULL},
	 { "b2Transform_swiginit", b2Transform_swiginit, METH_VARARGS, NULL},
	 { "b2Sweep_Advance", (PyCFunction)(void(*)(void))_wrap_b2Sweep_Advance, METH_VARARGS|METH_KEYWORDS, "\n"
		"Advance(b2Sweep self, float32 alpha)\n"
		"Advance the sweep forward, yielding a new initial state.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"alpha: \n"
		"the new initial time.\n"
		""},
	 { "b2Sweep_Normalize", _wrap_b2Sweep_Normalize, METH_O, "\n"
		"Normalize(b2Sweep self)\n"
		"Normalize the angles.\n"
		""},
	 { "b2Sweep_localCenter_set", _wrap_b2Sweep_localCenter_set, METH_VARARGS, "b2Sweep_localCenter_set(b2Sweep self, b2Vec2 localCenter)"},
	 { "b2Sweep_localCenter_get", _wrap_b2Sweep_localCenter_get, METH_O, "b2Sweep_localCenter_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_c0_set", _wrap_b2Sweep_c0_set, METH_VARARGS, "b2Sweep_c0_set(b2Sweep self, b2Vec2 c0)"},
	 { "b2Sweep_c0_get", _wrap_b2Sweep_c0_get, METH_O, "b2Sweep_c0_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_c_set", _wrap_b2Sweep_c_set, METH_VARARGS, "b2Sweep_c_set(b2Sweep self, b2Vec2 c)"},
	 { "b2Sweep_c_get", _wrap_b2Sweep_c_get, METH_O, "b2Sweep_c_get(b2Sweep self) -> b2Vec2"},
	 { "b2Sweep_a0_set", _wrap_b2Sweep_a0_set, METH_VARARGS, "b2Sweep_a0_set(b2Sweep self, float32 a0)"},
	 { "b2Sweep_a0_get", _wrap_b2Sweep_a0_get, METH_O, "b2Sweep_a0_get(b2Sweep self) -> float32"},
	 { "b2Sweep_a_set", _wrap_b2Sweep_a_set, METH_VARARGS, "b2Sweep_a_set(b2Sweep self, float32 a)"},
	 { "b2Sweep_a_get", _wrap_b2Sweep_a_get, METH_O, "b2Sweep_a_get(b2Sweep self) -> float32"},
	 { "b2Sweep_alpha0_set", _wrap_b2Sweep_alpha0_set, METH_VARARGS, "b2Sweep_alpha0_set(b2Sweep self, float32 alpha0)"},
	 { "b2Sweep_alpha0_get", _wrap_b2Sweep_alpha0_get, METH_O, "b2Sweep_alpha0_get(b2Sweep self) -> float32"},
	 { "b2Sweep___hash__", _wrap_b2Sweep___hash__, METH_O, "__hash__(b2Sweep self) -> long"},
	 { "b2Sweep_GetTransform", _wrap_b2Sweep_GetTransform, METH_VARARGS, "\n"
		"GetTransform(b2Sweep self, b2Transform xfb, float32 beta)\n"
		"GetTransform(b2Sweep self, float32 alpha) -> b2Transform\n"
		"Get the interpolated transform at a specific time.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"beta: \n"
		"is a factor in [0,1], where 0 indicates alpha0.\n"
		""},
	 { "new_b2Sweep", _wrap_new_b2Sweep, METH_NOARGS, "\n"
		"new_b2Sweep() -> b2Sweep\n"
		"This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body origin, which may no coincide with the center of mass. However, to support dynamics we must interpolate the center of mass position.\n"
		""},
	 { "delete_b2Sweep", _wrap_delete_b2Sweep, METH_O, "delete_b2Sweep(b2Sweep self)"},
	 { "b2Sweep_swigregister", b2Sweep_swigregister, METH_O, NULL},
	 { "b2Sweep_swiginit", b2Sweep_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceSquared", (PyCFunction)(void(*)(void))_wrap_b2DistanceSquared, METH_VARARGS|METH_KEYWORDS, "b2DistanceSquared(b2Vec2 a, b2Vec2 b) -> float32"},
	 { "b2Dot", _wrap_b2Dot, METH_VARARGS, "\n"
		"b2Dot(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Dot(b2Vec3 a, b2Vec3 b) -> float32\n"
		"Perform the dot product on two vectors.\n"
		""},
	 { "b2Cross", _wrap_b2Cross, METH_VARARGS, "\n"
		"b2Cross(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Cross(b2Vec2 a, float32 s) -> b2Vec2\n"
		"b2Cross(float32 s, b2Vec2 a) -> b2Vec2\n"
		"b2Cross(b2Vec3 a, b2Vec3 b) -> b2Vec3\n"
		"Perform the cross product on two vectors.\n"
		""},
	 { "b2Mul22", (PyCFunction)(void(*)(void))_wrap_b2Mul22, METH_VARARGS|METH_KEYWORDS, "b2Mul22(b2Mat33 A, b2Vec2 v) -> b2Vec2"},
	 { "b2Mul", _wrap_b2Mul, METH_VARARGS, "\n"
		"b2Mul(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2Mul(b2Mat33 A, b2Vec3 v) -> b2Vec3\n"
		"b2Mul(b2Rot q, b2Rot r) -> b2Rot\n"
		"b2Mul(b2Rot q, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Transform T, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Transform A, b2Transform B) -> b2Transform\n"
		"Multiply a matrix times a vector.\n"
		""},
	 { "b2MulT", _wrap_b2MulT, METH_VARARGS, "\n"
		"b2MulT(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2MulT(b2Rot q, b2Rot r) -> b2Rot\n"
		"b2MulT(b2Rot q, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Transform T, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Transform A, b2Transform B) -> b2Transform\n"
		"Multiply a matrix transpose times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another (inverse transform).\n"
		""},
	 { "b2Abs", _wrap_b2Abs, METH_VARARGS, "\n"
		"b2Abs(b2Vec2 a) -> b2Vec2\n"
		"b2Abs(b2Mat22 A) -> b2Mat22\n"
		""},
	 { "b2Min", (PyCFunction)(void(*)(void))_wrap_b2Min, METH_VARARGS|METH_KEYWORDS, "b2Min(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { "b2Max", (PyCFunction)(void(*)(void))_wrap_b2Max, METH_VARARGS|METH_KEYWORDS, "b2Max(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { "b2Clamp", (PyCFunction)(void(*)(void))_wrap_b2Clamp, METH_VARARGS|METH_KEYWORDS, "b2Clamp(b2Vec2 a, b2Vec2 low, b2Vec2 high) -> b2Vec2"},
	 { "b2NextPowerOfTwo", (PyCFunction)(void(*)(void))_wrap_b2NextPowerOfTwo, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2NextPowerOfTwo(uint32 x) -> uint32\n"
		"\"Next Largest Power of 2 Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the upper bits into the lower bits. This process yields a bit vector with the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next largest power of 2. For a 32-bit value:\"\n"
		""},
	 { "b2IsPowerOfTwo", (PyCFunction)(void(*)(void))_wrap_b2IsPowerOfTwo, METH_VARARGS|METH_KEYWORDS, "b2IsPowerOfTwo(uint32 x) -> bool"},
	 { "b2ContactFeature_indexA_set", _wrap_b2ContactFeature_indexA_set, METH_VARARGS, "b2ContactFeature_indexA_set(b2ContactFeature self, uint8 indexA)"},
	 { "b2ContactFeature_indexA_get", _wrap_b2ContactFeature_indexA_get, METH_O, "b2ContactFeature_indexA_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_indexB_set", _wrap_b2ContactFeature_indexB_set, METH_VARARGS, "b2ContactFeature_indexB_set(b2ContactFeature self, uint8 indexB)"},
	 { "b2ContactFeature_indexB_get", _wrap_b2ContactFeature_indexB_get, METH_O, "b2ContactFeature_indexB_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_typeA_set", _wrap_b2ContactFeature_typeA_set, METH_VARARGS, "b2ContactFeature_typeA_set(b2ContactFeature self, uint8 typeA)"},
	 { "b2ContactFeature_typeA_get", _wrap_b2ContactFeature_typeA_get, METH_O, "b2ContactFeature_typeA_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature_typeB_set", _wrap_b2ContactFeature_typeB_set, METH_VARARGS, "b2ContactFeature_typeB_set(b2ContactFeature self, uint8 typeB)"},
	 { "b2ContactFeature_typeB_get", _wrap_b2ContactFeature_typeB_get, METH_O, "b2ContactFeature_typeB_get(b2ContactFeature self) -> uint8"},
	 { "b2ContactFeature___hash__", _wrap_b2ContactFeature___hash__, METH_O, "__hash__(b2ContactFeature self) -> long"},
	 { "new_b2ContactFeature", _wrap_new_b2ContactFeature, METH_NOARGS, "\n"
		"new_b2ContactFeature() -> b2ContactFeature\n"
		"The features that intersect to form the contact point This must be 4 bytes or less.\n"
		""},
	 { "delete_b2ContactFeature", _wrap_delete_b2ContactFeature, METH_O, "delete_b2ContactFeature(b2ContactFeature self)"},
	 { "b2ContactFeature_swigregister", b2ContactFeature_swigregister, METH_O, NULL},
	 { "b2ContactFeature_swiginit", b2ContactFeature_swiginit, METH_VARARGS, NULL},
	 { "b2ContactID_cf_set", _wrap_b2ContactID_cf_set, METH_VARARGS, "b2ContactID_cf_set(b2ContactID self, b2ContactFeature cf)"},
	 { "b2ContactID_cf_get", _wrap_b2ContactID_cf_get, METH_O, "b2ContactID_cf_get(b2ContactID self) -> b2ContactFeature"},
	 { "b2ContactID_key_set", _wrap_b2ContactID_key_set, METH_VARARGS, "b2ContactID_key_set(b2ContactID self, uint32 key)"},
	 { "b2ContactID_key_get", _wrap_b2ContactID_key_get, METH_O, "b2ContactID_key_get(b2ContactID self) -> uint32"},
	 { "b2ContactID___hash__", _wrap_b2ContactID___hash__, METH_O, "__hash__(b2ContactID self) -> long"},
	 { "new_b2ContactID", _wrap_new_b2ContactID, METH_NOARGS, "new_b2ContactID() -> b2ContactID"},
	 { "delete_b2ContactID", _wrap_delete_b2ContactID, METH_O, "delete_b2ContactID(b2ContactID self)"},
	 { "b2ContactID_swigregister", b2ContactID_swigregister, METH_O, NULL},
	 { "b2ContactID_swiginit", b2ContactID_swiginit, METH_VARARGS, NULL},
	 { "b2ManifoldPoint_localPoint_set", _wrap_b2ManifoldPoint_localPoint_set, METH_VARARGS, "b2ManifoldPoint_localPoint_set(b2ManifoldPoint self, b2Vec2 localPoint)"},
	 { "b2ManifoldPoint_localPoint_get", _wrap_b2ManifoldPoint_localPoint_get, METH_O, "b2ManifoldPoint_localPoint_get(b2ManifoldPoint self) -> b2Vec2"},
	 { "b2ManifoldPoint_normalImpulse_set", _wrap_b2ManifoldPoint_normalImpulse_set, METH_VARARGS, "b2ManifoldPoint_normalImpulse_set(b2ManifoldPoint self, float32 normalImpulse)"},
	 { "b2ManifoldPoint_normalImpulse_get", _wrap_b2ManifoldPoint_normalImpulse_get, METH_O, "b2ManifoldPoint_normalImpulse_get(b2ManifoldPoint self) -> float32"},
	 { "b2ManifoldPoint_tangentImpulse_set", _wrap_b2ManifoldPoint_tangentImpulse_set, METH_VARARGS, "b2ManifoldPoint_tangentImpulse_set(b2ManifoldPoint self, float32 tangentImpulse)"},
	 { "b2ManifoldPoint_tangentImpulse_get", _wrap_b2ManifoldPoint_tangentImpulse_get, METH_O, "b2ManifoldPoint_tangentImpulse_get(b2ManifoldPoint self) -> float32"},
	 { "b2ManifoldPoint_id_set", _wrap_b2ManifoldPoint_id_set, METH_VARARGS, "b2ManifoldPoint_id_set(b2ManifoldPoint self, b2ContactID id)"},
	 { "b2ManifoldPoint_id_get", _wrap_b2ManifoldPoint_id_get, METH_O, "b2ManifoldPoint_id_get(b2ManifoldPoint self) -> b2ContactID"},
	 { "b2ManifoldPoint___hash__", _wrap_b2ManifoldPoint___hash__, METH_O, "__hash__(b2ManifoldPoint self) -> long"},
	 { "new_b2ManifoldPoint", _wrap_new_b2ManifoldPoint, METH_NOARGS, "\n"
		"new_b2ManifoldPoint() -> b2ManifoldPoint\n"
		"A manifold point is a contact point belonging to a contact manifold. It holds details related to the geometry and dynamics of the contact points. The local point usage depends on the manifold type: -e_circles: the local center of circleB -e_faceA: the local center of cirlceB or the clip point of polygonB -e_faceB: the clip point of polygonA This structure is stored across time steps, so we keep it small. Note: the impulses are used for internal caching and may not provide reliable contact forces, especially for high speed collisions.\n"
		""},
	 { "delete_b2ManifoldPoint", _wrap_delete_b2ManifoldPoint, METH_O, "delete_b2ManifoldPoint(b2ManifoldPoint self)"},
	 { "b2ManifoldPoint_swigregister", b2ManifoldPoint_swigregister, METH_O, NULL},
	 { "b2ManifoldPoint_swiginit", b2ManifoldPoint_swiginit, METH_VARARGS, NULL},
	 { "b2Manifold_localNormal_set", _wrap_b2Manifold_localNormal_set, METH_VARARGS, "b2Manifold_localNormal_set(b2Manifold self, b2Vec2 localNormal)"},
	 { "b2Manifold_localNormal_get", _wrap_b2Manifold_localNormal_get, METH_O, "b2Manifold_localNormal_get(b2Manifold self) -> b2Vec2"},
	 { "b2Manifold_localPoint_set", _wrap_b2Manifold_localPoint_set, METH_VARARGS, "b2Manifold_localPoint_set(b2Manifold self, b2Vec2 localPoint)"},
	 { "b2Manifold_localPoint_get", _wrap_b2Manifold_localPoint_get, METH_O, "b2Manifold_localPoint_get(b2Manifold self) -> b2Vec2"},
	 { "b2Manifold_type__set", _wrap_b2Manifold_type__set, METH_VARARGS, "b2Manifold_type__set(b2Manifold self, b2Manifold::Type type)"},
	 { "b2Manifold_type__get", _wrap_b2Manifold_type__get, METH_O, "b2Manifold_type__get(b2Manifold self) -> b2Manifold::Type"},
	 { "b2Manifold_pointCount_set", _wrap_b2Manifold_pointCount_set, METH_VARARGS, "b2Manifold_pointCount_set(b2Manifold self, int32 pointCount)"},
	 { "b2Manifold_pointCount_get", _wrap_b2Manifold_pointCount_get, METH_O, "b2Manifold_pointCount_get(b2Manifold self) -> int32"},
	 { "b2Manifold___hash__", _wrap_b2Manifold___hash__, METH_O, "__hash__(b2Manifold self) -> long"},
	 { "b2Manifold___GetPoint", (PyCFunction)(void(*)(void))_wrap_b2Manifold___GetPoint, METH_VARARGS|METH_KEYWORDS, "__GetPoint(b2Manifold self, int i) -> b2ManifoldPoint"},
	 { "new_b2Manifold", _wrap_new_b2Manifold, METH_NOARGS, "\n"
		"new_b2Manifold() -> b2Manifold\n"
		"A manifold for two touching convex shapes. Box2D supports multiple types of contact:\n"
		"clip point versus plane with radius\n"
		"point versus point with radius (circles) The local point usage depends on the manifold type: -e_circles: the local center of circleA -e_faceA: the center of faceA -e_faceB: the center of faceB Similarly the local normal usage: -e_circles: not used -e_faceA: the normal on polygonA -e_faceB: the normal on polygonB We store contacts in this way so that position correction can account for movement, which is critical for continuous physics. All contact scenarios must be expressed in one of these types. This structure is stored across time steps, so we keep it small.\n"
		""},
	 { "delete_b2Manifold", _wrap_delete_b2Manifold, METH_O, "delete_b2Manifold(b2Manifold self)"},
	 { "b2Manifold_swigregister", b2Manifold_swigregister, METH_O, NULL},
	 { "b2Manifold_swiginit", b2Manifold_swiginit, METH_VARARGS, NULL},
	 { "b2WorldManifold_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WorldManifold_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2WorldManifold self, b2Manifold manifold, b2Transform xfA, float32 radiusA, b2Transform xfB, float32 radiusB)\n"
		"Evaluate the manifold with supplied transforms. This assumes modest motion from the original state. This does not change the point count, impulses, etc. The radii must come from the shapes that generated the manifold.\n"
		""},
	 { "b2WorldManifold_normal_set", _wrap_b2WorldManifold_normal_set, METH_VARARGS, "b2WorldManifold_normal_set(b2WorldManifold self, b2Vec2 normal)"},
	 { "b2WorldManifold_normal_get", _wrap_b2WorldManifold_normal_get, METH_O, "b2WorldManifold_normal_get(b2WorldManifold self) -> b2Vec2"},
	 { "b2WorldManifold___hash__", _wrap_b2WorldManifold___hash__, METH_O, "__hash__(b2WorldManifold self) -> long"},
	 { "b2WorldManifold___get_points", _wrap_b2WorldManifold___get_points, METH_O, "__get_points(b2WorldManifold self) -> PyObject *"},
	 { "new_b2WorldManifold", _wrap_new_b2WorldManifold, METH_NOARGS, "\n"
		"new_b2WorldManifold() -> b2WorldManifold\n"
		"This is used to compute the current state of a contact manifold.\n"
		""},
	 { "delete_b2WorldManifold", _wrap_delete_b2WorldManifold, METH_O, "delete_b2WorldManifold(b2WorldManifold self)"},
	 { "b2WorldManifold_swigregister", b2WorldManifold_swigregister, METH_O, NULL},
	 { "b2WorldManifold_swiginit", b2WorldManifold_swiginit, METH_VARARGS, NULL},
	 { "b2ClipVertex_v_set", _wrap_b2ClipVertex_v_set, METH_VARARGS, "b2ClipVertex_v_set(b2ClipVertex self, b2Vec2 v)"},
	 { "b2ClipVertex_v_get", _wrap_b2ClipVertex_v_get, METH_O, "b2ClipVertex_v_get(b2ClipVertex self) -> b2Vec2"},
	 { "b2ClipVertex_id_set", _wrap_b2ClipVertex_id_set, METH_VARARGS, "b2ClipVertex_id_set(b2ClipVertex self, b2ContactID id)"},
	 { "b2ClipVertex_id_get", _wrap_b2ClipVertex_id_get, METH_O, "b2ClipVertex_id_get(b2ClipVertex self) -> b2ContactID"},
	 { "b2ClipVertex___hash__", _wrap_b2ClipVertex___hash__, METH_O, "__hash__(b2ClipVertex self) -> long"},
	 { "new_b2ClipVertex", _wrap_new_b2ClipVertex, METH_NOARGS, "\n"
		"new_b2ClipVertex() -> b2ClipVertex\n"
		"Used for computing contact manifolds.\n"
		""},
	 { "delete_b2ClipVertex", _wrap_delete_b2ClipVertex, METH_O, "delete_b2ClipVertex(b2ClipVertex self)"},
	 { "b2ClipVertex_swigregister", b2ClipVertex_swigregister, METH_O, NULL},
	 { "b2ClipVertex_swiginit", b2ClipVertex_swiginit, METH_VARARGS, NULL},
	 { "b2RayCastInput_p1_set", _wrap_b2RayCastInput_p1_set, METH_VARARGS, "b2RayCastInput_p1_set(b2RayCastInput self, b2Vec2 p1)"},
	 { "b2RayCastInput_p1_get", _wrap_b2RayCastInput_p1_get, METH_O, "b2RayCastInput_p1_get(b2RayCastInput self) -> b2Vec2"},
	 { "b2RayCastInput_p2_set", _wrap_b2RayCastInput_p2_set, METH_VARARGS, "b2RayCastInput_p2_set(b2RayCastInput self, b2Vec2 p2)"},
	 { "b2RayCastInput_p2_get", _wrap_b2RayCastInput_p2_get, METH_O, "b2RayCastInput_p2_get(b2RayCastInput self) -> b2Vec2"},
	 { "b2RayCastInput_maxFraction_set", _wrap_b2RayCastInput_maxFraction_set, METH_VARARGS, "b2RayCastInput_maxFraction_set(b2RayCastInput self, float32 maxFraction)"},
	 { "b2RayCastInput_maxFraction_get", _wrap_b2RayCastInput_maxFraction_get, METH_O, "b2RayCastInput_maxFraction_get(b2RayCastInput self) -> float32"},
	 { "b2RayCastInput___hash__", _wrap_b2RayCastInput___hash__, METH_O, "__hash__(b2RayCastInput self) -> long"},
	 { "new_b2RayCastInput", _wrap_new_b2RayCastInput, METH_NOARGS, "\n"
		"new_b2RayCastInput() -> b2RayCastInput\n"
		"Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n"
		""},
	 { "delete_b2RayCastInput", _wrap_delete_b2RayCastInput, METH_O, "delete_b2RayCastInput(b2RayCastInput self)"},
	 { "b2RayCastInput_swigregister", b2RayCastInput_swigregister, METH_O, NULL},
	 { "b2RayCastInput_swiginit", b2RayCastInput_swiginit, METH_VARARGS, NULL},
	 { "b2RayCastOutput_normal_set", _wrap_b2RayCastOutput_normal_set, METH_VARARGS, "b2RayCastOutput_normal_set(b2RayCastOutput self, b2Vec2 normal)"},
	 { "b2RayCastOutput_normal_get", _wrap_b2RayCastOutput_normal_get, METH_O, "b2RayCastOutput_normal_get(b2RayCastOutput self) -> b2Vec2"},
	 { "b2RayCastOutput_fraction_set", _wrap_b2RayCastOutput_fraction_set, METH_VARARGS, "b2RayCastOutput_fraction_set(b2RayCastOutput self, float32 fraction)"},
	 { "b2RayCastOutput_fraction_get", _wrap_b2RayCastOutput_fraction_get, METH_O, "b2RayCastOutput_fraction_get(b2RayCastOutput self) -> float32"},
	 { "b2RayCastOutput___hash__", _wrap_b2RayCastOutput___hash__, METH_O, "__hash__(b2RayCastOutput self) -> long"},
	 { "new_b2RayCastOutput", _wrap_new_b2RayCastOutput, METH_NOARGS, "\n"
		"new_b2RayCastOutput() -> b2RayCastOutput\n"
		"Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from  b2RayCastInput.\n"
		""},
	 { "delete_b2RayCastOutput", _wrap_delete_b2RayCastOutput, METH_O, "delete_b2RayCastOutput(b2RayCastOutput self)"},
	 { "b2RayCastOutput_swigregister", b2RayCastOutput_swigregister, METH_O, NULL},
	 { "b2RayCastOutput_swiginit", b2RayCastOutput_swiginit, METH_VARARGS, NULL},
	 { "b2AABB___IsValid", _wrap_b2AABB___IsValid, METH_O, "\n"
		"__IsValid(b2AABB self) -> bool\n"
		"Verify that the bounds are sorted.\n"
		""},
	 { "b2AABB___GetCenter", _wrap_b2AABB___GetCenter, METH_O, "\n"
		"__GetCenter(b2AABB self) -> b2Vec2\n"
		"Get the center of the AABB.\n"
		""},
	 { "b2AABB___GetExtents", _wrap_b2AABB___GetExtents, METH_O, "\n"
		"__GetExtents(b2AABB self) -> b2Vec2\n"
		"Get the extents of the AABB (half-widths).\n"
		""},
	 { "b2AABB___GetPerimeter", _wrap_b2AABB___GetPerimeter, METH_O, "\n"
		"__GetPerimeter(b2AABB self) -> float32\n"
		"Get the perimeter length.\n"
		""},
	 { "b2AABB_Combine", _wrap_b2AABB_Combine, METH_VARARGS, "\n"
		"Combine(b2AABB self, b2AABB aabb)\n"
		"Combine(b2AABB self, b2AABB aabb1, b2AABB aabb2)\n"
		"Combine two AABBs into this one.\n"
		""},
	 { "b2AABB_RayCast", (PyCFunction)(void(*)(void))_wrap_b2AABB_RayCast, METH_VARARGS|METH_KEYWORDS, "RayCast(b2AABB self, b2RayCastOutput output, b2RayCastInput input) -> bool"},
	 { "b2AABB_lowerBound_set", _wrap_b2AABB_lowerBound_set, METH_VARARGS, "b2AABB_lowerBound_set(b2AABB self, b2Vec2 lowerBound)"},
	 { "b2AABB_lowerBound_get", _wrap_b2AABB_lowerBound_get, METH_O, "b2AABB_lowerBound_get(b2AABB self) -> b2Vec2"},
	 { "b2AABB_upperBound_set", _wrap_b2AABB_upperBound_set, METH_VARARGS, "b2AABB_upperBound_set(b2AABB self, b2Vec2 upperBound)"},
	 { "b2AABB_upperBound_get", _wrap_b2AABB_upperBound_get, METH_O, "b2AABB_upperBound_get(b2AABB self) -> b2Vec2"},
	 { "b2AABB___hash__", _wrap_b2AABB___hash__, METH_O, "__hash__(b2AABB self) -> long"},
	 { "b2AABB___contains__", _wrap_b2AABB___contains__, METH_VARARGS, "\n"
		"__contains__(b2AABB self, b2AABB aabb) -> bool\n"
		"__contains__(b2AABB self, b2Vec2 point) -> bool\n"
		"Does this aabb contain the provided AABB.\n"
		""},
	 { "b2AABB_overlaps", (PyCFunction)(void(*)(void))_wrap_b2AABB_overlaps, METH_VARARGS|METH_KEYWORDS, "overlaps(b2AABB self, b2AABB aabb2) -> bool"},
	 { "new_b2AABB", _wrap_new_b2AABB, METH_NOARGS, "\n"
		"new_b2AABB() -> b2AABB\n"
		"An axis aligned bounding box.\n"
		""},
	 { "delete_b2AABB", _wrap_delete_b2AABB, METH_O, "delete_b2AABB(b2AABB self)"},
	 { "b2AABB_swigregister", b2AABB_swigregister, METH_O, NULL},
	 { "b2AABB_swiginit", b2AABB_swiginit, METH_VARARGS, NULL},
	 { "b2CollideCircles", (PyCFunction)(void(*)(void))_wrap_b2CollideCircles, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideCircles(b2Manifold manifold, b2CircleShape circleA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between two circles.\n"
		""},
	 { "b2CollidePolygonAndCircle", (PyCFunction)(void(*)(void))_wrap_b2CollidePolygonAndCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollidePolygonAndCircle(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between a polygon and a circle.\n"
		""},
	 { "b2CollidePolygons", (PyCFunction)(void(*)(void))_wrap_b2CollidePolygons, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollidePolygons(b2Manifold manifold, b2PolygonShape polygonA, b2Transform xfA, b2PolygonShape polygonB, b2Transform xfB)\n"
		"Compute the collision manifold between two polygons.\n"
		""},
	 { "b2CollideEdgeAndCircle", (PyCFunction)(void(*)(void))_wrap_b2CollideEdgeAndCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideEdgeAndCircle(b2Manifold manifold, b2EdgeShape polygonA, b2Transform xfA, b2CircleShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between an edge and a circle.\n"
		""},
	 { "b2CollideEdgeAndPolygon", (PyCFunction)(void(*)(void))_wrap_b2CollideEdgeAndPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2CollideEdgeAndPolygon(b2Manifold manifold, b2EdgeShape edgeA, b2Transform xfA, b2PolygonShape circleB, b2Transform xfB)\n"
		"Compute the collision manifold between an edge and a circle.\n"
		""},
	 { "b2ClipSegmentToLine", (PyCFunction)(void(*)(void))_wrap_b2ClipSegmentToLine, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2ClipSegmentToLine(b2ClipVertex vOut, b2ClipVertex vIn, b2Vec2 normal, float32 offset, int32 vertexIndexA) -> int32\n"
		"Clipping for contact manifolds.\n"
		""},
	 { "b2TestOverlap", _wrap_b2TestOverlap, METH_VARARGS, "\n"
		"b2TestOverlap(b2Shape shapeA, int32 indexA, b2Shape shapeB, int32 indexB, b2Transform xfA, b2Transform xfB) -> bool\n"
		"b2TestOverlap(b2AABB a, b2AABB b) -> bool\n"
		"Determine if two generic shapes overlap.\n"
		""},
	 { "new__b2Vec2Array", (PyCFunction)(void(*)(void))_wrap_new__b2Vec2Array, METH_VARARGS|METH_KEYWORDS, "new__b2Vec2Array(size_t nelements) -> _b2Vec2Array"},
	 { "delete__b2Vec2Array", _wrap_delete__b2Vec2Array, METH_O, "delete__b2Vec2Array(_b2Vec2Array self)"},
	 { "_b2Vec2Array___getitem__", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array___getitem__, METH_VARARGS|METH_KEYWORDS, "__getitem__(_b2Vec2Array self, size_t index) -> b2Vec2"},
	 { "_b2Vec2Array___setitem__", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(_b2Vec2Array self, size_t index, b2Vec2 value)"},
	 { "_b2Vec2Array_cast", _wrap__b2Vec2Array_cast, METH_O, "cast(_b2Vec2Array self) -> b2Vec2"},
	 { "_b2Vec2Array_frompointer", (PyCFunction)(void(*)(void))_wrap__b2Vec2Array_frompointer, METH_VARARGS|METH_KEYWORDS, "frompointer(b2Vec2 t) -> _b2Vec2Array"},
	 { "_b2Vec2Array_swigregister", _b2Vec2Array_swigregister, METH_O, NULL},
	 { "_b2Vec2Array_swiginit", _b2Vec2Array_swiginit, METH_VARARGS, NULL},
	 { "b2Color_Set", (PyCFunction)(void(*)(void))_wrap_b2Color_Set, METH_VARARGS|METH_KEYWORDS, "Set(b2Color self, float32 ri, float32 gi, float32 bi)"},
	 { "b2Color_r_set", _wrap_b2Color_r_set, METH_VARARGS, "b2Color_r_set(b2Color self, float32 r)"},
	 { "b2Color_r_get", _wrap_b2Color_r_get, METH_O, "b2Color_r_get(b2Color self) -> float32"},
	 { "b2Color_g_set", _wrap_b2Color_g_set, METH_VARARGS, "b2Color_g_set(b2Color self, float32 g)"},
	 { "b2Color_g_get", _wrap_b2Color_g_get, METH_O, "b2Color_g_get(b2Color self) -> float32"},
	 { "b2Color_b_set", _wrap_b2Color_b_set, METH_VARARGS, "b2Color_b_set(b2Color self, float32 b)"},
	 { "b2Color_b_get", _wrap_b2Color_b_get, METH_O, "b2Color_b_get(b2Color self) -> float32"},
	 { "b2Color___hash__", _wrap_b2Color___hash__, METH_O, "__hash__(b2Color self) -> long"},
	 { "new_b2Color", _wrap_new_b2Color, METH_VARARGS, "\n"
		"b2Color()\n"
		"b2Color(float32 r, float32 g, float32 b)\n"
		"new_b2Color(b2Color other) -> b2Color\n"
		"Color for debug drawing. Each value has the range [0,1].\n"
		""},
	 { "b2Color___get_bytes", _wrap_b2Color___get_bytes, METH_O, "__get_bytes(b2Color self) -> PyObject *"},
	 { "b2Color___getitem__", (PyCFunction)(void(*)(void))_wrap_b2Color___getitem__, METH_VARARGS|METH_KEYWORDS, "__getitem__(b2Color self, int i) -> float32"},
	 { "b2Color___setitem__", (PyCFunction)(void(*)(void))_wrap_b2Color___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(b2Color self, int i, float32 value)"},
	 { "b2Color___truediv__", (PyCFunction)(void(*)(void))_wrap_b2Color___truediv__, METH_VARARGS|METH_KEYWORDS, "__truediv__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___add__", (PyCFunction)(void(*)(void))_wrap_b2Color___add__, METH_VARARGS|METH_KEYWORDS, "__add__(b2Color self, b2Color o) -> b2Color"},
	 { "b2Color___sub__", (PyCFunction)(void(*)(void))_wrap_b2Color___sub__, METH_VARARGS|METH_KEYWORDS, "__sub__(b2Color self, b2Color o) -> b2Color"},
	 { "b2Color___div__", (PyCFunction)(void(*)(void))_wrap_b2Color___div__, METH_VARARGS|METH_KEYWORDS, "__div__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___rmul__", (PyCFunction)(void(*)(void))_wrap_b2Color___rmul__, METH_VARARGS|METH_KEYWORDS, "__rmul__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___mul__", (PyCFunction)(void(*)(void))_wrap_b2Color___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(b2Color self, float32 a) -> b2Color"},
	 { "b2Color___isub", (PyCFunction)(void(*)(void))_wrap_b2Color___isub, METH_VARARGS|METH_KEYWORDS, "__isub(b2Color self, b2Color o)"},
	 { "b2Color___itruediv", (PyCFunction)(void(*)(void))_wrap_b2Color___itruediv, METH_VARARGS|METH_KEYWORDS, "__itruediv(b2Color self, b2Color o)"},
	 { "b2Color___idiv", (PyCFunction)(void(*)(void))_wrap_b2Color___idiv, METH_VARARGS|METH_KEYWORDS, "__idiv(b2Color self, b2Color o)"},
	 { "b2Color___imul", (PyCFunction)(void(*)(void))_wrap_b2Color___imul, METH_VARARGS|METH_KEYWORDS, "__imul(b2Color self, b2Color o)"},
	 { "b2Color___iadd", (PyCFunction)(void(*)(void))_wrap_b2Color___iadd, METH_VARARGS|METH_KEYWORDS, "__iadd(b2Color self, b2Color o)"},
	 { "b2Color___equ", (PyCFunction)(void(*)(void))_wrap_b2Color___equ, METH_VARARGS|METH_KEYWORDS, "__equ(b2Color self, b2Color b) -> bool"},
	 { "delete_b2Color", _wrap_delete_b2Color, METH_O, "delete_b2Color(b2Color self)"},
	 { "b2Color_swigregister", b2Color_swigregister, METH_O, NULL},
	 { "b2Color_swiginit", b2Color_swiginit, METH_VARARGS, NULL},
	 { "new_b2Draw", (PyCFunction)(void(*)(void))_wrap_new_b2Draw, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2Draw(PyObject * _self) -> b2Draw\n"
		"Implement and register this class with a  b2Worldto provide debug drawing of physics entities in your game.\n"
		""},
	 { "delete_b2Draw", _wrap_delete_b2Draw, METH_O, "delete_b2Draw(b2Draw self)"},
	 { "b2Draw___SetFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw___SetFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFlags(b2Draw self, uint32 flags)\n"
		"Set the drawing flags.\n"
		""},
	 { "b2Draw___GetFlags", _wrap_b2Draw___GetFlags, METH_O, "\n"
		"__GetFlags(b2Draw self) -> uint32\n"
		"Get the drawing flags.\n"
		""},
	 { "b2Draw_AppendFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw_AppendFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"AppendFlags(b2Draw self, uint32 flags)\n"
		"Append flags to the current flags.\n"
		""},
	 { "b2Draw_ClearFlags", (PyCFunction)(void(*)(void))_wrap_b2Draw_ClearFlags, METH_VARARGS|METH_KEYWORDS, "\n"
		"ClearFlags(b2Draw self, uint32 flags)\n"
		"Clear flags from the current flags.\n"
		""},
	 { "b2Draw_DrawPolygon", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawPolygon(b2Draw self, b2Vec2 vertices, int32 vertexCount, b2Color color)\n"
		"Draw a closed polygon provided in CCW order.\n"
		""},
	 { "b2Draw_DrawSolidPolygon", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSolidPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSolidPolygon(b2Draw self, b2Vec2 vertices, int32 vertexCount, b2Color color)\n"
		"Draw a solid closed polygon provided in CCW order.\n"
		""},
	 { "b2Draw_DrawCircle", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawCircle(b2Draw self, b2Vec2 center, float32 radius, b2Color color)\n"
		"Draw a circle.\n"
		""},
	 { "b2Draw_DrawSolidCircle", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSolidCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSolidCircle(b2Draw self, b2Vec2 center, float32 radius, b2Vec2 axis, b2Color color)\n"
		"Draw a solid circle.\n"
		""},
	 { "b2Draw_DrawSegment", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawSegment, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSegment(b2Draw self, b2Vec2 p1, b2Vec2 p2, b2Color color)\n"
		"Draw a line segment.\n"
		""},
	 { "b2Draw_DrawTransform", (PyCFunction)(void(*)(void))_wrap_b2Draw_DrawTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawTransform(b2Draw self, b2Transform xf)\n"
		"Draw a transform. Choose your own length scale.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"a transform.\n"
		""},
	 { "b2Draw___hash__", _wrap_b2Draw___hash__, METH_O, "__hash__(b2Draw self) -> long"},
	 { "disown_b2Draw", (PyCFunction)(void(*)(void))_wrap_disown_b2Draw, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2Draw_swigregister", b2Draw_swigregister, METH_O, NULL},
	 { "b2Draw_swiginit", b2Draw_swiginit, METH_VARARGS, NULL},
	 { "b2DrawExtended_convertVertices_set", _wrap_b2DrawExtended_convertVertices_set, METH_VARARGS, "b2DrawExtended_convertVertices_set(b2DrawExtended self, bool convertVertices)"},
	 { "b2DrawExtended_convertVertices_get", _wrap_b2DrawExtended_convertVertices_get, METH_O, "b2DrawExtended_convertVertices_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended_center_set", _wrap_b2DrawExtended_center_set, METH_VARARGS, "b2DrawExtended_center_set(b2DrawExtended self, b2Vec2 center)"},
	 { "b2DrawExtended_center_get", _wrap_b2DrawExtended_center_get, METH_O, "b2DrawExtended_center_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_offset_set", _wrap_b2DrawExtended_offset_set, METH_VARARGS, "b2DrawExtended_offset_set(b2DrawExtended self, b2Vec2 offset)"},
	 { "b2DrawExtended_offset_get", _wrap_b2DrawExtended_offset_get, METH_O, "b2DrawExtended_offset_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_zoom_set", _wrap_b2DrawExtended_zoom_set, METH_VARARGS, "b2DrawExtended_zoom_set(b2DrawExtended self, float32 zoom)"},
	 { "b2DrawExtended_zoom_get", _wrap_b2DrawExtended_zoom_get, METH_O, "b2DrawExtended_zoom_get(b2DrawExtended self) -> float32"},
	 { "b2DrawExtended_screenSize_set", _wrap_b2DrawExtended_screenSize_set, METH_VARARGS, "b2DrawExtended_screenSize_set(b2DrawExtended self, b2Vec2 screenSize)"},
	 { "b2DrawExtended_screenSize_get", _wrap_b2DrawExtended_screenSize_get, METH_O, "b2DrawExtended_screenSize_get(b2DrawExtended self) -> b2Vec2"},
	 { "b2DrawExtended_flipY_set", _wrap_b2DrawExtended_flipY_set, METH_VARARGS, "b2DrawExtended_flipY_set(b2DrawExtended self, bool flipY)"},
	 { "b2DrawExtended_flipY_get", _wrap_b2DrawExtended_flipY_get, METH_O, "b2DrawExtended_flipY_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended_flipX_set", _wrap_b2DrawExtended_flipX_set, METH_VARARGS, "b2DrawExtended_flipX_set(b2DrawExtended self, bool flipX)"},
	 { "b2DrawExtended_flipX_get", _wrap_b2DrawExtended_flipX_get, METH_O, "b2DrawExtended_flipX_get(b2DrawExtended self) -> bool"},
	 { "b2DrawExtended___Convert", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended___Convert, METH_VARARGS|METH_KEYWORDS, "__Convert(b2DrawExtended self, b2Vec2 verts, int32 vertexCount) -> PyObject *"},
	 { "b2DrawExtended_to_screen", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_to_screen, METH_VARARGS|METH_KEYWORDS, "to_screen(b2DrawExtended self, b2Vec2 point) -> PyObject *"},
	 { "b2DrawExtended_DrawPolygon", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawPolygon(b2DrawExtended self, b2Vec2 conv_vertices, int32 vertexCount, b2Color color)\n"
		"Draw a closed polygon provided in CCW order.\n"
		""},
	 { "b2DrawExtended_DrawSolidPolygon", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSolidPolygon, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSolidPolygon(b2DrawExtended self, b2Vec2 conv_vertices, int32 vertexCount, b2Color color)\n"
		"Draw a solid closed polygon provided in CCW order.\n"
		""},
	 { "b2DrawExtended_DrawCircle", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawCircle(b2DrawExtended self, b2Vec2 conv_p1, float32 radius, b2Color color)\n"
		"Draw a circle.\n"
		""},
	 { "b2DrawExtended_DrawSolidCircle", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSolidCircle, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSolidCircle(b2DrawExtended self, b2Vec2 conv_p1, float32 radius, b2Vec2 axis, b2Color color)\n"
		"Draw a solid circle.\n"
		""},
	 { "b2DrawExtended_DrawSegment", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawSegment, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawSegment(b2DrawExtended self, b2Vec2 conv_p1, b2Vec2 conv_p2, b2Color color)\n"
		"Draw a line segment.\n"
		""},
	 { "b2DrawExtended_DrawTransform", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended_DrawTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"DrawTransform(b2DrawExtended self, b2Transform xf)\n"
		"Draw a transform. Choose your own length scale.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"a transform.\n"
		""},
	 { "b2DrawExtended___SetFlags", (PyCFunction)(void(*)(void))_wrap_b2DrawExtended___SetFlags, METH_VARARGS|METH_KEYWORDS, "__SetFlags(b2DrawExtended self, uint32 flags)"},
	 { "delete_b2DrawExtended", _wrap_delete_b2DrawExtended, METH_O, "delete_b2DrawExtended(b2DrawExtended self)"},
	 { "new_b2DrawExtended", (PyCFunction)(void(*)(void))_wrap_new_b2DrawExtended, METH_VARARGS|METH_KEYWORDS, "new_b2DrawExtended(PyObject * _self) -> b2DrawExtended"},
	 { "b2DrawExtended___hash__", _wrap_b2DrawExtended___hash__, METH_O, "__hash__(b2DrawExtended self) -> long"},
	 { "disown_b2DrawExtended", (PyCFunction)(void(*)(void))_wrap_disown_b2DrawExtended, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2DrawExtended_swigregister", b2DrawExtended_swigregister, METH_O, NULL},
	 { "b2DrawExtended_swiginit", b2DrawExtended_swiginit, METH_VARARGS, NULL},
	 { "b2MassData_mass_set", _wrap_b2MassData_mass_set, METH_VARARGS, "b2MassData_mass_set(b2MassData self, float32 mass)"},
	 { "b2MassData_mass_get", _wrap_b2MassData_mass_get, METH_O, "b2MassData_mass_get(b2MassData self) -> float32"},
	 { "b2MassData_center_set", _wrap_b2MassData_center_set, METH_VARARGS, "b2MassData_center_set(b2MassData self, b2Vec2 center)"},
	 { "b2MassData_center_get", _wrap_b2MassData_center_get, METH_O, "b2MassData_center_get(b2MassData self) -> b2Vec2"},
	 { "b2MassData_I_set", _wrap_b2MassData_I_set, METH_VARARGS, "b2MassData_I_set(b2MassData self, float32 I)"},
	 { "b2MassData_I_get", _wrap_b2MassData_I_get, METH_O, "b2MassData_I_get(b2MassData self) -> float32"},
	 { "b2MassData___hash__", _wrap_b2MassData___hash__, METH_O, "__hash__(b2MassData self) -> long"},
	 { "new_b2MassData", _wrap_new_b2MassData, METH_NOARGS, "\n"
		"new_b2MassData() -> b2MassData\n"
		"This holds the mass data computed for a shape.\n"
		""},
	 { "delete_b2MassData", _wrap_delete_b2MassData, METH_O, "delete_b2MassData(b2MassData self)"},
	 { "b2MassData_swigregister", b2MassData_swigregister, METH_O, NULL},
	 { "b2MassData_swiginit", b2MassData_swiginit, METH_VARARGS, NULL},
	 { "delete_b2Shape", _wrap_delete_b2Shape, METH_O, "delete_b2Shape(b2Shape self)"},
	 { "b2Shape___GetType", _wrap_b2Shape___GetType, METH_O, "\n"
		"__GetType(b2Shape self) -> b2Shape::Type\n"
		"Get the type of this shape. You can use this to down cast to the concrete shape. \n"
		"the shape type.\n"
		""},
	 { "b2Shape___GetChildCount", _wrap_b2Shape___GetChildCount, METH_O, "\n"
		"__GetChildCount(b2Shape self) -> int32\n"
		"Get the number of child primitives.\n"
		""},
	 { "b2Shape_TestPoint", (PyCFunction)(void(*)(void))_wrap_b2Shape_TestPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"TestPoint(b2Shape self, b2Transform xf, b2Vec2 p) -> bool\n"
		"Test a point for containment in this shape. This only works for convex shapes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"the shape world transform.\n"
		"\n"
		"p: \n"
		"a point in world coordinates.\n"
		""},
	 { "b2Shape_RayCast", (PyCFunction)(void(*)(void))_wrap_b2Shape_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"RayCast(b2Shape self, b2RayCastOutput output, b2RayCastInput input, b2Transform transform, int32 childIndex) -> bool\n"
		"Cast a ray against a child shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"output: \n"
		"the ray-cast results.\n"
		"\n"
		"input: \n"
		"the ray-cast input parameters.\n"
		"\n"
		"transform: \n"
		"the transform to be applied to the shape.\n"
		"\n"
		"childIndex: \n"
		"the child shape index\n"
		""},
	 { "b2Shape___ComputeAABB", (PyCFunction)(void(*)(void))_wrap_b2Shape___ComputeAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"__ComputeAABB(b2Shape self, b2AABB aabb, b2Transform xf, int32 childIndex)\n"
		"Given a transform, compute the associated axis aligned bounding box for a child shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"aabb: \n"
		"returns the axis aligned box.\n"
		"\n"
		"xf: \n"
		"the world transform of the shape.\n"
		"\n"
		"childIndex: \n"
		"the child shape\n"
		""},
	 { "b2Shape___ComputeMass", (PyCFunction)(void(*)(void))_wrap_b2Shape___ComputeMass, METH_VARARGS|METH_KEYWORDS, "\n"
		"__ComputeMass(b2Shape self, b2MassData massData, float32 density)\n"
		"Compute the mass properties of this shape using its dimensions and density. The inertia tensor is computed about the local origin.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: \n"
		"returns the mass data for this shape.\n"
		"\n"
		"density: \n"
		"the density in kilograms per meter squared.\n"
		""},
	 { "b2Shape_radius_set", _wrap_b2Shape_radius_set, METH_VARARGS, "b2Shape_radius_set(b2Shape self, float32 m_radius)"},
	 { "b2Shape_radius_get", _wrap_b2Shape_radius_get, METH_O, "b2Shape_radius_get(b2Shape self) -> float32"},
	 { "b2Shape___hash__", _wrap_b2Shape___hash__, METH_O, "__hash__(b2Shape self) -> long"},
	 { "b2Shape_swigregister", b2Shape_swigregister, METH_O, NULL},
	 { "new_b2CircleShape", _wrap_new_b2CircleShape, METH_NOARGS, "\n"
		"new_b2CircleShape() -> b2CircleShape\n"
		"A circle shape.\n"
		""},
	 { "b2CircleShape_pos_set", _wrap_b2CircleShape_pos_set, METH_VARARGS, "b2CircleShape_pos_set(b2CircleShape self, b2Vec2 m_p)"},
	 { "b2CircleShape_pos_get", _wrap_b2CircleShape_pos_get, METH_O, "b2CircleShape_pos_get(b2CircleShape self) -> b2Vec2"},
	 { "b2CircleShape___hash__", _wrap_b2CircleShape___hash__, METH_O, "__hash__(b2CircleShape self) -> long"},
	 { "delete_b2CircleShape", _wrap_delete_b2CircleShape, METH_O, "delete_b2CircleShape(b2CircleShape self)"},
	 { "b2CircleShape_swigregister", b2CircleShape_swigregister, METH_O, NULL},
	 { "b2CircleShape_swiginit", b2CircleShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2EdgeShape", _wrap_new_b2EdgeShape, METH_NOARGS, "\n"
		"new_b2EdgeShape() -> b2EdgeShape\n"
		"A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. The connectivity information is used to ensure correct contact normals.\n"
		""},
	 { "b2EdgeShape___Set", (PyCFunction)(void(*)(void))_wrap_b2EdgeShape___Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"__Set(b2EdgeShape self, b2Vec2 v1, b2Vec2 v2)\n"
		"Set this as an isolated edge.\n"
		""},
	 { "b2EdgeShape_vertex1_set", _wrap_b2EdgeShape_vertex1_set, METH_VARARGS, "b2EdgeShape_vertex1_set(b2EdgeShape self, b2Vec2 m_vertex1)"},
	 { "b2EdgeShape_vertex1_get", _wrap_b2EdgeShape_vertex1_get, METH_O, "b2EdgeShape_vertex1_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex2_set", _wrap_b2EdgeShape_vertex2_set, METH_VARARGS, "b2EdgeShape_vertex2_set(b2EdgeShape self, b2Vec2 m_vertex2)"},
	 { "b2EdgeShape_vertex2_get", _wrap_b2EdgeShape_vertex2_get, METH_O, "b2EdgeShape_vertex2_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex0_set", _wrap_b2EdgeShape_vertex0_set, METH_VARARGS, "b2EdgeShape_vertex0_set(b2EdgeShape self, b2Vec2 m_vertex0)"},
	 { "b2EdgeShape_vertex0_get", _wrap_b2EdgeShape_vertex0_get, METH_O, "b2EdgeShape_vertex0_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_vertex3_set", _wrap_b2EdgeShape_vertex3_set, METH_VARARGS, "b2EdgeShape_vertex3_set(b2EdgeShape self, b2Vec2 m_vertex3)"},
	 { "b2EdgeShape_vertex3_get", _wrap_b2EdgeShape_vertex3_get, METH_O, "b2EdgeShape_vertex3_get(b2EdgeShape self) -> b2Vec2"},
	 { "b2EdgeShape_hasVertex0_set", _wrap_b2EdgeShape_hasVertex0_set, METH_VARARGS, "b2EdgeShape_hasVertex0_set(b2EdgeShape self, bool m_hasVertex0)"},
	 { "b2EdgeShape_hasVertex0_get", _wrap_b2EdgeShape_hasVertex0_get, METH_O, "b2EdgeShape_hasVertex0_get(b2EdgeShape self) -> bool"},
	 { "b2EdgeShape_hasVertex3_set", _wrap_b2EdgeShape_hasVertex3_set, METH_VARARGS, "b2EdgeShape_hasVertex3_set(b2EdgeShape self, bool m_hasVertex3)"},
	 { "b2EdgeShape_hasVertex3_get", _wrap_b2EdgeShape_hasVertex3_get, METH_O, "b2EdgeShape_hasVertex3_get(b2EdgeShape self) -> bool"},
	 { "b2EdgeShape___hash__", _wrap_b2EdgeShape___hash__, METH_O, "__hash__(b2EdgeShape self) -> long"},
	 { "delete_b2EdgeShape", _wrap_delete_b2EdgeShape, METH_O, "delete_b2EdgeShape(b2EdgeShape self)"},
	 { "b2EdgeShape_swigregister", b2EdgeShape_swigregister, METH_O, NULL},
	 { "b2EdgeShape_swiginit", b2EdgeShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2ChainShape", _wrap_new_b2ChainShape, METH_NOARGS, "\n"
		"new_b2ChainShape() -> b2ChainShape\n"
		"A loop shape is a free form sequence of line segments that form a circular list. The loop may cross upon itself, but this is not recommended for smooth collision. The loop has double sided collision, so you can use inside and outside collision. Therefore, you may use any winding order. Since there may be many vertices, they are allocated using b2Alloc.\n"
		""},
	 { "delete_b2ChainShape", _wrap_delete_b2ChainShape, METH_O, "\n"
		"delete_b2ChainShape(b2ChainShape self)\n"
		"The destructor frees the vertices using b2Free.\n"
		""},
	 { "b2ChainShape_CreateLoop", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_CreateLoop, METH_VARARGS|METH_KEYWORDS, "CreateLoop(b2ChainShape self, b2Vec2 vertices, int32 count)"},
	 { "b2ChainShape_CreateChain", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_CreateChain, METH_VARARGS|METH_KEYWORDS, "CreateChain(b2ChainShape self, b2Vec2 vertices, int32 count)"},
	 { "b2ChainShape_SetPrevVertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_SetPrevVertex, METH_VARARGS|METH_KEYWORDS, "SetPrevVertex(b2ChainShape self, b2Vec2 prevVertex)"},
	 { "b2ChainShape_SetNextVertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape_SetNextVertex, METH_VARARGS|METH_KEYWORDS, "SetNextVertex(b2ChainShape self, b2Vec2 nextVertex)"},
	 { "b2ChainShape___GetChildEdge", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___GetChildEdge, METH_VARARGS|METH_KEYWORDS, "\n"
		"__GetChildEdge(b2ChainShape self, b2EdgeShape edge, int32 index)\n"
		"Get a child edge.\n"
		""},
	 { "b2ChainShape_m_prevVertex_set", _wrap_b2ChainShape_m_prevVertex_set, METH_VARARGS, "b2ChainShape_m_prevVertex_set(b2ChainShape self, b2Vec2 m_prevVertex)"},
	 { "b2ChainShape_m_prevVertex_get", _wrap_b2ChainShape_m_prevVertex_get, METH_O, "b2ChainShape_m_prevVertex_get(b2ChainShape self) -> b2Vec2"},
	 { "b2ChainShape_m_nextVertex_set", _wrap_b2ChainShape_m_nextVertex_set, METH_VARARGS, "b2ChainShape_m_nextVertex_set(b2ChainShape self, b2Vec2 m_nextVertex)"},
	 { "b2ChainShape_m_nextVertex_get", _wrap_b2ChainShape_m_nextVertex_get, METH_O, "b2ChainShape_m_nextVertex_get(b2ChainShape self) -> b2Vec2"},
	 { "b2ChainShape_m_hasPrevVertex_set", _wrap_b2ChainShape_m_hasPrevVertex_set, METH_VARARGS, "b2ChainShape_m_hasPrevVertex_set(b2ChainShape self, bool m_hasPrevVertex)"},
	 { "b2ChainShape_m_hasPrevVertex_get", _wrap_b2ChainShape_m_hasPrevVertex_get, METH_O, "b2ChainShape_m_hasPrevVertex_get(b2ChainShape self) -> bool"},
	 { "b2ChainShape_m_hasNextVertex_set", _wrap_b2ChainShape_m_hasNextVertex_set, METH_VARARGS, "b2ChainShape_m_hasNextVertex_set(b2ChainShape self, bool m_hasNextVertex)"},
	 { "b2ChainShape_m_hasNextVertex_get", _wrap_b2ChainShape_m_hasNextVertex_get, METH_O, "b2ChainShape_m_hasNextVertex_get(b2ChainShape self) -> bool"},
	 { "b2ChainShape___hash__", _wrap_b2ChainShape___hash__, METH_O, "__hash__(b2ChainShape self) -> long"},
	 { "b2ChainShape___get_vertices", _wrap_b2ChainShape___get_vertices, METH_O, "__get_vertices(b2ChainShape self) -> PyObject *"},
	 { "b2ChainShape___create", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___create, METH_VARARGS|METH_KEYWORDS, "__create(b2ChainShape self, _b2Vec2Array v, int c, bool loop)"},
	 { "b2ChainShape___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2ChainShape___get_vertex, METH_VARARGS|METH_KEYWORDS, "__get_vertex(b2ChainShape self, uint16 vnum) -> b2Vec2"},
	 { "b2ChainShape___get_count", _wrap_b2ChainShape___get_count, METH_O, "__get_count(b2ChainShape self) -> int32"},
	 { "b2ChainShape_swigregister", b2ChainShape_swigregister, METH_O, NULL},
	 { "b2ChainShape_swiginit", b2ChainShape_swiginit, METH_VARARGS, NULL},
	 { "new_b2PolygonShape", _wrap_new_b2PolygonShape, METH_NOARGS, "\n"
		"new_b2PolygonShape() -> b2PolygonShape\n"
		"A convex polygon. It is assumed that the interior of the polygon is to the left of each edge. Polygons have a maximum number of vertices equal to b2_maxPolygonVertices. In most cases you should not need many vertices for a convex polygon.\n"
		""},
	 { "b2PolygonShape_SetAsBox", _wrap_b2PolygonShape_SetAsBox, METH_VARARGS, "\n"
		"SetAsBox(b2PolygonShape self, float32 hx, float32 hy)\n"
		"SetAsBox(b2PolygonShape self, float32 hx, float32 hy, b2Vec2 center, float32 angle)\n"
		"Build vertices to represent an oriented box.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"hx: \n"
		"the half-width.\n"
		"\n"
		"hy: \n"
		"the half-height.\n"
		"\n"
		"center: \n"
		"the center of the box in local coordinates.\n"
		"\n"
		"angle: \n"
		"the rotation of the box in local coordinates.\n"
		""},
	 { "b2PolygonShape_Validate", _wrap_b2PolygonShape_Validate, METH_O, "Validate(b2PolygonShape self) -> bool"},
	 { "b2PolygonShape_centroid_set", _wrap_b2PolygonShape_centroid_set, METH_VARARGS, "b2PolygonShape_centroid_set(b2PolygonShape self, b2Vec2 m_centroid)"},
	 { "b2PolygonShape_centroid_get", _wrap_b2PolygonShape_centroid_get, METH_O, "b2PolygonShape_centroid_get(b2PolygonShape self) -> b2Vec2"},
	 { "b2PolygonShape_vertexCount_set", _wrap_b2PolygonShape_vertexCount_set, METH_VARARGS, "b2PolygonShape_vertexCount_set(b2PolygonShape self, int32 m_count)"},
	 { "b2PolygonShape_vertexCount_get", _wrap_b2PolygonShape_vertexCount_get, METH_O, "b2PolygonShape_vertexCount_get(b2PolygonShape self) -> int32"},
	 { "b2PolygonShape___hash__", _wrap_b2PolygonShape___hash__, METH_O, "__hash__(b2PolygonShape self) -> long"},
	 { "b2PolygonShape___get_vertices", _wrap_b2PolygonShape___get_vertices, METH_O, "__get_vertices(b2PolygonShape self) -> PyObject *"},
	 { "b2PolygonShape___get_normals", _wrap_b2PolygonShape___get_normals, METH_O, "__get_normals(b2PolygonShape self) -> PyObject *"},
	 { "b2PolygonShape___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2PolygonShape___get_vertex, METH_VARARGS|METH_KEYWORDS, "__get_vertex(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { "b2PolygonShape___get_normal", (PyCFunction)(void(*)(void))_wrap_b2PolygonShape___get_normal, METH_VARARGS|METH_KEYWORDS, "__get_normal(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { "b2PolygonShape_set_vertex", _wrap_b2PolygonShape_set_vertex, METH_VARARGS, "\n"
		"set_vertex(b2PolygonShape self, uint16 vnum, b2Vec2 value)\n"
		"set_vertex(b2PolygonShape self, uint16 vnum, float32 x, float32 y)\n"
		""},
	 { "b2PolygonShape___set_vertices_internal", _wrap_b2PolygonShape___set_vertices_internal, METH_VARARGS, "\n"
		"__set_vertices_internal(b2PolygonShape self, b2Vec2 points, int32 count)\n"
		"__set_vertices_internal(b2PolygonShape self)\n"
		"Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge. The count must be in the range [3, b2_maxPolygonVertices].\n"
		""},
	 { "delete_b2PolygonShape", _wrap_delete_b2PolygonShape, METH_O, "delete_b2PolygonShape(b2PolygonShape self)"},
	 { "b2PolygonShape_swigregister", b2PolygonShape_swigregister, METH_O, NULL},
	 { "b2PolygonShape_swiginit", b2PolygonShape_swiginit, METH_VARARGS, NULL},
	 { "b2TreeNode_IsLeaf", _wrap_b2TreeNode_IsLeaf, METH_O, "IsLeaf(b2TreeNode self) -> bool"},
	 { "b2TreeNode_aabb_set", _wrap_b2TreeNode_aabb_set, METH_VARARGS, "b2TreeNode_aabb_set(b2TreeNode self, b2AABB aabb)"},
	 { "b2TreeNode_aabb_get", _wrap_b2TreeNode_aabb_get, METH_O, "b2TreeNode_aabb_get(b2TreeNode self) -> b2AABB"},
	 { "b2TreeNode_child1_set", _wrap_b2TreeNode_child1_set, METH_VARARGS, "b2TreeNode_child1_set(b2TreeNode self, int32 child1)"},
	 { "b2TreeNode_child1_get", _wrap_b2TreeNode_child1_get, METH_O, "b2TreeNode_child1_get(b2TreeNode self) -> int32"},
	 { "b2TreeNode_child2_set", _wrap_b2TreeNode_child2_set, METH_VARARGS, "b2TreeNode_child2_set(b2TreeNode self, int32 child2)"},
	 { "b2TreeNode_child2_get", _wrap_b2TreeNode_child2_get, METH_O, "b2TreeNode_child2_get(b2TreeNode self) -> int32"},
	 { "b2TreeNode_height_set", _wrap_b2TreeNode_height_set, METH_VARARGS, "b2TreeNode_height_set(b2TreeNode self, int32 height)"},
	 { "b2TreeNode_height_get", _wrap_b2TreeNode_height_get, METH_O, "b2TreeNode_height_get(b2TreeNode self) -> int32"},
	 { "new_b2TreeNode", _wrap_new_b2TreeNode, METH_NOARGS, "new_b2TreeNode() -> b2TreeNode"},
	 { "delete_b2TreeNode", _wrap_delete_b2TreeNode, METH_O, "delete_b2TreeNode(b2TreeNode self)"},
	 { "b2TreeNode_swigregister", b2TreeNode_swigregister, METH_O, NULL},
	 { "b2TreeNode_swiginit", b2TreeNode_swiginit, METH_VARARGS, NULL},
	 { "b2Pair_proxyIdA_set", _wrap_b2Pair_proxyIdA_set, METH_VARARGS, "b2Pair_proxyIdA_set(b2Pair self, int32 proxyIdA)"},
	 { "b2Pair_proxyIdA_get", _wrap_b2Pair_proxyIdA_get, METH_O, "b2Pair_proxyIdA_get(b2Pair self) -> int32"},
	 { "b2Pair_proxyIdB_set", _wrap_b2Pair_proxyIdB_set, METH_VARARGS, "b2Pair_proxyIdB_set(b2Pair self, int32 proxyIdB)"},
	 { "b2Pair_proxyIdB_get", _wrap_b2Pair_proxyIdB_get, METH_O, "b2Pair_proxyIdB_get(b2Pair self) -> int32"},
	 { "b2Pair___hash__", _wrap_b2Pair___hash__, METH_O, "__hash__(b2Pair self) -> long"},
	 { "new_b2Pair", _wrap_new_b2Pair, METH_NOARGS, "new_b2Pair() -> b2Pair"},
	 { "delete_b2Pair", _wrap_delete_b2Pair, METH_O, "delete_b2Pair(b2Pair self)"},
	 { "b2Pair_swigregister", b2Pair_swigregister, METH_O, NULL},
	 { "b2Pair_swiginit", b2Pair_swiginit, METH_VARARGS, NULL},
	 { "new_b2BroadPhase", _wrap_new_b2BroadPhase, METH_NOARGS, "\n"
		"new_b2BroadPhase() -> b2BroadPhase\n"
		"The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and to track subsequent overlap.\n"
		""},
	 { "delete_b2BroadPhase", _wrap_delete_b2BroadPhase, METH_O, "delete_b2BroadPhase(b2BroadPhase self)"},
	 { "b2BroadPhase_MoveProxy", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_MoveProxy, METH_VARARGS|METH_KEYWORDS, "\n"
		"MoveProxy(b2BroadPhase self, int32 proxyId, b2AABB aabb, b2Vec2 displacement)\n"
		"Call MoveProxy as many times as you like, then when you are done call UpdatePairs to finalized the proxy pairs (for your time step).\n"
		""},
	 { "b2BroadPhase_TouchProxy", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_TouchProxy, METH_VARARGS|METH_KEYWORDS, "\n"
		"TouchProxy(b2BroadPhase self, int32 proxyId)\n"
		"Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.\n"
		""},
	 { "b2BroadPhase_GetFatAABB", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_GetFatAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetFatAABB(b2BroadPhase self, int32 proxyId) -> b2AABB\n"
		"Get the fat AABB for a proxy.\n"
		""},
	 { "b2BroadPhase_TestOverlap", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_TestOverlap, METH_VARARGS|METH_KEYWORDS, "\n"
		"TestOverlap(b2BroadPhase self, int32 proxyIdA, int32 proxyIdB) -> bool\n"
		"Test overlap of fat AABBs.\n"
		""},
	 { "b2BroadPhase___GetProxyCount", _wrap_b2BroadPhase___GetProxyCount, METH_O, "\n"
		"__GetProxyCount(b2BroadPhase self) -> int32\n"
		"Get the number of proxies.\n"
		""},
	 { "b2BroadPhase___GetTreeHeight", _wrap_b2BroadPhase___GetTreeHeight, METH_O, "__GetTreeHeight(b2BroadPhase self) -> int32"},
	 { "b2BroadPhase___GetTreeBalance", _wrap_b2BroadPhase___GetTreeBalance, METH_O, "__GetTreeBalance(b2BroadPhase self) -> int32"},
	 { "b2BroadPhase___GetTreeQuality", _wrap_b2BroadPhase___GetTreeQuality, METH_O, "__GetTreeQuality(b2BroadPhase self) -> float32"},
	 { "b2BroadPhase_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2BroadPhase_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "ShiftOrigin(b2BroadPhase self, b2Vec2 newOrigin)"},
	 { "b2BroadPhase___hash__", _wrap_b2BroadPhase___hash__, METH_O, "__hash__(b2BroadPhase self) -> long"},
	 { "b2BroadPhase_swigregister", b2BroadPhase_swigregister, METH_O, NULL},
	 { "b2BroadPhase_swiginit", b2BroadPhase_swiginit, METH_VARARGS, NULL},
	 { "b2PairLessThan", (PyCFunction)(void(*)(void))_wrap_b2PairLessThan, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2PairLessThan(b2Pair pair1, b2Pair pair2) -> bool\n"
		"This is used to sort pairs.\n"
		""},
	 { "new_b2DistanceProxy", _wrap_new_b2DistanceProxy, METH_NOARGS, "\n"
		"new_b2DistanceProxy() -> b2DistanceProxy\n"
		"A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n"
		""},
	 { "b2DistanceProxy_Set", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_Set, METH_VARARGS|METH_KEYWORDS, "\n"
		"Set(b2DistanceProxy self, b2Shape shape, int32 index)\n"
		"Initialize the proxy using the given shape. The shape must remain in scope while the proxy is in use.\n"
		""},
	 { "b2DistanceProxy_GetSupport", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_GetSupport, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetSupport(b2DistanceProxy self, b2Vec2 d) -> int32\n"
		"Get the supporting vertex index in the given direction.\n"
		""},
	 { "b2DistanceProxy_GetSupportVertex", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy_GetSupportVertex, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetSupportVertex(b2DistanceProxy self, b2Vec2 d) -> b2Vec2\n"
		"Get the supporting vertex in the given direction.\n"
		""},
	 { "b2DistanceProxy___get_vertex_count", _wrap_b2DistanceProxy___get_vertex_count, METH_O, "\n"
		"__get_vertex_count(b2DistanceProxy self) -> int32\n"
		"Get the vertex count.\n"
		""},
	 { "b2DistanceProxy___get_vertex", (PyCFunction)(void(*)(void))_wrap_b2DistanceProxy___get_vertex, METH_VARARGS|METH_KEYWORDS, "\n"
		"__get_vertex(b2DistanceProxy self, int32 index) -> b2Vec2\n"
		"Get a vertex by index. Used by b2Distance.\n"
		""},
	 { "b2DistanceProxy_m_buffer_set", _wrap_b2DistanceProxy_m_buffer_set, METH_VARARGS, "b2DistanceProxy_m_buffer_set(b2DistanceProxy self, b2Vec2 m_buffer)"},
	 { "b2DistanceProxy_m_buffer_get", _wrap_b2DistanceProxy_m_buffer_get, METH_O, "b2DistanceProxy_m_buffer_get(b2DistanceProxy self) -> b2Vec2"},
	 { "b2DistanceProxy___hash__", _wrap_b2DistanceProxy___hash__, METH_O, "__hash__(b2DistanceProxy self) -> long"},
	 { "delete_b2DistanceProxy", _wrap_delete_b2DistanceProxy, METH_O, "delete_b2DistanceProxy(b2DistanceProxy self)"},
	 { "b2DistanceProxy_swigregister", b2DistanceProxy_swigregister, METH_O, NULL},
	 { "b2DistanceProxy_swiginit", b2DistanceProxy_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceInput_proxyA_set", _wrap_b2DistanceInput_proxyA_set, METH_VARARGS, "b2DistanceInput_proxyA_set(b2DistanceInput self, b2DistanceProxy proxyA)"},
	 { "b2DistanceInput_proxyA_get", _wrap_b2DistanceInput_proxyA_get, METH_O, "b2DistanceInput_proxyA_get(b2DistanceInput self) -> b2DistanceProxy"},
	 { "b2DistanceInput_proxyB_set", _wrap_b2DistanceInput_proxyB_set, METH_VARARGS, "b2DistanceInput_proxyB_set(b2DistanceInput self, b2DistanceProxy proxyB)"},
	 { "b2DistanceInput_proxyB_get", _wrap_b2DistanceInput_proxyB_get, METH_O, "b2DistanceInput_proxyB_get(b2DistanceInput self) -> b2DistanceProxy"},
	 { "b2DistanceInput_transformA_set", _wrap_b2DistanceInput_transformA_set, METH_VARARGS, "b2DistanceInput_transformA_set(b2DistanceInput self, b2Transform transformA)"},
	 { "b2DistanceInput_transformA_get", _wrap_b2DistanceInput_transformA_get, METH_O, "b2DistanceInput_transformA_get(b2DistanceInput self) -> b2Transform"},
	 { "b2DistanceInput_transformB_set", _wrap_b2DistanceInput_transformB_set, METH_VARARGS, "b2DistanceInput_transformB_set(b2DistanceInput self, b2Transform transformB)"},
	 { "b2DistanceInput_transformB_get", _wrap_b2DistanceInput_transformB_get, METH_O, "b2DistanceInput_transformB_get(b2DistanceInput self) -> b2Transform"},
	 { "b2DistanceInput_useRadii_set", _wrap_b2DistanceInput_useRadii_set, METH_VARARGS, "b2DistanceInput_useRadii_set(b2DistanceInput self, bool useRadii)"},
	 { "b2DistanceInput_useRadii_get", _wrap_b2DistanceInput_useRadii_get, METH_O, "b2DistanceInput_useRadii_get(b2DistanceInput self) -> bool"},
	 { "b2DistanceInput___hash__", _wrap_b2DistanceInput___hash__, METH_O, "__hash__(b2DistanceInput self) -> long"},
	 { "new_b2DistanceInput", _wrap_new_b2DistanceInput, METH_NOARGS, "\n"
		"new_b2DistanceInput() -> b2DistanceInput\n"
		"Input for b2Distance. You have to option to use the shape radii in the computation. Even\n"
		""},
	 { "delete_b2DistanceInput", _wrap_delete_b2DistanceInput, METH_O, "delete_b2DistanceInput(b2DistanceInput self)"},
	 { "b2DistanceInput_swigregister", b2DistanceInput_swigregister, METH_O, NULL},
	 { "b2DistanceInput_swiginit", b2DistanceInput_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceOutput_pointA_set", _wrap_b2DistanceOutput_pointA_set, METH_VARARGS, "b2DistanceOutput_pointA_set(b2DistanceOutput self, b2Vec2 pointA)"},
	 { "b2DistanceOutput_pointA_get", _wrap_b2DistanceOutput_pointA_get, METH_O, "b2DistanceOutput_pointA_get(b2DistanceOutput self) -> b2Vec2"},
	 { "b2DistanceOutput_pointB_set", _wrap_b2DistanceOutput_pointB_set, METH_VARARGS, "b2DistanceOutput_pointB_set(b2DistanceOutput self, b2Vec2 pointB)"},
	 { "b2DistanceOutput_pointB_get", _wrap_b2DistanceOutput_pointB_get, METH_O, "b2DistanceOutput_pointB_get(b2DistanceOutput self) -> b2Vec2"},
	 { "b2DistanceOutput_distance_set", _wrap_b2DistanceOutput_distance_set, METH_VARARGS, "b2DistanceOutput_distance_set(b2DistanceOutput self, float32 distance)"},
	 { "b2DistanceOutput_distance_get", _wrap_b2DistanceOutput_distance_get, METH_O, "b2DistanceOutput_distance_get(b2DistanceOutput self) -> float32"},
	 { "b2DistanceOutput_iterations_set", _wrap_b2DistanceOutput_iterations_set, METH_VARARGS, "b2DistanceOutput_iterations_set(b2DistanceOutput self, int32 iterations)"},
	 { "b2DistanceOutput_iterations_get", _wrap_b2DistanceOutput_iterations_get, METH_O, "b2DistanceOutput_iterations_get(b2DistanceOutput self) -> int32"},
	 { "b2DistanceOutput___hash__", _wrap_b2DistanceOutput___hash__, METH_O, "__hash__(b2DistanceOutput self) -> long"},
	 { "new_b2DistanceOutput", _wrap_new_b2DistanceOutput, METH_NOARGS, "\n"
		"new_b2DistanceOutput() -> b2DistanceOutput\n"
		"Output for b2Distance.\n"
		""},
	 { "delete_b2DistanceOutput", _wrap_delete_b2DistanceOutput, METH_O, "delete_b2DistanceOutput(b2DistanceOutput self)"},
	 { "b2DistanceOutput_swigregister", b2DistanceOutput_swigregister, METH_O, NULL},
	 { "b2DistanceOutput_swiginit", b2DistanceOutput_swiginit, METH_VARARGS, NULL},
	 { "b2TOIInput_proxyA_set", _wrap_b2TOIInput_proxyA_set, METH_VARARGS, "b2TOIInput_proxyA_set(b2TOIInput self, b2DistanceProxy proxyA)"},
	 { "b2TOIInput_proxyA_get", _wrap_b2TOIInput_proxyA_get, METH_O, "b2TOIInput_proxyA_get(b2TOIInput self) -> b2DistanceProxy"},
	 { "b2TOIInput_proxyB_set", _wrap_b2TOIInput_proxyB_set, METH_VARARGS, "b2TOIInput_proxyB_set(b2TOIInput self, b2DistanceProxy proxyB)"},
	 { "b2TOIInput_proxyB_get", _wrap_b2TOIInput_proxyB_get, METH_O, "b2TOIInput_proxyB_get(b2TOIInput self) -> b2DistanceProxy"},
	 { "b2TOIInput_sweepA_set", _wrap_b2TOIInput_sweepA_set, METH_VARARGS, "b2TOIInput_sweepA_set(b2TOIInput self, b2Sweep sweepA)"},
	 { "b2TOIInput_sweepA_get", _wrap_b2TOIInput_sweepA_get, METH_O, "b2TOIInput_sweepA_get(b2TOIInput self) -> b2Sweep"},
	 { "b2TOIInput_sweepB_set", _wrap_b2TOIInput_sweepB_set, METH_VARARGS, "b2TOIInput_sweepB_set(b2TOIInput self, b2Sweep sweepB)"},
	 { "b2TOIInput_sweepB_get", _wrap_b2TOIInput_sweepB_get, METH_O, "b2TOIInput_sweepB_get(b2TOIInput self) -> b2Sweep"},
	 { "b2TOIInput_tMax_set", _wrap_b2TOIInput_tMax_set, METH_VARARGS, "b2TOIInput_tMax_set(b2TOIInput self, float32 tMax)"},
	 { "b2TOIInput_tMax_get", _wrap_b2TOIInput_tMax_get, METH_O, "b2TOIInput_tMax_get(b2TOIInput self) -> float32"},
	 { "b2TOIInput___hash__", _wrap_b2TOIInput___hash__, METH_O, "__hash__(b2TOIInput self) -> long"},
	 { "new_b2TOIInput", _wrap_new_b2TOIInput, METH_NOARGS, "\n"
		"new_b2TOIInput() -> b2TOIInput\n"
		"Input parameters for b2TimeOfImpact.\n"
		""},
	 { "delete_b2TOIInput", _wrap_delete_b2TOIInput, METH_O, "delete_b2TOIInput(b2TOIInput self)"},
	 { "b2TOIInput_swigregister", b2TOIInput_swigregister, METH_O, NULL},
	 { "b2TOIInput_swiginit", b2TOIInput_swiginit, METH_VARARGS, NULL},
	 { "b2TOIOutput_state_set", _wrap_b2TOIOutput_state_set, METH_VARARGS, "b2TOIOutput_state_set(b2TOIOutput self, b2TOIOutput::State state)"},
	 { "b2TOIOutput_state_get", _wrap_b2TOIOutput_state_get, METH_O, "b2TOIOutput_state_get(b2TOIOutput self) -> b2TOIOutput::State"},
	 { "b2TOIOutput_t_set", _wrap_b2TOIOutput_t_set, METH_VARARGS, "b2TOIOutput_t_set(b2TOIOutput self, float32 t)"},
	 { "b2TOIOutput_t_get", _wrap_b2TOIOutput_t_get, METH_O, "b2TOIOutput_t_get(b2TOIOutput self) -> float32"},
	 { "b2TOIOutput___hash__", _wrap_b2TOIOutput___hash__, METH_O, "__hash__(b2TOIOutput self) -> long"},
	 { "new_b2TOIOutput", _wrap_new_b2TOIOutput, METH_NOARGS, "new_b2TOIOutput() -> b2TOIOutput"},
	 { "delete_b2TOIOutput", _wrap_delete_b2TOIOutput, METH_O, "delete_b2TOIOutput(b2TOIOutput self)"},
	 { "b2TOIOutput_swigregister", b2TOIOutput_swigregister, METH_O, NULL},
	 { "b2TOIOutput_swiginit", b2TOIOutput_swiginit, METH_VARARGS, NULL},
	 { "new_b2BodyDef", _wrap_new_b2BodyDef, METH_NOARGS, "\n"
		"new_b2BodyDef() -> b2BodyDef\n"
		"This constructor sets the body definition default values.\n"
		""},
	 { "b2BodyDef_type_set", _wrap_b2BodyDef_type_set, METH_VARARGS, "b2BodyDef_type_set(b2BodyDef self, b2BodyType type)"},
	 { "b2BodyDef_type_get", _wrap_b2BodyDef_type_get, METH_O, "b2BodyDef_type_get(b2BodyDef self) -> b2BodyType"},
	 { "b2BodyDef_position_set", _wrap_b2BodyDef_position_set, METH_VARARGS, "b2BodyDef_position_set(b2BodyDef self, b2Vec2 position)"},
	 { "b2BodyDef_position_get", _wrap_b2BodyDef_position_get, METH_O, "b2BodyDef_position_get(b2BodyDef self) -> b2Vec2"},
	 { "b2BodyDef_angle_set", _wrap_b2BodyDef_angle_set, METH_VARARGS, "b2BodyDef_angle_set(b2BodyDef self, float32 angle)"},
	 { "b2BodyDef_angle_get", _wrap_b2BodyDef_angle_get, METH_O, "b2BodyDef_angle_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_linearVelocity_set", _wrap_b2BodyDef_linearVelocity_set, METH_VARARGS, "b2BodyDef_linearVelocity_set(b2BodyDef self, b2Vec2 linearVelocity)"},
	 { "b2BodyDef_linearVelocity_get", _wrap_b2BodyDef_linearVelocity_get, METH_O, "b2BodyDef_linearVelocity_get(b2BodyDef self) -> b2Vec2"},
	 { "b2BodyDef_angularVelocity_set", _wrap_b2BodyDef_angularVelocity_set, METH_VARARGS, "b2BodyDef_angularVelocity_set(b2BodyDef self, float32 angularVelocity)"},
	 { "b2BodyDef_angularVelocity_get", _wrap_b2BodyDef_angularVelocity_get, METH_O, "b2BodyDef_angularVelocity_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_linearDamping_set", _wrap_b2BodyDef_linearDamping_set, METH_VARARGS, "b2BodyDef_linearDamping_set(b2BodyDef self, float32 linearDamping)"},
	 { "b2BodyDef_linearDamping_get", _wrap_b2BodyDef_linearDamping_get, METH_O, "b2BodyDef_linearDamping_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_angularDamping_set", _wrap_b2BodyDef_angularDamping_set, METH_VARARGS, "b2BodyDef_angularDamping_set(b2BodyDef self, float32 angularDamping)"},
	 { "b2BodyDef_angularDamping_get", _wrap_b2BodyDef_angularDamping_get, METH_O, "b2BodyDef_angularDamping_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef_allowSleep_set", _wrap_b2BodyDef_allowSleep_set, METH_VARARGS, "b2BodyDef_allowSleep_set(b2BodyDef self, bool allowSleep)"},
	 { "b2BodyDef_allowSleep_get", _wrap_b2BodyDef_allowSleep_get, METH_O, "b2BodyDef_allowSleep_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_awake_set", _wrap_b2BodyDef_awake_set, METH_VARARGS, "b2BodyDef_awake_set(b2BodyDef self, bool awake)"},
	 { "b2BodyDef_awake_get", _wrap_b2BodyDef_awake_get, METH_O, "b2BodyDef_awake_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_fixedRotation_set", _wrap_b2BodyDef_fixedRotation_set, METH_VARARGS, "b2BodyDef_fixedRotation_set(b2BodyDef self, bool fixedRotation)"},
	 { "b2BodyDef_fixedRotation_get", _wrap_b2BodyDef_fixedRotation_get, METH_O, "b2BodyDef_fixedRotation_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_bullet_set", _wrap_b2BodyDef_bullet_set, METH_VARARGS, "b2BodyDef_bullet_set(b2BodyDef self, bool bullet)"},
	 { "b2BodyDef_bullet_get", _wrap_b2BodyDef_bullet_get, METH_O, "b2BodyDef_bullet_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_active_set", _wrap_b2BodyDef_active_set, METH_VARARGS, "b2BodyDef_active_set(b2BodyDef self, bool active)"},
	 { "b2BodyDef_active_get", _wrap_b2BodyDef_active_get, METH_O, "b2BodyDef_active_get(b2BodyDef self) -> bool"},
	 { "b2BodyDef_gravityScale_set", _wrap_b2BodyDef_gravityScale_set, METH_VARARGS, "b2BodyDef_gravityScale_set(b2BodyDef self, float32 gravityScale)"},
	 { "b2BodyDef_gravityScale_get", _wrap_b2BodyDef_gravityScale_get, METH_O, "b2BodyDef_gravityScale_get(b2BodyDef self) -> float32"},
	 { "b2BodyDef___hash__", _wrap_b2BodyDef___hash__, METH_O, "__hash__(b2BodyDef self) -> long"},
	 { "b2BodyDef___GetUserData", _wrap_b2BodyDef___GetUserData, METH_O, "__GetUserData(b2BodyDef self) -> PyObject *"},
	 { "b2BodyDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2BodyDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2BodyDef self, PyObject * data)"},
	 { "b2BodyDef_ClearUserData", _wrap_b2BodyDef_ClearUserData, METH_O, "ClearUserData(b2BodyDef self)"},
	 { "delete_b2BodyDef", _wrap_delete_b2BodyDef, METH_O, "delete_b2BodyDef(b2BodyDef self)"},
	 { "b2BodyDef_swigregister", b2BodyDef_swigregister, METH_O, NULL},
	 { "b2BodyDef_swiginit", b2BodyDef_swiginit, METH_VARARGS, NULL},
	 { "b2Body___SetTransform", (PyCFunction)(void(*)(void))_wrap_b2Body___SetTransform, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetTransform(b2Body self, b2Vec2 position, float32 angle)\n"
		"Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"position: \n"
		"the world position of the body's local origin.\n"
		"\n"
		"angle: \n"
		"the world rotation in radians.\n"
		""},
	 { "b2Body___GetTransform", _wrap_b2Body___GetTransform, METH_O, "\n"
		"__GetTransform(b2Body self) -> b2Transform\n"
		"Get the body transform for the body's origin. \n"
		"the world transform of the body's origin.\n"
		""},
	 { "b2Body___GetPosition", _wrap_b2Body___GetPosition, METH_O, "\n"
		"__GetPosition(b2Body self) -> b2Vec2\n"
		"Get the world body origin position. \n"
		"the world position of the body's origin.\n"
		""},
	 { "b2Body___GetAngle", _wrap_b2Body___GetAngle, METH_O, "\n"
		"__GetAngle(b2Body self) -> float32\n"
		"Get the angle in radians. \n"
		"the current world rotation angle in radians.\n"
		""},
	 { "b2Body___GetWorldCenter", _wrap_b2Body___GetWorldCenter, METH_O, "\n"
		"__GetWorldCenter(b2Body self) -> b2Vec2\n"
		"Get the world position of the center of mass.\n"
		""},
	 { "b2Body___GetLocalCenter", _wrap_b2Body___GetLocalCenter, METH_O, "\n"
		"__GetLocalCenter(b2Body self) -> b2Vec2\n"
		"Get the local position of the center of mass.\n"
		""},
	 { "b2Body___SetLinearVelocity", (PyCFunction)(void(*)(void))_wrap_b2Body___SetLinearVelocity, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetLinearVelocity(b2Body self, b2Vec2 v)\n"
		"Set the linear velocity of the center of mass.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"v: \n"
		"the new linear velocity of the center of mass.\n"
		""},
	 { "b2Body___GetLinearVelocity", _wrap_b2Body___GetLinearVelocity, METH_O, "\n"
		"__GetLinearVelocity(b2Body self) -> b2Vec2\n"
		"Get the linear velocity of the center of mass. \n"
		"the linear velocity of the center of mass.\n"
		""},
	 { "b2Body___SetAngularVelocity", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAngularVelocity, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetAngularVelocity(b2Body self, float32 omega)\n"
		"Set the angular velocity.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"omega: \n"
		"the new angular velocity in radians/second.\n"
		""},
	 { "b2Body___GetAngularVelocity", _wrap_b2Body___GetAngularVelocity, METH_O, "\n"
		"__GetAngularVelocity(b2Body self) -> float32\n"
		"Get the angular velocity. \n"
		"the angular velocity in radians/second.\n"
		""},
	 { "b2Body_ApplyForce", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"ApplyForce(b2Body self, b2Vec2 force, b2Vec2 point, bool wake)\n"
		"Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"force: \n"
		"the world force vector, usually in Newtons (N).\n"
		"\n"
		"point: \n"
		"the world position of the point of application.\n"
		""},
	 { "b2Body_ApplyForceToCenter", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyForceToCenter, METH_VARARGS|METH_KEYWORDS, "ApplyForceToCenter(b2Body self, b2Vec2 force, bool wake)"},
	 { "b2Body_ApplyTorque", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"ApplyTorque(b2Body self, float32 torque, bool wake)\n"
		"Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"torque: \n"
		"about the z-axis (out of the screen), usually in N-m.\n"
		""},
	 { "b2Body_ApplyLinearImpulse", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyLinearImpulse, METH_VARARGS|METH_KEYWORDS, "\n"
		"ApplyLinearImpulse(b2Body self, b2Vec2 impulse, b2Vec2 point, bool wake)\n"
		"Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"impulse: \n"
		"the world impulse vector, usually in N-seconds or kg-m/s.\n"
		"\n"
		"point: \n"
		"the world position of the point of application.\n"
		""},
	 { "b2Body_ApplyAngularImpulse", (PyCFunction)(void(*)(void))_wrap_b2Body_ApplyAngularImpulse, METH_VARARGS|METH_KEYWORDS, "\n"
		"ApplyAngularImpulse(b2Body self, float32 impulse, bool wake)\n"
		"Apply an angular impulse.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"impulse: \n"
		"the angular impulse in units of kg*m*m/s\n"
		""},
	 { "b2Body___GetMass", _wrap_b2Body___GetMass, METH_O, "\n"
		"__GetMass(b2Body self) -> float32\n"
		"Get the total mass of the body. \n"
		"the mass, usually in kilograms (kg).\n"
		""},
	 { "b2Body___GetInertia", _wrap_b2Body___GetInertia, METH_O, "\n"
		"__GetInertia(b2Body self) -> float32\n"
		"Get the rotational inertia of the body about the local origin. \n"
		"the rotational inertia, usually in kg-m^2.\n"
		""},
	 { "b2Body_GetMassData", (PyCFunction)(void(*)(void))_wrap_b2Body_GetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetMassData(b2Body self, b2MassData data)\n"
		"Get the mass data of the body. \n"
		"a struct containing the mass, inertia and center of the body.\n"
		""},
	 { "b2Body___SetMassData", (PyCFunction)(void(*)(void))_wrap_b2Body___SetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMassData(b2Body self, b2MassData data)\n"
		"Set the mass properties to override the mass properties of the fixtures. Note that this changes the center of mass position. Note that creating or destroying fixtures can also alter the mass. This function has no effect if the body isn't dynamic.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: \n"
		"the mass properties.\n"
		""},
	 { "b2Body_ResetMassData", _wrap_b2Body_ResetMassData, METH_O, "\n"
		"ResetMassData(b2Body self)\n"
		"This resets the mass properties to the sum of the mass properties of the fixtures. This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.\n"
		""},
	 { "b2Body_GetWorldPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetWorldPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetWorldPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"Get the world coordinates of a point given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localPoint: \n"
		"a point on the body measured relative the the body's origin. \n"
		"the same point expressed in world coordinates.\n"
		""},
	 { "b2Body_GetWorldVector", (PyCFunction)(void(*)(void))_wrap_b2Body_GetWorldVector, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetWorldVector(b2Body self, b2Vec2 localVector) -> b2Vec2\n"
		"Get the world coordinates of a vector given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localVector: \n"
		"a vector fixed in the body. \n"
		"the same vector expressed in world coordinates.\n"
		""},
	 { "b2Body_GetLocalPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLocalPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetLocalPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"Gets a local point relative to the body's origin given a world point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in world coordinates. \n"
		"the corresponding local point relative to the body's origin.\n"
		""},
	 { "b2Body_GetLocalVector", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLocalVector, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetLocalVector(b2Body self, b2Vec2 worldVector) -> b2Vec2\n"
		"Gets a local vector given a world vector.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"vector in world coordinates. \n"
		"the corresponding local vector.\n"
		""},
	 { "b2Body_GetLinearVelocityFromWorldPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLinearVelocityFromWorldPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetLinearVelocityFromWorldPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"Get the world linear velocity of a world point attached to this body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in world coordinates. \n"
		"the world velocity of a point.\n"
		""},
	 { "b2Body_GetLinearVelocityFromLocalPoint", (PyCFunction)(void(*)(void))_wrap_b2Body_GetLinearVelocityFromLocalPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetLinearVelocityFromLocalPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"Get the world velocity of a local point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: \n"
		"point in local coordinates. \n"
		"the world velocity of a point.\n"
		""},
	 { "b2Body___GetLinearDamping", _wrap_b2Body___GetLinearDamping, METH_O, "\n"
		"__GetLinearDamping(b2Body self) -> float32\n"
		"Get the linear damping of the body.\n"
		""},
	 { "b2Body___SetLinearDamping", (PyCFunction)(void(*)(void))_wrap_b2Body___SetLinearDamping, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetLinearDamping(b2Body self, float32 linearDamping)\n"
		"Set the linear damping of the body.\n"
		""},
	 { "b2Body___GetAngularDamping", _wrap_b2Body___GetAngularDamping, METH_O, "\n"
		"__GetAngularDamping(b2Body self) -> float32\n"
		"Get the angular damping of the body.\n"
		""},
	 { "b2Body___SetAngularDamping", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAngularDamping, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetAngularDamping(b2Body self, float32 angularDamping)\n"
		"Set the angular damping of the body.\n"
		""},
	 { "b2Body___GetGravityScale", _wrap_b2Body___GetGravityScale, METH_O, "__GetGravityScale(b2Body self) -> float32"},
	 { "b2Body___SetGravityScale", (PyCFunction)(void(*)(void))_wrap_b2Body___SetGravityScale, METH_VARARGS|METH_KEYWORDS, "__SetGravityScale(b2Body self, float32 scale)"},
	 { "b2Body___SetType", (PyCFunction)(void(*)(void))_wrap_b2Body___SetType, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetType(b2Body self, b2BodyType type)\n"
		"Set the type of this body. This may alter the mass and velocity.\n"
		""},
	 { "b2Body___GetType", _wrap_b2Body___GetType, METH_O, "\n"
		"__GetType(b2Body self) -> b2BodyType\n"
		"Get the type of this body.\n"
		""},
	 { "b2Body___SetBullet", (PyCFunction)(void(*)(void))_wrap_b2Body___SetBullet, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetBullet(b2Body self, bool flag)\n"
		"Should this body be treated like a bullet for continuous collision detection?\n"
		""},
	 { "b2Body___IsBullet", _wrap_b2Body___IsBullet, METH_O, "\n"
		"__IsBullet(b2Body self) -> bool\n"
		"Is this body treated like a bullet for continuous collision detection?\n"
		""},
	 { "b2Body___SetSleepingAllowed", (PyCFunction)(void(*)(void))_wrap_b2Body___SetSleepingAllowed, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetSleepingAllowed(b2Body self, bool flag)\n"
		"You can disable sleeping on this body. If you disable sleeping, the body will be woken.\n"
		""},
	 { "b2Body___IsSleepingAllowed", _wrap_b2Body___IsSleepingAllowed, METH_O, "\n"
		"__IsSleepingAllowed(b2Body self) -> bool\n"
		"Is this body allowed to sleep.\n"
		""},
	 { "b2Body___SetAwake", (PyCFunction)(void(*)(void))_wrap_b2Body___SetAwake, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetAwake(b2Body self, bool flag)\n"
		"Set the sleep state of the body. A sleeping body has very low CPU cost.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"flag: \n"
		"set to true to put body to sleep, false to wake it.\n"
		""},
	 { "b2Body___IsAwake", _wrap_b2Body___IsAwake, METH_O, "\n"
		"__IsAwake(b2Body self) -> bool\n"
		"Get the sleeping state of this body. \n"
		"true if the body is sleeping.\n"
		""},
	 { "b2Body___SetActive", (PyCFunction)(void(*)(void))_wrap_b2Body___SetActive, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetActive(b2Body self, bool flag)\n"
		"Set the active state of the body. An inactive body is not simulated and cannot be collided with or woken up. If you pass a flag of true, all fixtures will be added to the broad-phase. If you pass a flag of false, all fixtures will be removed from the broad-phase and all contacts will be destroyed. Fixtures and joints are otherwise unaffected. You may continue to create/destroy fixtures and joints on inactive bodies. Fixtures on an inactive body are implicitly inactive and will not participate in collisions, ray-casts, or queries. Joints connected to an inactive body are implicitly inactive. An inactive body is still owned by a  b2Worldobject and remains in the body list.\n"
		""},
	 { "b2Body___IsActive", _wrap_b2Body___IsActive, METH_O, "\n"
		"__IsActive(b2Body self) -> bool\n"
		"Get the active state of the body.\n"
		""},
	 { "b2Body___SetFixedRotation", (PyCFunction)(void(*)(void))_wrap_b2Body___SetFixedRotation, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFixedRotation(b2Body self, bool flag)\n"
		"Set this body to have fixed rotation. This causes the mass to be reset.\n"
		""},
	 { "b2Body___IsFixedRotation", _wrap_b2Body___IsFixedRotation, METH_O, "\n"
		"__IsFixedRotation(b2Body self) -> bool\n"
		"Does this body have fixed rotation?\n"
		""},
	 { "b2Body___GetFixtureList_internal", _wrap_b2Body___GetFixtureList_internal, METH_VARARGS, "\n"
		"__GetFixtureList_internal(b2Body self) -> b2Fixture\n"
		"__GetFixtureList_internal(b2Body self) -> b2Fixture\n"
		"Get the list of all fixtures attached to this body.\n"
		""},
	 { "b2Body___GetJointList_internal", _wrap_b2Body___GetJointList_internal, METH_VARARGS, "\n"
		"__GetJointList_internal(b2Body self) -> b2JointEdge\n"
		"__GetJointList_internal(b2Body self) -> b2JointEdge\n"
		"Get the list of all joints attached to this body.\n"
		""},
	 { "b2Body___GetContactList_internal", _wrap_b2Body___GetContactList_internal, METH_VARARGS, "\n"
		"__GetContactList_internal(b2Body self) -> b2ContactEdge\n"
		"__GetContactList_internal(b2Body self) -> b2ContactEdge\n"
		"Get the list of all contacts attached to this body. \n"
		"WARNING: \n"
		"this list changes during the time step and you may miss some collisions if you don't use  b2ContactListener.\n"
		""},
	 { "b2Body___GetNext", _wrap_b2Body___GetNext, METH_VARARGS, "\n"
		"__GetNext(b2Body self) -> b2Body\n"
		"__GetNext(b2Body self) -> b2Body\n"
		"Get the next body in the world's body list.\n"
		""},
	 { "b2Body___GetWorld", _wrap_b2Body___GetWorld, METH_VARARGS, "\n"
		"__GetWorld(b2Body self) -> b2World\n"
		"__GetWorld(b2Body self) -> b2World\n"
		"Get the parent world of this body.\n"
		""},
	 { "b2Body_Dump", _wrap_b2Body_Dump, METH_O, "Dump(b2Body self)"},
	 { "b2Body___hash__", _wrap_b2Body___hash__, METH_O, "__hash__(b2Body self) -> long"},
	 { "b2Body_DestroyFixture", (PyCFunction)(void(*)(void))_wrap_b2Body_DestroyFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"DestroyFixture(b2Body self, b2Fixture fixture)\n"
		"Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture. This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density. All fixtures attached to a body are implicitly destroyed when the body is destroyed.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fixture: \n"
		"the fixture to be removed.\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2Body___CreateFixture", _wrap_b2Body___CreateFixture, METH_VARARGS, "\n"
		"__CreateFixture(b2Body self, b2Shape shape, float32 density) -> b2Fixture\n"
		"__CreateFixture(b2Body self, b2FixtureDef defn) -> b2Fixture\n"
		"Creates a fixture from a shape and attach it to this body. This is a convenience function. Use  b2FixtureDefif you need to set parameters like friction, restitution, user data, or filtering. If the density is non-zero, this function automatically updates the mass of the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"shape: \n"
		"the shape to be cloned.\n"
		"\n"
		"density: \n"
		"the shape density (set to zero for static bodies).\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2Body___GetUserData", _wrap_b2Body___GetUserData, METH_O, "__GetUserData(b2Body self) -> PyObject *"},
	 { "b2Body___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Body___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2Body self, PyObject * data)"},
	 { "b2Body_ClearUserData", _wrap_b2Body_ClearUserData, METH_O, "ClearUserData(b2Body self)"},
	 { "b2Body_swigregister", b2Body_swigregister, METH_O, NULL},
	 { "new_b2Filter", _wrap_new_b2Filter, METH_NOARGS, "\n"
		"new_b2Filter() -> b2Filter\n"
		"This holds contact filtering data.\n"
		""},
	 { "b2Filter_categoryBits_set", _wrap_b2Filter_categoryBits_set, METH_VARARGS, "b2Filter_categoryBits_set(b2Filter self, uint16 categoryBits)"},
	 { "b2Filter_categoryBits_get", _wrap_b2Filter_categoryBits_get, METH_O, "b2Filter_categoryBits_get(b2Filter self) -> uint16"},
	 { "b2Filter_maskBits_set", _wrap_b2Filter_maskBits_set, METH_VARARGS, "b2Filter_maskBits_set(b2Filter self, uint16 maskBits)"},
	 { "b2Filter_maskBits_get", _wrap_b2Filter_maskBits_get, METH_O, "b2Filter_maskBits_get(b2Filter self) -> uint16"},
	 { "b2Filter_groupIndex_set", _wrap_b2Filter_groupIndex_set, METH_VARARGS, "b2Filter_groupIndex_set(b2Filter self, int16 groupIndex)"},
	 { "b2Filter_groupIndex_get", _wrap_b2Filter_groupIndex_get, METH_O, "b2Filter_groupIndex_get(b2Filter self) -> int16"},
	 { "b2Filter___hash__", _wrap_b2Filter___hash__, METH_O, "__hash__(b2Filter self) -> long"},
	 { "delete_b2Filter", _wrap_delete_b2Filter, METH_O, "delete_b2Filter(b2Filter self)"},
	 { "b2Filter_swigregister", b2Filter_swigregister, METH_O, NULL},
	 { "b2Filter_swiginit", b2Filter_swiginit, METH_VARARGS, NULL},
	 { "new_b2FixtureDef", _wrap_new_b2FixtureDef, METH_NOARGS, "\n"
		"new_b2FixtureDef() -> b2FixtureDef\n"
		"The constructor sets the default fixture definition values.\n"
		""},
	 { "b2FixtureDef_shape_set", _wrap_b2FixtureDef_shape_set, METH_VARARGS, "b2FixtureDef_shape_set(b2FixtureDef self, b2Shape shape)"},
	 { "b2FixtureDef_shape_get", _wrap_b2FixtureDef_shape_get, METH_O, "b2FixtureDef_shape_get(b2FixtureDef self) -> b2Shape"},
	 { "b2FixtureDef_friction_set", _wrap_b2FixtureDef_friction_set, METH_VARARGS, "b2FixtureDef_friction_set(b2FixtureDef self, float32 friction)"},
	 { "b2FixtureDef_friction_get", _wrap_b2FixtureDef_friction_get, METH_O, "b2FixtureDef_friction_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_restitution_set", _wrap_b2FixtureDef_restitution_set, METH_VARARGS, "b2FixtureDef_restitution_set(b2FixtureDef self, float32 restitution)"},
	 { "b2FixtureDef_restitution_get", _wrap_b2FixtureDef_restitution_get, METH_O, "b2FixtureDef_restitution_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_density_set", _wrap_b2FixtureDef_density_set, METH_VARARGS, "b2FixtureDef_density_set(b2FixtureDef self, float32 density)"},
	 { "b2FixtureDef_density_get", _wrap_b2FixtureDef_density_get, METH_O, "b2FixtureDef_density_get(b2FixtureDef self) -> float32"},
	 { "b2FixtureDef_isSensor_set", _wrap_b2FixtureDef_isSensor_set, METH_VARARGS, "b2FixtureDef_isSensor_set(b2FixtureDef self, bool isSensor)"},
	 { "b2FixtureDef_isSensor_get", _wrap_b2FixtureDef_isSensor_get, METH_O, "b2FixtureDef_isSensor_get(b2FixtureDef self) -> bool"},
	 { "b2FixtureDef_filter_set", _wrap_b2FixtureDef_filter_set, METH_VARARGS, "b2FixtureDef_filter_set(b2FixtureDef self, b2Filter filter)"},
	 { "b2FixtureDef_filter_get", _wrap_b2FixtureDef_filter_get, METH_O, "b2FixtureDef_filter_get(b2FixtureDef self) -> b2Filter"},
	 { "b2FixtureDef___hash__", _wrap_b2FixtureDef___hash__, METH_O, "__hash__(b2FixtureDef self) -> long"},
	 { "b2FixtureDef___GetUserData", _wrap_b2FixtureDef___GetUserData, METH_O, "__GetUserData(b2FixtureDef self) -> PyObject *"},
	 { "b2FixtureDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2FixtureDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2FixtureDef self, PyObject * data)"},
	 { "b2FixtureDef_ClearUserData", _wrap_b2FixtureDef_ClearUserData, METH_O, "ClearUserData(b2FixtureDef self)"},
	 { "delete_b2FixtureDef", _wrap_delete_b2FixtureDef, METH_O, "delete_b2FixtureDef(b2FixtureDef self)"},
	 { "b2FixtureDef_swigregister", b2FixtureDef_swigregister, METH_O, NULL},
	 { "b2FixtureDef_swiginit", b2FixtureDef_swiginit, METH_VARARGS, NULL},
	 { "b2FixtureProxy_aabb_set", _wrap_b2FixtureProxy_aabb_set, METH_VARARGS, "b2FixtureProxy_aabb_set(b2FixtureProxy self, b2AABB aabb)"},
	 { "b2FixtureProxy_aabb_get", _wrap_b2FixtureProxy_aabb_get, METH_O, "b2FixtureProxy_aabb_get(b2FixtureProxy self) -> b2AABB"},
	 { "b2FixtureProxy_fixture_set", _wrap_b2FixtureProxy_fixture_set, METH_VARARGS, "b2FixtureProxy_fixture_set(b2FixtureProxy self, b2Fixture fixture)"},
	 { "b2FixtureProxy_fixture_get", _wrap_b2FixtureProxy_fixture_get, METH_O, "b2FixtureProxy_fixture_get(b2FixtureProxy self) -> b2Fixture"},
	 { "b2FixtureProxy_childIndex_set", _wrap_b2FixtureProxy_childIndex_set, METH_VARARGS, "b2FixtureProxy_childIndex_set(b2FixtureProxy self, int32 childIndex)"},
	 { "b2FixtureProxy_childIndex_get", _wrap_b2FixtureProxy_childIndex_get, METH_O, "b2FixtureProxy_childIndex_get(b2FixtureProxy self) -> int32"},
	 { "b2FixtureProxy_proxyId_set", _wrap_b2FixtureProxy_proxyId_set, METH_VARARGS, "b2FixtureProxy_proxyId_set(b2FixtureProxy self, int32 proxyId)"},
	 { "b2FixtureProxy_proxyId_get", _wrap_b2FixtureProxy_proxyId_get, METH_O, "b2FixtureProxy_proxyId_get(b2FixtureProxy self) -> int32"},
	 { "b2FixtureProxy___hash__", _wrap_b2FixtureProxy___hash__, METH_O, "__hash__(b2FixtureProxy self) -> long"},
	 { "new_b2FixtureProxy", _wrap_new_b2FixtureProxy, METH_NOARGS, "\n"
		"new_b2FixtureProxy() -> b2FixtureProxy\n"
		"This proxy is used internally to connect fixtures to the broad-phase.\n"
		""},
	 { "delete_b2FixtureProxy", _wrap_delete_b2FixtureProxy, METH_O, "delete_b2FixtureProxy(b2FixtureProxy self)"},
	 { "b2FixtureProxy_swigregister", b2FixtureProxy_swigregister, METH_O, NULL},
	 { "b2FixtureProxy_swiginit", b2FixtureProxy_swiginit, METH_VARARGS, NULL},
	 { "b2Fixture___GetType", _wrap_b2Fixture___GetType, METH_O, "\n"
		"__GetType(b2Fixture self) -> b2Shape::Type\n"
		"Get the type of the child shape. You can use this to down cast to the concrete shape. \n"
		"the shape type.\n"
		""},
	 { "b2Fixture___GetShape", _wrap_b2Fixture___GetShape, METH_VARARGS, "\n"
		"__GetShape(b2Fixture self) -> b2Shape\n"
		"__GetShape(b2Fixture self) -> b2Shape\n"
		"Get the child shape. You can modify the child shape, however you should not change the number of vertices because this will crash some collision caching mechanisms. Manipulating the shape may lead to non-physical behavior.\n"
		""},
	 { "b2Fixture___SetSensor", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetSensor, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetSensor(b2Fixture self, bool sensor)\n"
		"Set if this fixture is a sensor.\n"
		""},
	 { "b2Fixture___IsSensor", _wrap_b2Fixture___IsSensor, METH_O, "\n"
		"__IsSensor(b2Fixture self) -> bool\n"
		"Is this fixture a sensor (non-solid)? \n"
		"the true if the shape is a sensor.\n"
		""},
	 { "b2Fixture___SetFilterData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetFilterData, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFilterData(b2Fixture self, b2Filter filter)\n"
		"Set the contact filtering data. This will not update contacts until the next time step when either parent body is active and awake. This automatically calls Refilter.\n"
		""},
	 { "b2Fixture___GetFilterData", _wrap_b2Fixture___GetFilterData, METH_O, "\n"
		"__GetFilterData(b2Fixture self) -> b2Filter\n"
		"Get the contact filtering data.\n"
		""},
	 { "b2Fixture_Refilter", _wrap_b2Fixture_Refilter, METH_O, "\n"
		"Refilter(b2Fixture self)\n"
		"Call this if you want to establish collision that was previously disabled by  b2ContactFilter::ShouldCollide.\n"
		""},
	 { "b2Fixture___GetBody", _wrap_b2Fixture___GetBody, METH_VARARGS, "\n"
		"__GetBody(b2Fixture self) -> b2Body\n"
		"__GetBody(b2Fixture self) -> b2Body\n"
		"Get the parent body of this fixture. This is NULL if the fixture is not attached. \n"
		"the parent body.\n"
		""},
	 { "b2Fixture___GetNext", _wrap_b2Fixture___GetNext, METH_VARARGS, "\n"
		"__GetNext(b2Fixture self) -> b2Fixture\n"
		"__GetNext(b2Fixture self) -> b2Fixture\n"
		"Get the next fixture in the parent body's fixture list. \n"
		"the next shape.\n"
		""},
	 { "b2Fixture_TestPoint", (PyCFunction)(void(*)(void))_wrap_b2Fixture_TestPoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"TestPoint(b2Fixture self, b2Vec2 p) -> bool\n"
		"Test a point for containment in this fixture.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p: \n"
		"a point in world coordinates.\n"
		""},
	 { "b2Fixture_RayCast", (PyCFunction)(void(*)(void))_wrap_b2Fixture_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"RayCast(b2Fixture self, b2RayCastOutput output, b2RayCastInput input, int32 childIndex) -> bool\n"
		"Cast a ray against this shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"output: \n"
		"the ray-cast results.\n"
		"\n"
		"input: \n"
		"the ray-cast input parameters.\n"
		""},
	 { "b2Fixture___GetMassData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___GetMassData, METH_VARARGS|METH_KEYWORDS, "\n"
		"__GetMassData(b2Fixture self, b2MassData massData)\n"
		"Get the mass data for this fixture. The mass data is based on the density and the shape. The rotational inertia is about the shape's origin. This operation may be expensive.\n"
		""},
	 { "b2Fixture___SetDensity", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetDensity, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetDensity(b2Fixture self, float32 density)\n"
		"Set the density of this fixture. This will _not_ automatically adjust the mass of the body. You must call  b2Body::ResetMassDatato update the body's mass.\n"
		""},
	 { "b2Fixture___GetDensity", _wrap_b2Fixture___GetDensity, METH_O, "\n"
		"__GetDensity(b2Fixture self) -> float32\n"
		"Get the density of this fixture.\n"
		""},
	 { "b2Fixture___GetFriction", _wrap_b2Fixture___GetFriction, METH_O, "\n"
		"__GetFriction(b2Fixture self) -> float32\n"
		"Get the coefficient of friction.\n"
		""},
	 { "b2Fixture___SetFriction", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFriction(b2Fixture self, float32 friction)\n"
		"Set the coefficient of friction. This will immediately update the mixed friction on all associated contacts.\n"
		""},
	 { "b2Fixture___GetRestitution", _wrap_b2Fixture___GetRestitution, METH_O, "\n"
		"__GetRestitution(b2Fixture self) -> float32\n"
		"Get the coefficient of restitution.\n"
		""},
	 { "b2Fixture___SetRestitution", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetRestitution(b2Fixture self, float32 restitution)\n"
		"Set the coefficient of restitution. This will immediately update the mixed restitution on all associated contacts.\n"
		""},
	 { "b2Fixture_GetAABB", (PyCFunction)(void(*)(void))_wrap_b2Fixture_GetAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetAABB(b2Fixture self, int32 childIndex) -> b2AABB\n"
		"Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a more accurate AABB, compute it using the shape and the body transform.\n"
		""},
	 { "b2Fixture_Dump", (PyCFunction)(void(*)(void))_wrap_b2Fixture_Dump, METH_VARARGS|METH_KEYWORDS, "Dump(b2Fixture self, int32 bodyIndex)"},
	 { "b2Fixture___hash__", _wrap_b2Fixture___hash__, METH_O, "__hash__(b2Fixture self) -> long"},
	 { "b2Fixture___GetUserData", _wrap_b2Fixture___GetUserData, METH_O, "__GetUserData(b2Fixture self) -> PyObject *"},
	 { "b2Fixture___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Fixture___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2Fixture self, PyObject * data)"},
	 { "b2Fixture_ClearUserData", _wrap_b2Fixture_ClearUserData, METH_O, "ClearUserData(b2Fixture self)"},
	 { "delete_b2Fixture", _wrap_delete_b2Fixture, METH_O, "delete_b2Fixture(b2Fixture self)"},
	 { "b2Fixture_swigregister", b2Fixture_swigregister, METH_O, NULL},
	 { "delete_b2DestructionListener", _wrap_delete_b2DestructionListener, METH_O, "delete_b2DestructionListener(b2DestructionListener self)"},
	 { "b2DestructionListener_SayGoodbye", _wrap_b2DestructionListener_SayGoodbye, METH_VARARGS, "\n"
		"SayGoodbye(b2DestructionListener self, b2Joint joint)\n"
		"SayGoodbye(b2DestructionListener self, b2Fixture fixture)\n"
		"Called when any fixture is about to be destroyed due to the destruction of its parent body.\n"
		""},
	 { "b2DestructionListener___hash__", _wrap_b2DestructionListener___hash__, METH_O, "__hash__(b2DestructionListener self) -> long"},
	 { "new_b2DestructionListener", (PyCFunction)(void(*)(void))_wrap_new_b2DestructionListener, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2DestructionListener(PyObject * _self) -> b2DestructionListener\n"
		"Joints and fixtures are destroyed when their associated body is destroyed. Implement this listener so that you may nullify references to these joints and shapes.\n"
		""},
	 { "disown_b2DestructionListener", (PyCFunction)(void(*)(void))_wrap_disown_b2DestructionListener, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2DestructionListener_swigregister", b2DestructionListener_swigregister, METH_O, NULL},
	 { "b2DestructionListener_swiginit", b2DestructionListener_swiginit, METH_VARARGS, NULL},
	 { "delete_b2ContactFilter", _wrap_delete_b2ContactFilter, METH_O, "delete_b2ContactFilter(b2ContactFilter self)"},
	 { "b2ContactFilter_ShouldCollide", (PyCFunction)(void(*)(void))_wrap_b2ContactFilter_ShouldCollide, METH_VARARGS|METH_KEYWORDS, "\n"
		"ShouldCollide(b2ContactFilter self, b2Fixture fixtureA, b2Fixture fixtureB) -> bool\n"
		"Return true if contact calculations should be performed between these two shapes. \n"
		"WARNING: \n"
		"for performance reasons this is only called when the AABBs begin to overlap.\n"
		""},
	 { "b2ContactFilter___hash__", _wrap_b2ContactFilter___hash__, METH_O, "__hash__(b2ContactFilter self) -> long"},
	 { "new_b2ContactFilter", (PyCFunction)(void(*)(void))_wrap_new_b2ContactFilter, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2ContactFilter(PyObject * _self) -> b2ContactFilter\n"
		"Implement this class to provide collision filtering. In other words, you can implement this class if you want finer control over contact creation.\n"
		""},
	 { "disown_b2ContactFilter", (PyCFunction)(void(*)(void))_wrap_disown_b2ContactFilter, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2ContactFilter_swigregister", b2ContactFilter_swigregister, METH_O, NULL},
	 { "b2ContactFilter_swiginit", b2ContactFilter_swiginit, METH_VARARGS, NULL},
	 { "b2ContactImpulse_count_set", _wrap_b2ContactImpulse_count_set, METH_VARARGS, "b2ContactImpulse_count_set(b2ContactImpulse self, int32 count)"},
	 { "b2ContactImpulse_count_get", _wrap_b2ContactImpulse_count_get, METH_O, "b2ContactImpulse_count_get(b2ContactImpulse self) -> int32"},
	 { "b2ContactImpulse___hash__", _wrap_b2ContactImpulse___hash__, METH_O, "__hash__(b2ContactImpulse self) -> long"},
	 { "b2ContactImpulse___get_normal_impulses", _wrap_b2ContactImpulse___get_normal_impulses, METH_O, "__get_normal_impulses(b2ContactImpulse self) -> PyObject *"},
	 { "b2ContactImpulse___get_tangent_impulses", _wrap_b2ContactImpulse___get_tangent_impulses, METH_O, "__get_tangent_impulses(b2ContactImpulse self) -> PyObject *"},
	 { "new_b2ContactImpulse", _wrap_new_b2ContactImpulse, METH_NOARGS, "\n"
		"new_b2ContactImpulse() -> b2ContactImpulse\n"
		"Contact impulses for reporting. Impulses are used instead of forces because sub-step forces may approach infinity for rigid body collisions. These match up one-to-one with the contact points in  b2Manifold.\n"
		""},
	 { "delete_b2ContactImpulse", _wrap_delete_b2ContactImpulse, METH_O, "delete_b2ContactImpulse(b2ContactImpulse self)"},
	 { "b2ContactImpulse_swigregister", b2ContactImpulse_swigregister, METH_O, NULL},
	 { "b2ContactImpulse_swiginit", b2ContactImpulse_swiginit, METH_VARARGS, NULL},
	 { "delete_b2ContactListener", _wrap_delete_b2ContactListener, METH_O, "delete_b2ContactListener(b2ContactListener self)"},
	 { "b2ContactListener_BeginContact", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_BeginContact, METH_VARARGS|METH_KEYWORDS, "\n"
		"BeginContact(b2ContactListener self, b2Contact contact)\n"
		"Called when two fixtures begin to touch.\n"
		""},
	 { "b2ContactListener_EndContact", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_EndContact, METH_VARARGS|METH_KEYWORDS, "\n"
		"EndContact(b2ContactListener self, b2Contact contact)\n"
		"Called when two fixtures cease to touch.\n"
		""},
	 { "b2ContactListener_PreSolve", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_PreSolve, METH_VARARGS|METH_KEYWORDS, "\n"
		"PreSolve(b2ContactListener self, b2Contact contact, b2Manifold oldManifold)\n"
		"This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. disable contact). A copy of the old manifold is provided so that you can detect changes. Note: this is called only for awake bodies. Note: this is called even when the number of contact points is zero. Note: this is not called for sensors. Note: if you set the number of contact points to zero, you will not get an EndContact callback. However, you may get a BeginContact callback the next step.\n"
		""},
	 { "b2ContactListener_PostSolve", (PyCFunction)(void(*)(void))_wrap_b2ContactListener_PostSolve, METH_VARARGS|METH_KEYWORDS, "\n"
		"PostSolve(b2ContactListener self, b2Contact contact, b2ContactImpulse impulse)\n"
		"This lets you inspect a contact after the solver is finished. This is useful for inspecting impulses. Note: the contact manifold does not include time of impact impulses, which can be arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly in a separate data structure. Note: this is only called for contacts that are touching, solid, and awake.\n"
		""},
	 { "b2ContactListener___hash__", _wrap_b2ContactListener___hash__, METH_O, "__hash__(b2ContactListener self) -> long"},
	 { "new_b2ContactListener", (PyCFunction)(void(*)(void))_wrap_new_b2ContactListener, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2ContactListener(PyObject * _self) -> b2ContactListener\n"
		"Implement this class to get contact information. You can use these results for things like sounds and game logic. You can also get contact results by traversing the contact lists after the time step. However, you might miss some contacts because continuous physics leads to sub-stepping. Additionally you may receive multiple callbacks for the same contact in a single time step. You should strive to make your callbacks efficient because there may be many callbacks per time step. \n"
		"WARNING: \n"
		"You cannot create/destroy Box2D entities inside these callbacks.\n"
		""},
	 { "disown_b2ContactListener", (PyCFunction)(void(*)(void))_wrap_disown_b2ContactListener, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2ContactListener_swigregister", b2ContactListener_swigregister, METH_O, NULL},
	 { "b2ContactListener_swiginit", b2ContactListener_swiginit, METH_VARARGS, NULL},
	 { "delete_b2QueryCallback", _wrap_delete_b2QueryCallback, METH_O, "delete_b2QueryCallback(b2QueryCallback self)"},
	 { "b2QueryCallback_ReportFixture", (PyCFunction)(void(*)(void))_wrap_b2QueryCallback_ReportFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"ReportFixture(b2QueryCallback self, b2Fixture fixture) -> bool\n"
		"Called for each fixture found in the query AABB. \n"
		"false to terminate the query.\n"
		""},
	 { "b2QueryCallback___hash__", _wrap_b2QueryCallback___hash__, METH_O, "__hash__(b2QueryCallback self) -> long"},
	 { "new_b2QueryCallback", (PyCFunction)(void(*)(void))_wrap_new_b2QueryCallback, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2QueryCallback(PyObject * _self) -> b2QueryCallback\n"
		"Callback class for AABB queries. See b2World::Query\n"
		""},
	 { "disown_b2QueryCallback", (PyCFunction)(void(*)(void))_wrap_disown_b2QueryCallback, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2QueryCallback_swigregister", b2QueryCallback_swigregister, METH_O, NULL},
	 { "b2QueryCallback_swiginit", b2QueryCallback_swiginit, METH_VARARGS, NULL},
	 { "delete_b2RayCastCallback", _wrap_delete_b2RayCastCallback, METH_O, "delete_b2RayCastCallback(b2RayCastCallback self)"},
	 { "b2RayCastCallback_ReportFixture", (PyCFunction)(void(*)(void))_wrap_b2RayCastCallback_ReportFixture, METH_VARARGS|METH_KEYWORDS, "\n"
		"ReportFixture(b2RayCastCallback self, b2Fixture fixture, b2Vec2 point, b2Vec2 normal, float32 fraction) -> float32\n"
		"Called for each fixture found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this fixture and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fixture: \n"
		"the fixture hit by the ray\n"
		"\n"
		"point: \n"
		"the point of initial intersection\n"
		"\n"
		"normal: \n"
		"the normal vector at the point of intersection \n"
		"-1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue\n"
		""},
	 { "b2RayCastCallback___hash__", _wrap_b2RayCastCallback___hash__, METH_O, "__hash__(b2RayCastCallback self) -> long"},
	 { "new_b2RayCastCallback", (PyCFunction)(void(*)(void))_wrap_new_b2RayCastCallback, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2RayCastCallback(PyObject * _self) -> b2RayCastCallback\n"
		"Callback class for ray casts. See  b2World::RayCast\n"
		""},
	 { "disown_b2RayCastCallback", (PyCFunction)(void(*)(void))_wrap_disown_b2RayCastCallback, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "b2RayCastCallback_swigregister", b2RayCastCallback_swigregister, METH_O, NULL},
	 { "b2RayCastCallback_swiginit", b2RayCastCallback_swiginit, METH_VARARGS, NULL},
	 { "b2Profile_step_set", _wrap_b2Profile_step_set, METH_VARARGS, "b2Profile_step_set(b2Profile self, float32 step)"},
	 { "b2Profile_step_get", _wrap_b2Profile_step_get, METH_O, "b2Profile_step_get(b2Profile self) -> float32"},
	 { "b2Profile_collide_set", _wrap_b2Profile_collide_set, METH_VARARGS, "b2Profile_collide_set(b2Profile self, float32 collide)"},
	 { "b2Profile_collide_get", _wrap_b2Profile_collide_get, METH_O, "b2Profile_collide_get(b2Profile self) -> float32"},
	 { "b2Profile_solve_set", _wrap_b2Profile_solve_set, METH_VARARGS, "b2Profile_solve_set(b2Profile self, float32 solve)"},
	 { "b2Profile_solve_get", _wrap_b2Profile_solve_get, METH_O, "b2Profile_solve_get(b2Profile self) -> float32"},
	 { "b2Profile_solveInit_set", _wrap_b2Profile_solveInit_set, METH_VARARGS, "b2Profile_solveInit_set(b2Profile self, float32 solveInit)"},
	 { "b2Profile_solveInit_get", _wrap_b2Profile_solveInit_get, METH_O, "b2Profile_solveInit_get(b2Profile self) -> float32"},
	 { "b2Profile_solveVelocity_set", _wrap_b2Profile_solveVelocity_set, METH_VARARGS, "b2Profile_solveVelocity_set(b2Profile self, float32 solveVelocity)"},
	 { "b2Profile_solveVelocity_get", _wrap_b2Profile_solveVelocity_get, METH_O, "b2Profile_solveVelocity_get(b2Profile self) -> float32"},
	 { "b2Profile_solvePosition_set", _wrap_b2Profile_solvePosition_set, METH_VARARGS, "b2Profile_solvePosition_set(b2Profile self, float32 solvePosition)"},
	 { "b2Profile_solvePosition_get", _wrap_b2Profile_solvePosition_get, METH_O, "b2Profile_solvePosition_get(b2Profile self) -> float32"},
	 { "b2Profile_broadphase_set", _wrap_b2Profile_broadphase_set, METH_VARARGS, "b2Profile_broadphase_set(b2Profile self, float32 broadphase)"},
	 { "b2Profile_broadphase_get", _wrap_b2Profile_broadphase_get, METH_O, "b2Profile_broadphase_get(b2Profile self) -> float32"},
	 { "b2Profile_solveTOI_set", _wrap_b2Profile_solveTOI_set, METH_VARARGS, "b2Profile_solveTOI_set(b2Profile self, float32 solveTOI)"},
	 { "b2Profile_solveTOI_get", _wrap_b2Profile_solveTOI_get, METH_O, "b2Profile_solveTOI_get(b2Profile self) -> float32"},
	 { "new_b2Profile", _wrap_new_b2Profile, METH_NOARGS, "new_b2Profile() -> b2Profile"},
	 { "delete_b2Profile", _wrap_delete_b2Profile, METH_O, "delete_b2Profile(b2Profile self)"},
	 { "b2Profile_swigregister", b2Profile_swigregister, METH_O, NULL},
	 { "b2Profile_swiginit", b2Profile_swiginit, METH_VARARGS, NULL},
	 { "b2SolverData_step_set", _wrap_b2SolverData_step_set, METH_VARARGS, "b2SolverData_step_set(b2SolverData self, b2TimeStep * step)"},
	 { "b2SolverData_step_get", _wrap_b2SolverData_step_get, METH_O, "b2SolverData_step_get(b2SolverData self) -> b2TimeStep *"},
	 { "b2SolverData_positions_set", _wrap_b2SolverData_positions_set, METH_VARARGS, "b2SolverData_positions_set(b2SolverData self, b2Position * positions)"},
	 { "b2SolverData_positions_get", _wrap_b2SolverData_positions_get, METH_O, "b2SolverData_positions_get(b2SolverData self) -> b2Position *"},
	 { "b2SolverData_velocities_set", _wrap_b2SolverData_velocities_set, METH_VARARGS, "b2SolverData_velocities_set(b2SolverData self, b2Velocity * velocities)"},
	 { "b2SolverData_velocities_get", _wrap_b2SolverData_velocities_get, METH_O, "b2SolverData_velocities_get(b2SolverData self) -> b2Velocity *"},
	 { "new_b2SolverData", _wrap_new_b2SolverData, METH_NOARGS, "new_b2SolverData() -> b2SolverData"},
	 { "delete_b2SolverData", _wrap_delete_b2SolverData, METH_O, "delete_b2SolverData(b2SolverData self)"},
	 { "b2SolverData_swigregister", b2SolverData_swigregister, METH_O, NULL},
	 { "b2SolverData_swiginit", b2SolverData_swiginit, METH_VARARGS, NULL},
	 { "new_b2ContactManager", _wrap_new_b2ContactManager, METH_NOARGS, "new_b2ContactManager() -> b2ContactManager"},
	 { "b2ContactManager_AddPair", (PyCFunction)(void(*)(void))_wrap_b2ContactManager_AddPair, METH_VARARGS|METH_KEYWORDS, "AddPair(b2ContactManager self, void * proxyUserDataA, void * proxyUserDataB)"},
	 { "b2ContactManager_FindNewContacts", _wrap_b2ContactManager_FindNewContacts, METH_O, "FindNewContacts(b2ContactManager self)"},
	 { "b2ContactManager_Destroy", (PyCFunction)(void(*)(void))_wrap_b2ContactManager_Destroy, METH_VARARGS|METH_KEYWORDS, "Destroy(b2ContactManager self, b2Contact c)"},
	 { "b2ContactManager_Collide", _wrap_b2ContactManager_Collide, METH_O, "Collide(b2ContactManager self)"},
	 { "b2ContactManager_broadPhase_set", _wrap_b2ContactManager_broadPhase_set, METH_VARARGS, "b2ContactManager_broadPhase_set(b2ContactManager self, b2BroadPhase m_broadPhase)"},
	 { "b2ContactManager_broadPhase_get", _wrap_b2ContactManager_broadPhase_get, METH_O, "b2ContactManager_broadPhase_get(b2ContactManager self) -> b2BroadPhase"},
	 { "b2ContactManager_contactList_set", _wrap_b2ContactManager_contactList_set, METH_VARARGS, "b2ContactManager_contactList_set(b2ContactManager self, b2Contact m_contactList)"},
	 { "b2ContactManager_contactList_get", _wrap_b2ContactManager_contactList_get, METH_O, "b2ContactManager_contactList_get(b2ContactManager self) -> b2Contact"},
	 { "b2ContactManager_contactCount_set", _wrap_b2ContactManager_contactCount_set, METH_VARARGS, "b2ContactManager_contactCount_set(b2ContactManager self, int32 m_contactCount)"},
	 { "b2ContactManager_contactCount_get", _wrap_b2ContactManager_contactCount_get, METH_O, "b2ContactManager_contactCount_get(b2ContactManager self) -> int32"},
	 { "b2ContactManager_contactFilter_set", _wrap_b2ContactManager_contactFilter_set, METH_VARARGS, "b2ContactManager_contactFilter_set(b2ContactManager self, b2ContactFilter m_contactFilter)"},
	 { "b2ContactManager_contactFilter_get", _wrap_b2ContactManager_contactFilter_get, METH_O, "b2ContactManager_contactFilter_get(b2ContactManager self) -> b2ContactFilter"},
	 { "b2ContactManager_contactListener_set", _wrap_b2ContactManager_contactListener_set, METH_VARARGS, "b2ContactManager_contactListener_set(b2ContactManager self, b2ContactListener m_contactListener)"},
	 { "b2ContactManager_contactListener_get", _wrap_b2ContactManager_contactListener_get, METH_O, "b2ContactManager_contactListener_get(b2ContactManager self) -> b2ContactListener"},
	 { "b2ContactManager_allocator_set", _wrap_b2ContactManager_allocator_set, METH_VARARGS, "b2ContactManager_allocator_set(b2ContactManager self, b2BlockAllocator * m_allocator)"},
	 { "b2ContactManager_allocator_get", _wrap_b2ContactManager_allocator_get, METH_O, "b2ContactManager_allocator_get(b2ContactManager self) -> b2BlockAllocator *"},
	 { "b2ContactManager___hash__", _wrap_b2ContactManager___hash__, METH_O, "__hash__(b2ContactManager self) -> long"},
	 { "delete_b2ContactManager", _wrap_delete_b2ContactManager, METH_O, "delete_b2ContactManager(b2ContactManager self)"},
	 { "b2ContactManager_swigregister", b2ContactManager_swigregister, METH_O, NULL},
	 { "b2ContactManager_swiginit", b2ContactManager_swiginit, METH_VARARGS, NULL},
	 { "new_b2World", (PyCFunction)(void(*)(void))_wrap_new_b2World, METH_VARARGS|METH_KEYWORDS, "\n"
		"new_b2World(b2Vec2 gravity) -> b2World\n"
		"Construct a world object.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gravity: \n"
		"the world gravity vector.\n"
		"\n"
		"doSleep: \n"
		"improve performance by not simulating inactive bodies.\n"
		""},
	 { "delete_b2World", _wrap_delete_b2World, METH_O, "\n"
		"delete_b2World(b2World self)\n"
		"Destruct the world. All physics entities are destroyed and all heap memory is released.\n"
		""},
	 { "b2World___SetDestructionListener_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetDestructionListener_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetDestructionListener_internal(b2World self, b2DestructionListener listener)\n"
		"Register a destruction listener. The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetContactFilter_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetContactFilter_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetContactFilter_internal(b2World self, b2ContactFilter filter)\n"
		"Register a contact filter to provide specific control over collision. Otherwise the default filter is used (b2_defaultFilter). The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetContactListener_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetContactListener_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetContactListener_internal(b2World self, b2ContactListener listener)\n"
		"Register a contact event listener. The listener is owned by you and must remain in scope.\n"
		""},
	 { "b2World___SetDebugDraw_internal", (PyCFunction)(void(*)(void))_wrap_b2World___SetDebugDraw_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetDebugDraw_internal(b2World self, b2Draw debugDraw)\n"
		"Register a routine for debug drawing. The debug draw functions are called inside with  b2World::DrawDebugDatamethod. The debug draw object is owned by you and must remain in scope.\n"
		""},
	 { "b2World_Step", (PyCFunction)(void(*)(void))_wrap_b2World_Step, METH_VARARGS|METH_KEYWORDS, "\n"
		"Step(b2World self, float32 timeStep, int32 velocityIterations, int32 positionIterations)\n"
		"Take a time step. This performs collision detection, integration, and constraint solution.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"timeStep: \n"
		"the amount of time to simulate, this should not vary.\n"
		"\n"
		"velocityIterations: \n"
		"for the velocity constraint solver.\n"
		"\n"
		"positionIterations: \n"
		"for the position constraint solver.\n"
		""},
	 { "b2World_ClearForces", _wrap_b2World_ClearForces, METH_O, "\n"
		"ClearForces(b2World self)\n"
		"Manually clear the force buffer on all bodies. By default, forces are cleared automatically after each call to Step. The default behavior is modified by calling SetAutoClearForces. The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain a fixed sized time step under a variable frame-rate. When you perform sub-stepping you will disable auto clearing of forces and instead call ClearForces after all sub-steps are complete in one pass of your game loop. \n"
		"See: \n"
		" SetAutoClearForces\n"
		""},
	 { "b2World_DrawDebugData", _wrap_b2World_DrawDebugData, METH_O, "\n"
		"DrawDebugData(b2World self)\n"
		"Call this to draw shapes and other debug draw data.\n"
		""},
	 { "b2World_QueryAABB", (PyCFunction)(void(*)(void))_wrap_b2World_QueryAABB, METH_VARARGS|METH_KEYWORDS, "\n"
		"QueryAABB(b2World self, b2QueryCallback callback, b2AABB aabb)\n"
		"Query the world for all fixtures that potentially overlap the provided AABB.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"callback: \n"
		"a user implemented callback class.\n"
		"\n"
		"aabb: \n"
		"the query box.\n"
		""},
	 { "b2World_RayCast", (PyCFunction)(void(*)(void))_wrap_b2World_RayCast, METH_VARARGS|METH_KEYWORDS, "\n"
		"RayCast(b2World self, b2RayCastCallback callback, b2Vec2 point1, b2Vec2 point2)\n"
		"Ray-cast the world for all fixtures in the path of the ray. Your callback controls whether you get the closest point, any point, or n-points. The ray-cast ignores shapes that contain the starting point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"callback: \n"
		"a user implemented callback class.\n"
		"\n"
		"point1: \n"
		"the ray starting point\n"
		"\n"
		"point2: \n"
		"the ray ending point\n"
		""},
	 { "b2World___GetBodyList_internal", _wrap_b2World___GetBodyList_internal, METH_VARARGS, "\n"
		"__GetBodyList_internal(b2World self) -> b2Body\n"
		"__GetBodyList_internal(b2World self) -> b2Body\n"
		"Get the world body list. With the returned body, use  b2Body::GetNextto get the next body in the world list. A NULL body indicates the end of the list. \n"
		"the head of the world body list.\n"
		""},
	 { "b2World___GetJointList_internal", _wrap_b2World___GetJointList_internal, METH_VARARGS, "\n"
		"__GetJointList_internal(b2World self) -> b2Joint\n"
		"__GetJointList_internal(b2World self) -> b2Joint\n"
		"Get the world joint list. With the returned joint, use  b2Joint::GetNextto get the next joint in the world list. A NULL joint indicates the end of the list. \n"
		"the head of the world joint list.\n"
		""},
	 { "b2World___GetContactList_internal", _wrap_b2World___GetContactList_internal, METH_VARARGS, "\n"
		"__GetContactList_internal(b2World self) -> b2Contact\n"
		"__GetContactList_internal(b2World self) -> b2Contact\n"
		"Get the world contact list. With the returned contact, use  b2Contact::GetNextto get the next contact in the world list. A NULL contact indicates the end of the list. \n"
		"the head of the world contact list.\n"
		"\n"
		"WARNING: \n"
		"contacts are\n"
		""},
	 { "b2World_SetAllowSleeping", (PyCFunction)(void(*)(void))_wrap_b2World_SetAllowSleeping, METH_VARARGS|METH_KEYWORDS, "SetAllowSleeping(b2World self, bool flag)"},
	 { "b2World_GetAllowSleeping", _wrap_b2World_GetAllowSleeping, METH_O, "GetAllowSleeping(b2World self) -> bool"},
	 { "b2World___SetWarmStarting", (PyCFunction)(void(*)(void))_wrap_b2World___SetWarmStarting, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetWarmStarting(b2World self, bool flag)\n"
		"Enable/disable warm starting. For testing.\n"
		""},
	 { "b2World___GetWarmStarting", _wrap_b2World___GetWarmStarting, METH_O, "__GetWarmStarting(b2World self) -> bool"},
	 { "b2World___SetContinuousPhysics", (PyCFunction)(void(*)(void))_wrap_b2World___SetContinuousPhysics, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetContinuousPhysics(b2World self, bool flag)\n"
		"Enable/disable continuous physics. For testing.\n"
		""},
	 { "b2World___GetContinuousPhysics", _wrap_b2World___GetContinuousPhysics, METH_O, "__GetContinuousPhysics(b2World self) -> bool"},
	 { "b2World___SetSubStepping", (PyCFunction)(void(*)(void))_wrap_b2World___SetSubStepping, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetSubStepping(b2World self, bool flag)\n"
		"Enable/disable single stepped continuous physics. For testing.\n"
		""},
	 { "b2World___GetSubStepping", _wrap_b2World___GetSubStepping, METH_O, "__GetSubStepping(b2World self) -> bool"},
	 { "b2World___GetProxyCount", _wrap_b2World___GetProxyCount, METH_O, "\n"
		"__GetProxyCount(b2World self) -> int32\n"
		"Get the number of broad-phase proxies.\n"
		""},
	 { "b2World___GetBodyCount", _wrap_b2World___GetBodyCount, METH_O, "\n"
		"__GetBodyCount(b2World self) -> int32\n"
		"Get the number of bodies.\n"
		""},
	 { "b2World___GetJointCount", _wrap_b2World___GetJointCount, METH_O, "\n"
		"__GetJointCount(b2World self) -> int32\n"
		"Get the number of joints.\n"
		""},
	 { "b2World___GetContactCount", _wrap_b2World___GetContactCount, METH_O, "\n"
		"__GetContactCount(b2World self) -> int32\n"
		"Get the number of contacts (each may have 0 or more contact points).\n"
		""},
	 { "b2World_GetTreeHeight", _wrap_b2World_GetTreeHeight, METH_O, "GetTreeHeight(b2World self) -> int32"},
	 { "b2World_GetTreeBalance", _wrap_b2World_GetTreeBalance, METH_O, "GetTreeBalance(b2World self) -> int32"},
	 { "b2World_GetTreeQuality", _wrap_b2World_GetTreeQuality, METH_O, "GetTreeQuality(b2World self) -> float32"},
	 { "b2World___SetGravity", (PyCFunction)(void(*)(void))_wrap_b2World___SetGravity, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetGravity(b2World self, b2Vec2 gravity)\n"
		"Change the global gravity vector.\n"
		""},
	 { "b2World___GetGravity", _wrap_b2World___GetGravity, METH_O, "\n"
		"__GetGravity(b2World self) -> b2Vec2\n"
		"Get the global gravity vector.\n"
		""},
	 { "b2World___IsLocked", _wrap_b2World___IsLocked, METH_O, "\n"
		"__IsLocked(b2World self) -> bool\n"
		"Is the world locked (in the middle of a time step).\n"
		""},
	 { "b2World___SetAutoClearForces", (PyCFunction)(void(*)(void))_wrap_b2World___SetAutoClearForces, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetAutoClearForces(b2World self, bool flag)\n"
		"Set flag to control automatic clearing of forces after each time step.\n"
		""},
	 { "b2World___GetAutoClearForces", _wrap_b2World___GetAutoClearForces, METH_O, "\n"
		"__GetAutoClearForces(b2World self) -> bool\n"
		"Get the flag that controls automatic clearing of forces after each time step.\n"
		""},
	 { "b2World_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2World_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "ShiftOrigin(b2World self, b2Vec2 newOrigin)"},
	 { "b2World___GetContactManager", _wrap_b2World___GetContactManager, METH_O, "\n"
		"__GetContactManager(b2World self) -> b2ContactManager\n"
		"Get the contact manager for testing.\n"
		""},
	 { "b2World_GetProfile", _wrap_b2World_GetProfile, METH_O, "GetProfile(b2World self) -> b2Profile"},
	 { "b2World_Dump", _wrap_b2World_Dump, METH_O, "Dump(b2World self)"},
	 { "b2World___hash__", _wrap_b2World___hash__, METH_O, "__hash__(b2World self) -> long"},
	 { "b2World___CreateBody", (PyCFunction)(void(*)(void))_wrap_b2World___CreateBody, METH_VARARGS|METH_KEYWORDS, "__CreateBody(b2World self, b2BodyDef defn) -> b2Body"},
	 { "b2World___CreateJoint", (PyCFunction)(void(*)(void))_wrap_b2World___CreateJoint, METH_VARARGS|METH_KEYWORDS, "__CreateJoint(b2World self, b2JointDef defn) -> b2Joint"},
	 { "b2World_DestroyBody", (PyCFunction)(void(*)(void))_wrap_b2World_DestroyBody, METH_VARARGS|METH_KEYWORDS, "\n"
		"DestroyBody(b2World self, b2Body body)\n"
		"Destroy a rigid body given a definition. No reference to the definition is retained. This function is locked during callbacks. \n"
		"WARNING: \n"
		"This automatically deletes all associated shapes and joints. \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2World_DestroyJoint", (PyCFunction)(void(*)(void))_wrap_b2World_DestroyJoint, METH_VARARGS|METH_KEYWORDS, "\n"
		"DestroyJoint(b2World self, b2Joint joint)\n"
		"Destroy a joint. This may cause the connected bodies to begin colliding. \n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { "b2World_swigregister", b2World_swigregister, METH_O, NULL},
	 { "b2World_swiginit", b2World_swiginit, METH_VARARGS, NULL},
	 { "b2MixFriction", (PyCFunction)(void(*)(void))_wrap_b2MixFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MixFriction(float32 friction1, float32 friction2) -> float32\n"
		"Friction mixing law. Feel free to customize this.\n"
		""},
	 { "b2MixRestitution", (PyCFunction)(void(*)(void))_wrap_b2MixRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"b2MixRestitution(float32 restitution1, float32 restitution2) -> float32\n"
		"Restitution mixing law. Feel free to customize this.\n"
		""},
	 { "b2ContactEdge_other_set", _wrap_b2ContactEdge_other_set, METH_VARARGS, "b2ContactEdge_other_set(b2ContactEdge self, b2Body other)"},
	 { "b2ContactEdge_other_get", _wrap_b2ContactEdge_other_get, METH_O, "b2ContactEdge_other_get(b2ContactEdge self) -> b2Body"},
	 { "b2ContactEdge_contact_set", _wrap_b2ContactEdge_contact_set, METH_VARARGS, "b2ContactEdge_contact_set(b2ContactEdge self, b2Contact contact)"},
	 { "b2ContactEdge_contact_get", _wrap_b2ContactEdge_contact_get, METH_O, "b2ContactEdge_contact_get(b2ContactEdge self) -> b2Contact"},
	 { "b2ContactEdge_prev_set", _wrap_b2ContactEdge_prev_set, METH_VARARGS, "b2ContactEdge_prev_set(b2ContactEdge self, b2ContactEdge prev)"},
	 { "b2ContactEdge_prev_get", _wrap_b2ContactEdge_prev_get, METH_O, "b2ContactEdge_prev_get(b2ContactEdge self) -> b2ContactEdge"},
	 { "b2ContactEdge_next_set", _wrap_b2ContactEdge_next_set, METH_VARARGS, "b2ContactEdge_next_set(b2ContactEdge self, b2ContactEdge next)"},
	 { "b2ContactEdge_next_get", _wrap_b2ContactEdge_next_get, METH_O, "b2ContactEdge_next_get(b2ContactEdge self) -> b2ContactEdge"},
	 { "b2ContactEdge___hash__", _wrap_b2ContactEdge___hash__, METH_O, "__hash__(b2ContactEdge self) -> long"},
	 { "new_b2ContactEdge", _wrap_new_b2ContactEdge, METH_NOARGS, "\n"
		"new_b2ContactEdge() -> b2ContactEdge\n"
		"A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each contact has two contact nodes, one for each attached body.\n"
		""},
	 { "delete_b2ContactEdge", _wrap_delete_b2ContactEdge, METH_O, "delete_b2ContactEdge(b2ContactEdge self)"},
	 { "b2ContactEdge_swigregister", b2ContactEdge_swigregister, METH_O, NULL},
	 { "b2ContactEdge_swiginit", b2ContactEdge_swiginit, METH_VARARGS, NULL},
	 { "b2Contact___GetManifold", _wrap_b2Contact___GetManifold, METH_VARARGS, "\n"
		"__GetManifold(b2Contact self) -> b2Manifold\n"
		"__GetManifold(b2Contact self) -> b2Manifold\n"
		"Get the contact manifold. Do not modify the manifold unless you understand the internals of Box2D.\n"
		""},
	 { "b2Contact___GetWorldManifold_internal", (PyCFunction)(void(*)(void))_wrap_b2Contact___GetWorldManifold_internal, METH_VARARGS|METH_KEYWORDS, "\n"
		"__GetWorldManifold_internal(b2Contact self, b2WorldManifold worldManifold)\n"
		"Get the world manifold.\n"
		""},
	 { "b2Contact___IsTouching", _wrap_b2Contact___IsTouching, METH_O, "\n"
		"__IsTouching(b2Contact self) -> bool\n"
		"Is this contact touching?\n"
		""},
	 { "b2Contact___SetEnabled", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetEnabled, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetEnabled(b2Contact self, bool flag)\n"
		"Enable/disable this contact. This can be used inside the pre-solve contact listener. The contact is only disabled for the current time step (or sub-step in continuous collisions).\n"
		""},
	 { "b2Contact___IsEnabled", _wrap_b2Contact___IsEnabled, METH_O, "\n"
		"__IsEnabled(b2Contact self) -> bool\n"
		"Has this contact been disabled?\n"
		""},
	 { "b2Contact___GetNext", _wrap_b2Contact___GetNext, METH_VARARGS, "\n"
		"__GetNext(b2Contact self) -> b2Contact\n"
		"__GetNext(b2Contact self) -> b2Contact\n"
		"Get the next contact in the world's contact list.\n"
		""},
	 { "b2Contact___GetFixtureA", _wrap_b2Contact___GetFixtureA, METH_VARARGS, "\n"
		"__GetFixtureA(b2Contact self) -> b2Fixture\n"
		"__GetFixtureA(b2Contact self) -> b2Fixture\n"
		"Get fixture A in this contact.\n"
		""},
	 { "b2Contact___GetChildIndexA", _wrap_b2Contact___GetChildIndexA, METH_O, "\n"
		"__GetChildIndexA(b2Contact self) -> int32\n"
		"Get the child primitive index for fixture A.\n"
		""},
	 { "b2Contact___GetFixtureB", _wrap_b2Contact___GetFixtureB, METH_VARARGS, "\n"
		"__GetFixtureB(b2Contact self) -> b2Fixture\n"
		"__GetFixtureB(b2Contact self) -> b2Fixture\n"
		"Get fixture B in this contact.\n"
		""},
	 { "b2Contact___GetChildIndexB", _wrap_b2Contact___GetChildIndexB, METH_O, "\n"
		"__GetChildIndexB(b2Contact self) -> int32\n"
		"Get the child primitive index for fixture B.\n"
		""},
	 { "b2Contact___SetFriction", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetFriction, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFriction(b2Contact self, float32 friction)\n"
		"Override the default friction mixture. You can call this in  b2ContactListener::PreSolve. This value persists until set or reset.\n"
		""},
	 { "b2Contact___GetFriction", _wrap_b2Contact___GetFriction, METH_O, "\n"
		"__GetFriction(b2Contact self) -> float32\n"
		"Get the friction.\n"
		""},
	 { "b2Contact_ResetFriction", _wrap_b2Contact_ResetFriction, METH_O, "\n"
		"ResetFriction(b2Contact self)\n"
		"Reset the friction mixture to the default value.\n"
		""},
	 { "b2Contact___SetRestitution", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetRestitution, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetRestitution(b2Contact self, float32 restitution)\n"
		"Override the default restitution mixture. You can call this in  b2ContactListener::PreSolve. The value persists until you set or reset.\n"
		""},
	 { "b2Contact___GetRestitution", _wrap_b2Contact___GetRestitution, METH_O, "\n"
		"__GetRestitution(b2Contact self) -> float32\n"
		"Get the restitution.\n"
		""},
	 { "b2Contact_ResetRestitution", _wrap_b2Contact_ResetRestitution, METH_O, "\n"
		"ResetRestitution(b2Contact self)\n"
		"Reset the restitution to the default value.\n"
		""},
	 { "b2Contact___SetTangentSpeed", (PyCFunction)(void(*)(void))_wrap_b2Contact___SetTangentSpeed, METH_VARARGS|METH_KEYWORDS, "__SetTangentSpeed(b2Contact self, float32 speed)"},
	 { "b2Contact___GetTangentSpeed", _wrap_b2Contact___GetTangentSpeed, METH_O, "__GetTangentSpeed(b2Contact self) -> float32"},
	 { "b2Contact_Evaluate", (PyCFunction)(void(*)(void))_wrap_b2Contact_Evaluate, METH_VARARGS|METH_KEYWORDS, "\n"
		"Evaluate(b2Contact self, b2Manifold manifold, b2Transform xfA, b2Transform xfB)\n"
		"Evaluate this contact with your own manifold and transforms.\n"
		""},
	 { "b2Contact___hash__", _wrap_b2Contact___hash__, METH_O, "__hash__(b2Contact self) -> long"},
	 { "b2Contact_swigregister", b2Contact_swigregister, METH_O, NULL},
	 { "b2Jacobian_linear_set", _wrap_b2Jacobian_linear_set, METH_VARARGS, "b2Jacobian_linear_set(b2Jacobian self, b2Vec2 linear)"},
	 { "b2Jacobian_linear_get", _wrap_b2Jacobian_linear_get, METH_O, "b2Jacobian_linear_get(b2Jacobian self) -> b2Vec2"},
	 { "b2Jacobian_angularA_set", _wrap_b2Jacobian_angularA_set, METH_VARARGS, "b2Jacobian_angularA_set(b2Jacobian self, float32 angularA)"},
	 { "b2Jacobian_angularA_get", _wrap_b2Jacobian_angularA_get, METH_O, "b2Jacobian_angularA_get(b2Jacobian self) -> float32"},
	 { "b2Jacobian_angularB_set", _wrap_b2Jacobian_angularB_set, METH_VARARGS, "b2Jacobian_angularB_set(b2Jacobian self, float32 angularB)"},
	 { "b2Jacobian_angularB_get", _wrap_b2Jacobian_angularB_get, METH_O, "b2Jacobian_angularB_get(b2Jacobian self) -> float32"},
	 { "b2Jacobian___hash__", _wrap_b2Jacobian___hash__, METH_O, "__hash__(b2Jacobian self) -> long"},
	 { "new_b2Jacobian", _wrap_new_b2Jacobian, METH_NOARGS, "new_b2Jacobian() -> b2Jacobian"},
	 { "delete_b2Jacobian", _wrap_delete_b2Jacobian, METH_O, "delete_b2Jacobian(b2Jacobian self)"},
	 { "b2Jacobian_swigregister", b2Jacobian_swigregister, METH_O, NULL},
	 { "b2Jacobian_swiginit", b2Jacobian_swiginit, METH_VARARGS, NULL},
	 { "b2JointEdge_other_set", _wrap_b2JointEdge_other_set, METH_VARARGS, "b2JointEdge_other_set(b2JointEdge self, b2Body other)"},
	 { "b2JointEdge_other_get", _wrap_b2JointEdge_other_get, METH_O, "b2JointEdge_other_get(b2JointEdge self) -> b2Body"},
	 { "b2JointEdge_joint_set", _wrap_b2JointEdge_joint_set, METH_VARARGS, "b2JointEdge_joint_set(b2JointEdge self, b2Joint joint)"},
	 { "b2JointEdge_joint_get", _wrap_b2JointEdge_joint_get, METH_O, "b2JointEdge_joint_get(b2JointEdge self) -> b2Joint"},
	 { "b2JointEdge_prev_set", _wrap_b2JointEdge_prev_set, METH_VARARGS, "b2JointEdge_prev_set(b2JointEdge self, b2JointEdge prev)"},
	 { "b2JointEdge_prev_get", _wrap_b2JointEdge_prev_get, METH_O, "b2JointEdge_prev_get(b2JointEdge self) -> b2JointEdge"},
	 { "b2JointEdge_next_set", _wrap_b2JointEdge_next_set, METH_VARARGS, "b2JointEdge_next_set(b2JointEdge self, b2JointEdge next)"},
	 { "b2JointEdge_next_get", _wrap_b2JointEdge_next_get, METH_O, "b2JointEdge_next_get(b2JointEdge self) -> b2JointEdge"},
	 { "b2JointEdge___hash__", _wrap_b2JointEdge___hash__, METH_O, "__hash__(b2JointEdge self) -> long"},
	 { "new_b2JointEdge", _wrap_new_b2JointEdge, METH_NOARGS, "\n"
		"new_b2JointEdge() -> b2JointEdge\n"
		"A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two joint nodes, one for each attached body.\n"
		""},
	 { "delete_b2JointEdge", _wrap_delete_b2JointEdge, METH_O, "delete_b2JointEdge(b2JointEdge self)"},
	 { "b2JointEdge_swigregister", b2JointEdge_swigregister, METH_O, NULL},
	 { "b2JointEdge_swiginit", b2JointEdge_swiginit, METH_VARARGS, NULL},
	 { "new_b2JointDef", _wrap_new_b2JointDef, METH_NOARGS, "\n"
		"new_b2JointDef() -> b2JointDef\n"
		"Joint definitions are used to construct joints.\n"
		""},
	 { "b2JointDef_type_set", _wrap_b2JointDef_type_set, METH_VARARGS, "b2JointDef_type_set(b2JointDef self, b2JointType type)"},
	 { "b2JointDef_type_get", _wrap_b2JointDef_type_get, METH_O, "b2JointDef_type_get(b2JointDef self) -> b2JointType"},
	 { "b2JointDef_bodyA_set", _wrap_b2JointDef_bodyA_set, METH_VARARGS, "b2JointDef_bodyA_set(b2JointDef self, b2Body bodyA)"},
	 { "b2JointDef_bodyA_get", _wrap_b2JointDef_bodyA_get, METH_O, "b2JointDef_bodyA_get(b2JointDef self) -> b2Body"},
	 { "b2JointDef_bodyB_set", _wrap_b2JointDef_bodyB_set, METH_VARARGS, "b2JointDef_bodyB_set(b2JointDef self, b2Body bodyB)"},
	 { "b2JointDef_bodyB_get", _wrap_b2JointDef_bodyB_get, METH_O, "b2JointDef_bodyB_get(b2JointDef self) -> b2Body"},
	 { "b2JointDef_collideConnected_set", _wrap_b2JointDef_collideConnected_set, METH_VARARGS, "b2JointDef_collideConnected_set(b2JointDef self, bool collideConnected)"},
	 { "b2JointDef_collideConnected_get", _wrap_b2JointDef_collideConnected_get, METH_O, "b2JointDef_collideConnected_get(b2JointDef self) -> bool"},
	 { "b2JointDef___hash__", _wrap_b2JointDef___hash__, METH_O, "__hash__(b2JointDef self) -> long"},
	 { "b2JointDef___GetUserData", _wrap_b2JointDef___GetUserData, METH_O, "__GetUserData(b2JointDef self) -> PyObject *"},
	 { "b2JointDef___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2JointDef___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2JointDef self, PyObject * data)"},
	 { "b2JointDef_ClearUserData", _wrap_b2JointDef_ClearUserData, METH_O, "ClearUserData(b2JointDef self)"},
	 { "delete_b2JointDef", _wrap_delete_b2JointDef, METH_O, "delete_b2JointDef(b2JointDef self)"},
	 { "b2JointDef_swigregister", b2JointDef_swigregister, METH_O, NULL},
	 { "b2JointDef_swiginit", b2JointDef_swiginit, METH_VARARGS, NULL},
	 { "b2Joint___GetType", _wrap_b2Joint___GetType, METH_O, "\n"
		"__GetType(b2Joint self) -> b2JointType\n"
		"Get the type of the concrete joint.\n"
		""},
	 { "b2Joint___GetBodyA", _wrap_b2Joint___GetBodyA, METH_O, "\n"
		"__GetBodyA(b2Joint self) -> b2Body\n"
		"Get the first body attached to this joint.\n"
		""},
	 { "b2Joint___GetBodyB", _wrap_b2Joint___GetBodyB, METH_O, "\n"
		"__GetBodyB(b2Joint self) -> b2Body\n"
		"Get the second body attached to this joint.\n"
		""},
	 { "b2Joint___GetAnchorA", _wrap_b2Joint___GetAnchorA, METH_O, "\n"
		"__GetAnchorA(b2Joint self) -> b2Vec2\n"
		"Get the anchor point on bodyA in world coordinates.\n"
		""},
	 { "b2Joint___GetAnchorB", _wrap_b2Joint___GetAnchorB, METH_O, "\n"
		"__GetAnchorB(b2Joint self) -> b2Vec2\n"
		"Get the anchor point on bodyB in world coordinates.\n"
		""},
	 { "b2Joint_GetReactionForce", (PyCFunction)(void(*)(void))_wrap_b2Joint_GetReactionForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetReactionForce(b2Joint self, float32 inv_dt) -> b2Vec2\n"
		"Get the reaction force on body2 at the joint anchor in Newtons.\n"
		""},
	 { "b2Joint_GetReactionTorque", (PyCFunction)(void(*)(void))_wrap_b2Joint_GetReactionTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetReactionTorque(b2Joint self, float32 inv_dt) -> float32\n"
		"Get the reaction torque on body2 in N*m.\n"
		""},
	 { "b2Joint___GetNext", _wrap_b2Joint___GetNext, METH_VARARGS, "\n"
		"__GetNext(b2Joint self) -> b2Joint\n"
		"__GetNext(b2Joint self) -> b2Joint\n"
		"Get the next joint the world joint list.\n"
		""},
	 { "b2Joint___IsActive", _wrap_b2Joint___IsActive, METH_O, "\n"
		"__IsActive(b2Joint self) -> bool\n"
		"Short-cut function to determine if either body is inactive.\n"
		""},
	 { "b2Joint___GetCollideConnected", _wrap_b2Joint___GetCollideConnected, METH_O, "__GetCollideConnected(b2Joint self) -> bool"},
	 { "b2Joint_Dump", _wrap_b2Joint_Dump, METH_O, "Dump(b2Joint self)"},
	 { "b2Joint_ShiftOrigin", (PyCFunction)(void(*)(void))_wrap_b2Joint_ShiftOrigin, METH_VARARGS|METH_KEYWORDS, "ShiftOrigin(b2Joint self, b2Vec2 newOrigin)"},
	 { "b2Joint___hash__", _wrap_b2Joint___hash__, METH_O, "__hash__(b2Joint self) -> long"},
	 { "b2Joint___GetUserData", _wrap_b2Joint___GetUserData, METH_O, "__GetUserData(b2Joint self) -> PyObject *"},
	 { "b2Joint___SetUserData", (PyCFunction)(void(*)(void))_wrap_b2Joint___SetUserData, METH_VARARGS|METH_KEYWORDS, "__SetUserData(b2Joint self, PyObject * data)"},
	 { "b2Joint_ClearUserData", _wrap_b2Joint_ClearUserData, METH_O, "ClearUserData(b2Joint self)"},
	 { "b2Joint_swigregister", b2Joint_swigregister, METH_O, NULL},
	 { "new_b2DistanceJointDef", _wrap_new_b2DistanceJointDef, METH_NOARGS, "\n"
		"new_b2DistanceJointDef() -> b2DistanceJointDef\n"
		"Distance joint definition. This requires defining an anchor point on both bodies and the non-zero length of the distance joint. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. This helps when saving and loading a game. \n"
		"WARNING: \n"
		"Do not use a zero or short length.\n"
		""},
	 { "b2DistanceJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2DistanceJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2DistanceJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchorA, b2Vec2 anchorB)\n"
		"Initialize the bodies, anchors, and length using the world anchors.\n"
		""},
	 { "b2DistanceJointDef_localAnchorA_set", _wrap_b2DistanceJointDef_localAnchorA_set, METH_VARARGS, "b2DistanceJointDef_localAnchorA_set(b2DistanceJointDef self, b2Vec2 localAnchorA)"},
	 { "b2DistanceJointDef_localAnchorA_get", _wrap_b2DistanceJointDef_localAnchorA_get, METH_O, "b2DistanceJointDef_localAnchorA_get(b2DistanceJointDef self) -> b2Vec2"},
	 { "b2DistanceJointDef_localAnchorB_set", _wrap_b2DistanceJointDef_localAnchorB_set, METH_VARARGS, "b2DistanceJointDef_localAnchorB_set(b2DistanceJointDef self, b2Vec2 localAnchorB)"},
	 { "b2DistanceJointDef_localAnchorB_get", _wrap_b2DistanceJointDef_localAnchorB_get, METH_O, "b2DistanceJointDef_localAnchorB_get(b2DistanceJointDef self) -> b2Vec2"},
	 { "b2DistanceJointDef_length_set", _wrap_b2DistanceJointDef_length_set, METH_VARARGS, "b2DistanceJointDef_length_set(b2DistanceJointDef self, float32 length)"},
	 { "b2DistanceJointDef_length_get", _wrap_b2DistanceJointDef_length_get, METH_O, "b2DistanceJointDef_length_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef_frequencyHz_set", _wrap_b2DistanceJointDef_frequencyHz_set, METH_VARARGS, "b2DistanceJointDef_frequencyHz_set(b2DistanceJointDef self, float32 frequencyHz)"},
	 { "b2DistanceJointDef_frequencyHz_get", _wrap_b2DistanceJointDef_frequencyHz_get, METH_O, "b2DistanceJointDef_frequencyHz_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef_dampingRatio_set", _wrap_b2DistanceJointDef_dampingRatio_set, METH_VARARGS, "b2DistanceJointDef_dampingRatio_set(b2DistanceJointDef self, float32 dampingRatio)"},
	 { "b2DistanceJointDef_dampingRatio_get", _wrap_b2DistanceJointDef_dampingRatio_get, METH_O, "b2DistanceJointDef_dampingRatio_get(b2DistanceJointDef self) -> float32"},
	 { "b2DistanceJointDef___hash__", _wrap_b2DistanceJointDef___hash__, METH_O, "__hash__(b2DistanceJointDef self) -> long"},
	 { "delete_b2DistanceJointDef", _wrap_delete_b2DistanceJointDef, METH_O, "delete_b2DistanceJointDef(b2DistanceJointDef self)"},
	 { "b2DistanceJointDef_swigregister", b2DistanceJointDef_swigregister, METH_O, NULL},
	 { "b2DistanceJointDef_swiginit", b2DistanceJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2DistanceJoint_GetLocalAnchorA", _wrap_b2DistanceJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2DistanceJoint self) -> b2Vec2"},
	 { "b2DistanceJoint_GetLocalAnchorB", _wrap_b2DistanceJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2DistanceJoint self) -> b2Vec2"},
	 { "b2DistanceJoint___SetLength", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetLength, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetLength(b2DistanceJoint self, float32 length)\n"
		"Set/get the natural length. Manipulating the length can lead to non-physical behavior when the frequency is zero.\n"
		""},
	 { "b2DistanceJoint___GetLength", _wrap_b2DistanceJoint___GetLength, METH_O, "__GetLength(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetFrequency, METH_VARARGS|METH_KEYWORDS, "__SetFrequency(b2DistanceJoint self, float32 hz)"},
	 { "b2DistanceJoint___GetFrequency", _wrap_b2DistanceJoint___GetFrequency, METH_O, "__GetFrequency(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2DistanceJoint___SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "__SetDampingRatio(b2DistanceJoint self, float32 ratio)"},
	 { "b2DistanceJoint___GetDampingRatio", _wrap_b2DistanceJoint___GetDampingRatio, METH_O, "__GetDampingRatio(b2DistanceJoint self) -> float32"},
	 { "b2DistanceJoint___hash__", _wrap_b2DistanceJoint___hash__, METH_O, "__hash__(b2DistanceJoint self) -> long"},
	 { "delete_b2DistanceJoint", _wrap_delete_b2DistanceJoint, METH_O, "delete_b2DistanceJoint(b2DistanceJoint self)"},
	 { "b2DistanceJoint_swigregister", b2DistanceJoint_swigregister, METH_O, NULL},
	 { "new_b2FrictionJointDef", _wrap_new_b2FrictionJointDef, METH_NOARGS, "\n"
		"new_b2FrictionJointDef() -> b2FrictionJointDef\n"
		"Friction joint definition.\n"
		""},
	 { "b2FrictionJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2FrictionJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2FrictionJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2FrictionJointDef_localAnchorA_set", _wrap_b2FrictionJointDef_localAnchorA_set, METH_VARARGS, "b2FrictionJointDef_localAnchorA_set(b2FrictionJointDef self, b2Vec2 localAnchorA)"},
	 { "b2FrictionJointDef_localAnchorA_get", _wrap_b2FrictionJointDef_localAnchorA_get, METH_O, "b2FrictionJointDef_localAnchorA_get(b2FrictionJointDef self) -> b2Vec2"},
	 { "b2FrictionJointDef_localAnchorB_set", _wrap_b2FrictionJointDef_localAnchorB_set, METH_VARARGS, "b2FrictionJointDef_localAnchorB_set(b2FrictionJointDef self, b2Vec2 localAnchorB)"},
	 { "b2FrictionJointDef_localAnchorB_get", _wrap_b2FrictionJointDef_localAnchorB_get, METH_O, "b2FrictionJointDef_localAnchorB_get(b2FrictionJointDef self) -> b2Vec2"},
	 { "b2FrictionJointDef_maxForce_set", _wrap_b2FrictionJointDef_maxForce_set, METH_VARARGS, "b2FrictionJointDef_maxForce_set(b2FrictionJointDef self, float32 maxForce)"},
	 { "b2FrictionJointDef_maxForce_get", _wrap_b2FrictionJointDef_maxForce_get, METH_O, "b2FrictionJointDef_maxForce_get(b2FrictionJointDef self) -> float32"},
	 { "b2FrictionJointDef_maxTorque_set", _wrap_b2FrictionJointDef_maxTorque_set, METH_VARARGS, "b2FrictionJointDef_maxTorque_set(b2FrictionJointDef self, float32 maxTorque)"},
	 { "b2FrictionJointDef_maxTorque_get", _wrap_b2FrictionJointDef_maxTorque_get, METH_O, "b2FrictionJointDef_maxTorque_get(b2FrictionJointDef self) -> float32"},
	 { "b2FrictionJointDef___hash__", _wrap_b2FrictionJointDef___hash__, METH_O, "__hash__(b2FrictionJointDef self) -> long"},
	 { "delete_b2FrictionJointDef", _wrap_delete_b2FrictionJointDef, METH_O, "delete_b2FrictionJointDef(b2FrictionJointDef self)"},
	 { "b2FrictionJointDef_swigregister", b2FrictionJointDef_swigregister, METH_O, NULL},
	 { "b2FrictionJointDef_swiginit", b2FrictionJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2FrictionJoint_GetLocalAnchorA", _wrap_b2FrictionJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2FrictionJoint self) -> b2Vec2"},
	 { "b2FrictionJoint_GetLocalAnchorB", _wrap_b2FrictionJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2FrictionJoint self) -> b2Vec2"},
	 { "b2FrictionJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2FrictionJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxForce(b2FrictionJoint self, float32 force)\n"
		"Set the maximum friction force in N.\n"
		""},
	 { "b2FrictionJoint___GetMaxForce", _wrap_b2FrictionJoint___GetMaxForce, METH_O, "\n"
		"__GetMaxForce(b2FrictionJoint self) -> float32\n"
		"Get the maximum friction force in N.\n"
		""},
	 { "b2FrictionJoint___SetMaxTorque", (PyCFunction)(void(*)(void))_wrap_b2FrictionJoint___SetMaxTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxTorque(b2FrictionJoint self, float32 torque)\n"
		"Set the maximum friction torque in N*m.\n"
		""},
	 { "b2FrictionJoint___GetMaxTorque", _wrap_b2FrictionJoint___GetMaxTorque, METH_O, "\n"
		"__GetMaxTorque(b2FrictionJoint self) -> float32\n"
		"Get the maximum friction torque in N*m.\n"
		""},
	 { "b2FrictionJoint___hash__", _wrap_b2FrictionJoint___hash__, METH_O, "__hash__(b2FrictionJoint self) -> long"},
	 { "delete_b2FrictionJoint", _wrap_delete_b2FrictionJoint, METH_O, "delete_b2FrictionJoint(b2FrictionJoint self)"},
	 { "b2FrictionJoint_swigregister", b2FrictionJoint_swigregister, METH_O, NULL},
	 { "new_b2GearJointDef", _wrap_new_b2GearJointDef, METH_NOARGS, "\n"
		"new_b2GearJointDef() -> b2GearJointDef\n"
		"Gear joint definition. This definition requires two existing revolute or prismatic joints (any combination will work). The provided joints must attach a dynamic body to a static body.\n"
		""},
	 { "b2GearJointDef_joint1_set", _wrap_b2GearJointDef_joint1_set, METH_VARARGS, "b2GearJointDef_joint1_set(b2GearJointDef self, b2Joint joint1)"},
	 { "b2GearJointDef_joint1_get", _wrap_b2GearJointDef_joint1_get, METH_O, "b2GearJointDef_joint1_get(b2GearJointDef self) -> b2Joint"},
	 { "b2GearJointDef_joint2_set", _wrap_b2GearJointDef_joint2_set, METH_VARARGS, "b2GearJointDef_joint2_set(b2GearJointDef self, b2Joint joint2)"},
	 { "b2GearJointDef_joint2_get", _wrap_b2GearJointDef_joint2_get, METH_O, "b2GearJointDef_joint2_get(b2GearJointDef self) -> b2Joint"},
	 { "b2GearJointDef_ratio_set", _wrap_b2GearJointDef_ratio_set, METH_VARARGS, "b2GearJointDef_ratio_set(b2GearJointDef self, float32 ratio)"},
	 { "b2GearJointDef_ratio_get", _wrap_b2GearJointDef_ratio_get, METH_O, "b2GearJointDef_ratio_get(b2GearJointDef self) -> float32"},
	 { "b2GearJointDef___hash__", _wrap_b2GearJointDef___hash__, METH_O, "__hash__(b2GearJointDef self) -> long"},
	 { "delete_b2GearJointDef", _wrap_delete_b2GearJointDef, METH_O, "delete_b2GearJointDef(b2GearJointDef self)"},
	 { "b2GearJointDef_swigregister", b2GearJointDef_swigregister, METH_O, NULL},
	 { "b2GearJointDef_swiginit", b2GearJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2GearJoint_GetJoint1", _wrap_b2GearJoint_GetJoint1, METH_O, "GetJoint1(b2GearJoint self) -> b2Joint"},
	 { "b2GearJoint_GetJoint2", _wrap_b2GearJoint_GetJoint2, METH_O, "GetJoint2(b2GearJoint self) -> b2Joint"},
	 { "b2GearJoint___SetRatio", (PyCFunction)(void(*)(void))_wrap_b2GearJoint___SetRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetRatio(b2GearJoint self, float32 ratio)\n"
		"Set/Get the gear ratio.\n"
		""},
	 { "b2GearJoint___GetRatio", _wrap_b2GearJoint___GetRatio, METH_O, "__GetRatio(b2GearJoint self) -> float32"},
	 { "b2GearJoint___hash__", _wrap_b2GearJoint___hash__, METH_O, "__hash__(b2GearJoint self) -> long"},
	 { "delete_b2GearJoint", _wrap_delete_b2GearJoint, METH_O, "delete_b2GearJoint(b2GearJoint self)"},
	 { "b2GearJoint_swigregister", b2GearJoint_swigregister, METH_O, NULL},
	 { "new_b2MotorJointDef", _wrap_new_b2MotorJointDef, METH_NOARGS, "new_b2MotorJointDef() -> b2MotorJointDef"},
	 { "b2MotorJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2MotorJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "Initialize(b2MotorJointDef self, b2Body bodyA, b2Body bodyB)"},
	 { "b2MotorJointDef_linearOffset_set", _wrap_b2MotorJointDef_linearOffset_set, METH_VARARGS, "b2MotorJointDef_linearOffset_set(b2MotorJointDef self, b2Vec2 linearOffset)"},
	 { "b2MotorJointDef_linearOffset_get", _wrap_b2MotorJointDef_linearOffset_get, METH_O, "b2MotorJointDef_linearOffset_get(b2MotorJointDef self) -> b2Vec2"},
	 { "b2MotorJointDef_angularOffset_set", _wrap_b2MotorJointDef_angularOffset_set, METH_VARARGS, "b2MotorJointDef_angularOffset_set(b2MotorJointDef self, float32 angularOffset)"},
	 { "b2MotorJointDef_angularOffset_get", _wrap_b2MotorJointDef_angularOffset_get, METH_O, "b2MotorJointDef_angularOffset_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_maxForce_set", _wrap_b2MotorJointDef_maxForce_set, METH_VARARGS, "b2MotorJointDef_maxForce_set(b2MotorJointDef self, float32 maxForce)"},
	 { "b2MotorJointDef_maxForce_get", _wrap_b2MotorJointDef_maxForce_get, METH_O, "b2MotorJointDef_maxForce_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_maxTorque_set", _wrap_b2MotorJointDef_maxTorque_set, METH_VARARGS, "b2MotorJointDef_maxTorque_set(b2MotorJointDef self, float32 maxTorque)"},
	 { "b2MotorJointDef_maxTorque_get", _wrap_b2MotorJointDef_maxTorque_get, METH_O, "b2MotorJointDef_maxTorque_get(b2MotorJointDef self) -> float32"},
	 { "b2MotorJointDef_correctionFactor_set", _wrap_b2MotorJointDef_correctionFactor_set, METH_VARARGS, "b2MotorJointDef_correctionFactor_set(b2MotorJointDef self, float32 correctionFactor)"},
	 { "b2MotorJointDef_correctionFactor_get", _wrap_b2MotorJointDef_correctionFactor_get, METH_O, "b2MotorJointDef_correctionFactor_get(b2MotorJointDef self) -> float32"},
	 { "delete_b2MotorJointDef", _wrap_delete_b2MotorJointDef, METH_O, "delete_b2MotorJointDef(b2MotorJointDef self)"},
	 { "b2MotorJointDef_swigregister", b2MotorJointDef_swigregister, METH_O, NULL},
	 { "b2MotorJointDef_swiginit", b2MotorJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2MotorJoint___SetLinearOffset", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetLinearOffset, METH_VARARGS|METH_KEYWORDS, "__SetLinearOffset(b2MotorJoint self, b2Vec2 linearOffset)"},
	 { "b2MotorJoint___GetLinearOffset", _wrap_b2MotorJoint___GetLinearOffset, METH_O, "__GetLinearOffset(b2MotorJoint self) -> b2Vec2"},
	 { "b2MotorJoint___SetAngularOffset", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetAngularOffset, METH_VARARGS|METH_KEYWORDS, "__SetAngularOffset(b2MotorJoint self, float32 angularOffset)"},
	 { "b2MotorJoint___GetAngularOffset", _wrap_b2MotorJoint___GetAngularOffset, METH_O, "__GetAngularOffset(b2MotorJoint self) -> float32"},
	 { "b2MotorJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "__SetMaxForce(b2MotorJoint self, float32 force)"},
	 { "b2MotorJoint___GetMaxForce", _wrap_b2MotorJoint___GetMaxForce, METH_O, "__GetMaxForce(b2MotorJoint self) -> float32"},
	 { "b2MotorJoint___SetMaxTorque", (PyCFunction)(void(*)(void))_wrap_b2MotorJoint___SetMaxTorque, METH_VARARGS|METH_KEYWORDS, "__SetMaxTorque(b2MotorJoint self, float32 torque)"},
	 { "b2MotorJoint___GetMaxTorque", _wrap_b2MotorJoint___GetMaxTorque, METH_O, "__GetMaxTorque(b2MotorJoint self) -> float32"},
	 { "delete_b2MotorJoint", _wrap_delete_b2MotorJoint, METH_O, "delete_b2MotorJoint(b2MotorJoint self)"},
	 { "b2MotorJoint_swigregister", b2MotorJoint_swigregister, METH_O, NULL},
	 { "new_b2MouseJointDef", _wrap_new_b2MouseJointDef, METH_NOARGS, "\n"
		"new_b2MouseJointDef() -> b2MouseJointDef\n"
		"Mouse joint definition. This requires a world target point, tuning parameters, and the time step.\n"
		""},
	 { "b2MouseJointDef_target_set", _wrap_b2MouseJointDef_target_set, METH_VARARGS, "b2MouseJointDef_target_set(b2MouseJointDef self, b2Vec2 target)"},
	 { "b2MouseJointDef_target_get", _wrap_b2MouseJointDef_target_get, METH_O, "b2MouseJointDef_target_get(b2MouseJointDef self) -> b2Vec2"},
	 { "b2MouseJointDef_maxForce_set", _wrap_b2MouseJointDef_maxForce_set, METH_VARARGS, "b2MouseJointDef_maxForce_set(b2MouseJointDef self, float32 maxForce)"},
	 { "b2MouseJointDef_maxForce_get", _wrap_b2MouseJointDef_maxForce_get, METH_O, "b2MouseJointDef_maxForce_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef_frequencyHz_set", _wrap_b2MouseJointDef_frequencyHz_set, METH_VARARGS, "b2MouseJointDef_frequencyHz_set(b2MouseJointDef self, float32 frequencyHz)"},
	 { "b2MouseJointDef_frequencyHz_get", _wrap_b2MouseJointDef_frequencyHz_get, METH_O, "b2MouseJointDef_frequencyHz_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef_dampingRatio_set", _wrap_b2MouseJointDef_dampingRatio_set, METH_VARARGS, "b2MouseJointDef_dampingRatio_set(b2MouseJointDef self, float32 dampingRatio)"},
	 { "b2MouseJointDef_dampingRatio_get", _wrap_b2MouseJointDef_dampingRatio_get, METH_O, "b2MouseJointDef_dampingRatio_get(b2MouseJointDef self) -> float32"},
	 { "b2MouseJointDef___hash__", _wrap_b2MouseJointDef___hash__, METH_O, "__hash__(b2MouseJointDef self) -> long"},
	 { "delete_b2MouseJointDef", _wrap_delete_b2MouseJointDef, METH_O, "delete_b2MouseJointDef(b2MouseJointDef self)"},
	 { "b2MouseJointDef_swigregister", b2MouseJointDef_swigregister, METH_O, NULL},
	 { "b2MouseJointDef_swiginit", b2MouseJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2MouseJoint___SetTarget", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetTarget, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetTarget(b2MouseJoint self, b2Vec2 target)\n"
		"Use this to update the target point.\n"
		""},
	 { "b2MouseJoint___GetTarget", _wrap_b2MouseJoint___GetTarget, METH_O, "__GetTarget(b2MouseJoint self) -> b2Vec2"},
	 { "b2MouseJoint___SetMaxForce", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetMaxForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxForce(b2MouseJoint self, float32 force)\n"
		"Set/get the maximum force in Newtons.\n"
		""},
	 { "b2MouseJoint___GetMaxForce", _wrap_b2MouseJoint___GetMaxForce, METH_O, "__GetMaxForce(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetFrequency, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetFrequency(b2MouseJoint self, float32 hz)\n"
		"Set/get the frequency in Hertz.\n"
		""},
	 { "b2MouseJoint___GetFrequency", _wrap_b2MouseJoint___GetFrequency, METH_O, "__GetFrequency(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2MouseJoint___SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetDampingRatio(b2MouseJoint self, float32 ratio)\n"
		"Set/get the damping ratio (dimensionless).\n"
		""},
	 { "b2MouseJoint___GetDampingRatio", _wrap_b2MouseJoint___GetDampingRatio, METH_O, "__GetDampingRatio(b2MouseJoint self) -> float32"},
	 { "b2MouseJoint___hash__", _wrap_b2MouseJoint___hash__, METH_O, "__hash__(b2MouseJoint self) -> long"},
	 { "delete_b2MouseJoint", _wrap_delete_b2MouseJoint, METH_O, "delete_b2MouseJoint(b2MouseJoint self)"},
	 { "b2MouseJoint_swigregister", b2MouseJoint_swigregister, METH_O, NULL},
	 { "new_b2PrismaticJointDef", _wrap_new_b2PrismaticJointDef, METH_NOARGS, "\n"
		"new_b2PrismaticJointDef() -> b2PrismaticJointDef\n"
		"Prismatic joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game. \n"
		"WARNING: \n"
		"at least one body should by dynamic with a non-fixed rotation.\n"
		""},
	 { "b2PrismaticJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2PrismaticJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor, b2Vec2 axis)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2PrismaticJointDef_localAnchorA_set", _wrap_b2PrismaticJointDef_localAnchorA_set, METH_VARARGS, "b2PrismaticJointDef_localAnchorA_set(b2PrismaticJointDef self, b2Vec2 localAnchorA)"},
	 { "b2PrismaticJointDef_localAnchorA_get", _wrap_b2PrismaticJointDef_localAnchorA_get, METH_O, "b2PrismaticJointDef_localAnchorA_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_localAnchorB_set", _wrap_b2PrismaticJointDef_localAnchorB_set, METH_VARARGS, "b2PrismaticJointDef_localAnchorB_set(b2PrismaticJointDef self, b2Vec2 localAnchorB)"},
	 { "b2PrismaticJointDef_localAnchorB_get", _wrap_b2PrismaticJointDef_localAnchorB_get, METH_O, "b2PrismaticJointDef_localAnchorB_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_localAxisA_set", _wrap_b2PrismaticJointDef_localAxisA_set, METH_VARARGS, "b2PrismaticJointDef_localAxisA_set(b2PrismaticJointDef self, b2Vec2 localAxisA)"},
	 { "b2PrismaticJointDef_localAxisA_get", _wrap_b2PrismaticJointDef_localAxisA_get, METH_O, "b2PrismaticJointDef_localAxisA_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { "b2PrismaticJointDef_referenceAngle_set", _wrap_b2PrismaticJointDef_referenceAngle_set, METH_VARARGS, "b2PrismaticJointDef_referenceAngle_set(b2PrismaticJointDef self, float32 referenceAngle)"},
	 { "b2PrismaticJointDef_referenceAngle_get", _wrap_b2PrismaticJointDef_referenceAngle_get, METH_O, "b2PrismaticJointDef_referenceAngle_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_enableLimit_set", _wrap_b2PrismaticJointDef_enableLimit_set, METH_VARARGS, "b2PrismaticJointDef_enableLimit_set(b2PrismaticJointDef self, bool enableLimit)"},
	 { "b2PrismaticJointDef_enableLimit_get", _wrap_b2PrismaticJointDef_enableLimit_get, METH_O, "b2PrismaticJointDef_enableLimit_get(b2PrismaticJointDef self) -> bool"},
	 { "b2PrismaticJointDef_lowerTranslation_set", _wrap_b2PrismaticJointDef_lowerTranslation_set, METH_VARARGS, "b2PrismaticJointDef_lowerTranslation_set(b2PrismaticJointDef self, float32 lowerTranslation)"},
	 { "b2PrismaticJointDef_lowerTranslation_get", _wrap_b2PrismaticJointDef_lowerTranslation_get, METH_O, "b2PrismaticJointDef_lowerTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_upperTranslation_set", _wrap_b2PrismaticJointDef_upperTranslation_set, METH_VARARGS, "b2PrismaticJointDef_upperTranslation_set(b2PrismaticJointDef self, float32 upperTranslation)"},
	 { "b2PrismaticJointDef_upperTranslation_get", _wrap_b2PrismaticJointDef_upperTranslation_get, METH_O, "b2PrismaticJointDef_upperTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_enableMotor_set", _wrap_b2PrismaticJointDef_enableMotor_set, METH_VARARGS, "b2PrismaticJointDef_enableMotor_set(b2PrismaticJointDef self, bool enableMotor)"},
	 { "b2PrismaticJointDef_enableMotor_get", _wrap_b2PrismaticJointDef_enableMotor_get, METH_O, "b2PrismaticJointDef_enableMotor_get(b2PrismaticJointDef self) -> bool"},
	 { "b2PrismaticJointDef_maxMotorForce_set", _wrap_b2PrismaticJointDef_maxMotorForce_set, METH_VARARGS, "b2PrismaticJointDef_maxMotorForce_set(b2PrismaticJointDef self, float32 maxMotorForce)"},
	 { "b2PrismaticJointDef_maxMotorForce_get", _wrap_b2PrismaticJointDef_maxMotorForce_get, METH_O, "b2PrismaticJointDef_maxMotorForce_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef_motorSpeed_set", _wrap_b2PrismaticJointDef_motorSpeed_set, METH_VARARGS, "b2PrismaticJointDef_motorSpeed_set(b2PrismaticJointDef self, float32 motorSpeed)"},
	 { "b2PrismaticJointDef_motorSpeed_get", _wrap_b2PrismaticJointDef_motorSpeed_get, METH_O, "b2PrismaticJointDef_motorSpeed_get(b2PrismaticJointDef self) -> float32"},
	 { "b2PrismaticJointDef___hash__", _wrap_b2PrismaticJointDef___hash__, METH_O, "__hash__(b2PrismaticJointDef self) -> long"},
	 { "delete_b2PrismaticJointDef", _wrap_delete_b2PrismaticJointDef, METH_O, "delete_b2PrismaticJointDef(b2PrismaticJointDef self)"},
	 { "b2PrismaticJointDef_swigregister", b2PrismaticJointDef_swigregister, METH_O, NULL},
	 { "b2PrismaticJointDef_swiginit", b2PrismaticJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2PrismaticJoint_GetLocalAnchorA", _wrap_b2PrismaticJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetLocalAnchorB", _wrap_b2PrismaticJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetLocalAxisA", _wrap_b2PrismaticJoint_GetLocalAxisA, METH_O, "GetLocalAxisA(b2PrismaticJoint self) -> b2Vec2"},
	 { "b2PrismaticJoint_GetReferenceAngle", _wrap_b2PrismaticJoint_GetReferenceAngle, METH_O, "GetReferenceAngle(b2PrismaticJoint self) -> float32"},
	 { "b2PrismaticJoint___GetJointTranslation", _wrap_b2PrismaticJoint___GetJointTranslation, METH_O, "\n"
		"__GetJointTranslation(b2PrismaticJoint self) -> float32\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___GetJointSpeed", _wrap_b2PrismaticJoint___GetJointSpeed, METH_O, "\n"
		"__GetJointSpeed(b2PrismaticJoint self) -> float32\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___IsLimitEnabled", _wrap_b2PrismaticJoint___IsLimitEnabled, METH_O, "\n"
		"__IsLimitEnabled(b2PrismaticJoint self) -> bool\n"
		"Is the joint limit enabled?\n"
		""},
	 { "b2PrismaticJoint___EnableLimit", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___EnableLimit, METH_VARARGS|METH_KEYWORDS, "\n"
		"__EnableLimit(b2PrismaticJoint self, bool flag)\n"
		"Enable/disable the joint limit.\n"
		""},
	 { "b2PrismaticJoint___GetLowerLimit", _wrap_b2PrismaticJoint___GetLowerLimit, METH_O, "\n"
		"__GetLowerLimit(b2PrismaticJoint self) -> float32\n"
		"Get the lower joint limit, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___GetUpperLimit", _wrap_b2PrismaticJoint___GetUpperLimit, METH_O, "\n"
		"__GetUpperLimit(b2PrismaticJoint self) -> float32\n"
		"Get the upper joint limit, usually in meters.\n"
		""},
	 { "b2PrismaticJoint_SetLimits", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint_SetLimits, METH_VARARGS|METH_KEYWORDS, "\n"
		"SetLimits(b2PrismaticJoint self, float32 lower, float32 upper)\n"
		"Set the joint limits, usually in meters.\n"
		""},
	 { "b2PrismaticJoint___IsMotorEnabled", _wrap_b2PrismaticJoint___IsMotorEnabled, METH_O, "\n"
		"__IsMotorEnabled(b2PrismaticJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2PrismaticJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"__EnableMotor(b2PrismaticJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2PrismaticJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMotorSpeed(b2PrismaticJoint self, float32 speed)\n"
		"Set the motor speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___GetMotorSpeed", _wrap_b2PrismaticJoint___GetMotorSpeed, METH_O, "\n"
		"__GetMotorSpeed(b2PrismaticJoint self) -> float32\n"
		"Get the motor speed, usually in meters per second.\n"
		""},
	 { "b2PrismaticJoint___SetMaxMotorForce", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint___SetMaxMotorForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxMotorForce(b2PrismaticJoint self, float32 force)\n"
		"Set the maximum motor force, usually in N.\n"
		""},
	 { "b2PrismaticJoint___GetMaxMotorForce", _wrap_b2PrismaticJoint___GetMaxMotorForce, METH_O, "__GetMaxMotorForce(b2PrismaticJoint self) -> float32"},
	 { "b2PrismaticJoint_GetMotorForce", (PyCFunction)(void(*)(void))_wrap_b2PrismaticJoint_GetMotorForce, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetMotorForce(b2PrismaticJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor force given the inverse time step, usually in N.\n"
		""},
	 { "b2PrismaticJoint___hash__", _wrap_b2PrismaticJoint___hash__, METH_O, "__hash__(b2PrismaticJoint self) -> long"},
	 { "delete_b2PrismaticJoint", _wrap_delete_b2PrismaticJoint, METH_O, "delete_b2PrismaticJoint(b2PrismaticJoint self)"},
	 { "b2PrismaticJoint_swigregister", b2PrismaticJoint_swigregister, METH_O, NULL},
	 { "new_b2PulleyJointDef", _wrap_new_b2PulleyJointDef, METH_NOARGS, "\n"
		"new_b2PulleyJointDef() -> b2PulleyJointDef\n"
		"Pulley joint definition. This requires two ground anchors, two dynamic body anchor points, max lengths for each side, and a pulley ratio.\n"
		""},
	 { "b2PulleyJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2PulleyJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2PulleyJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 groundAnchorA, b2Vec2 groundAnchorB, b2Vec2 anchorA, b2Vec2 anchorB, float32 ratio)\n"
		"Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.\n"
		""},
	 { "b2PulleyJointDef_groundAnchorA_set", _wrap_b2PulleyJointDef_groundAnchorA_set, METH_VARARGS, "b2PulleyJointDef_groundAnchorA_set(b2PulleyJointDef self, b2Vec2 groundAnchorA)"},
	 { "b2PulleyJointDef_groundAnchorA_get", _wrap_b2PulleyJointDef_groundAnchorA_get, METH_O, "b2PulleyJointDef_groundAnchorA_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_groundAnchorB_set", _wrap_b2PulleyJointDef_groundAnchorB_set, METH_VARARGS, "b2PulleyJointDef_groundAnchorB_set(b2PulleyJointDef self, b2Vec2 groundAnchorB)"},
	 { "b2PulleyJointDef_groundAnchorB_get", _wrap_b2PulleyJointDef_groundAnchorB_get, METH_O, "b2PulleyJointDef_groundAnchorB_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_localAnchorA_set", _wrap_b2PulleyJointDef_localAnchorA_set, METH_VARARGS, "b2PulleyJointDef_localAnchorA_set(b2PulleyJointDef self, b2Vec2 localAnchorA)"},
	 { "b2PulleyJointDef_localAnchorA_get", _wrap_b2PulleyJointDef_localAnchorA_get, METH_O, "b2PulleyJointDef_localAnchorA_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_localAnchorB_set", _wrap_b2PulleyJointDef_localAnchorB_set, METH_VARARGS, "b2PulleyJointDef_localAnchorB_set(b2PulleyJointDef self, b2Vec2 localAnchorB)"},
	 { "b2PulleyJointDef_localAnchorB_get", _wrap_b2PulleyJointDef_localAnchorB_get, METH_O, "b2PulleyJointDef_localAnchorB_get(b2PulleyJointDef self) -> b2Vec2"},
	 { "b2PulleyJointDef_lengthA_set", _wrap_b2PulleyJointDef_lengthA_set, METH_VARARGS, "b2PulleyJointDef_lengthA_set(b2PulleyJointDef self, float32 lengthA)"},
	 { "b2PulleyJointDef_lengthA_get", _wrap_b2PulleyJointDef_lengthA_get, METH_O, "b2PulleyJointDef_lengthA_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef_lengthB_set", _wrap_b2PulleyJointDef_lengthB_set, METH_VARARGS, "b2PulleyJointDef_lengthB_set(b2PulleyJointDef self, float32 lengthB)"},
	 { "b2PulleyJointDef_lengthB_get", _wrap_b2PulleyJointDef_lengthB_get, METH_O, "b2PulleyJointDef_lengthB_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef_ratio_set", _wrap_b2PulleyJointDef_ratio_set, METH_VARARGS, "b2PulleyJointDef_ratio_set(b2PulleyJointDef self, float32 ratio)"},
	 { "b2PulleyJointDef_ratio_get", _wrap_b2PulleyJointDef_ratio_get, METH_O, "b2PulleyJointDef_ratio_get(b2PulleyJointDef self) -> float32"},
	 { "b2PulleyJointDef___hash__", _wrap_b2PulleyJointDef___hash__, METH_O, "__hash__(b2PulleyJointDef self) -> long"},
	 { "delete_b2PulleyJointDef", _wrap_delete_b2PulleyJointDef, METH_O, "delete_b2PulleyJointDef(b2PulleyJointDef self)"},
	 { "b2PulleyJointDef_swigregister", b2PulleyJointDef_swigregister, METH_O, NULL},
	 { "b2PulleyJointDef_swiginit", b2PulleyJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2PulleyJoint___GetGroundAnchorA", _wrap_b2PulleyJoint___GetGroundAnchorA, METH_O, "\n"
		"__GetGroundAnchorA(b2PulleyJoint self) -> b2Vec2\n"
		"Get the first ground anchor.\n"
		""},
	 { "b2PulleyJoint___GetGroundAnchorB", _wrap_b2PulleyJoint___GetGroundAnchorB, METH_O, "\n"
		"__GetGroundAnchorB(b2PulleyJoint self) -> b2Vec2\n"
		"Get the second ground anchor.\n"
		""},
	 { "b2PulleyJoint___GetLengthA", _wrap_b2PulleyJoint___GetLengthA, METH_O, "__GetLengthA(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___GetLengthB", _wrap_b2PulleyJoint___GetLengthB, METH_O, "__GetLengthB(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___GetRatio", _wrap_b2PulleyJoint___GetRatio, METH_O, "\n"
		"__GetRatio(b2PulleyJoint self) -> float32\n"
		"Get the pulley ratio.\n"
		""},
	 { "b2PulleyJoint_GetCurrentLengthA", _wrap_b2PulleyJoint_GetCurrentLengthA, METH_O, "GetCurrentLengthA(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint_GetCurrentLengthB", _wrap_b2PulleyJoint_GetCurrentLengthB, METH_O, "GetCurrentLengthB(b2PulleyJoint self) -> float32"},
	 { "b2PulleyJoint___hash__", _wrap_b2PulleyJoint___hash__, METH_O, "__hash__(b2PulleyJoint self) -> long"},
	 { "delete_b2PulleyJoint", _wrap_delete_b2PulleyJoint, METH_O, "delete_b2PulleyJoint(b2PulleyJoint self)"},
	 { "b2PulleyJoint_swigregister", b2PulleyJoint_swigregister, METH_O, NULL},
	 { "new_b2RevoluteJointDef", _wrap_new_b2RevoluteJointDef, METH_NOARGS, "\n"
		"new_b2RevoluteJointDef() -> b2RevoluteJointDef\n"
		"Revolute joint definition. This requires defining an anchor point where the bodies are joined. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor points are measured from the body's origin rather than the center of mass because: 1. you might not know where the center of mass will be. 2. if you add/remove shapes from a body and recompute the mass, the joints will be broken.\n"
		""},
	 { "b2RevoluteJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2RevoluteJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, and reference angle using a world anchor point.\n"
		""},
	 { "b2RevoluteJointDef_localAnchorA_set", _wrap_b2RevoluteJointDef_localAnchorA_set, METH_VARARGS, "b2RevoluteJointDef_localAnchorA_set(b2RevoluteJointDef self, b2Vec2 localAnchorA)"},
	 { "b2RevoluteJointDef_localAnchorA_get", _wrap_b2RevoluteJointDef_localAnchorA_get, METH_O, "b2RevoluteJointDef_localAnchorA_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { "b2RevoluteJointDef_localAnchorB_set", _wrap_b2RevoluteJointDef_localAnchorB_set, METH_VARARGS, "b2RevoluteJointDef_localAnchorB_set(b2RevoluteJointDef self, b2Vec2 localAnchorB)"},
	 { "b2RevoluteJointDef_localAnchorB_get", _wrap_b2RevoluteJointDef_localAnchorB_get, METH_O, "b2RevoluteJointDef_localAnchorB_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { "b2RevoluteJointDef_referenceAngle_set", _wrap_b2RevoluteJointDef_referenceAngle_set, METH_VARARGS, "b2RevoluteJointDef_referenceAngle_set(b2RevoluteJointDef self, float32 referenceAngle)"},
	 { "b2RevoluteJointDef_referenceAngle_get", _wrap_b2RevoluteJointDef_referenceAngle_get, METH_O, "b2RevoluteJointDef_referenceAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_enableLimit_set", _wrap_b2RevoluteJointDef_enableLimit_set, METH_VARARGS, "b2RevoluteJointDef_enableLimit_set(b2RevoluteJointDef self, bool enableLimit)"},
	 { "b2RevoluteJointDef_enableLimit_get", _wrap_b2RevoluteJointDef_enableLimit_get, METH_O, "b2RevoluteJointDef_enableLimit_get(b2RevoluteJointDef self) -> bool"},
	 { "b2RevoluteJointDef_lowerAngle_set", _wrap_b2RevoluteJointDef_lowerAngle_set, METH_VARARGS, "b2RevoluteJointDef_lowerAngle_set(b2RevoluteJointDef self, float32 lowerAngle)"},
	 { "b2RevoluteJointDef_lowerAngle_get", _wrap_b2RevoluteJointDef_lowerAngle_get, METH_O, "b2RevoluteJointDef_lowerAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_upperAngle_set", _wrap_b2RevoluteJointDef_upperAngle_set, METH_VARARGS, "b2RevoluteJointDef_upperAngle_set(b2RevoluteJointDef self, float32 upperAngle)"},
	 { "b2RevoluteJointDef_upperAngle_get", _wrap_b2RevoluteJointDef_upperAngle_get, METH_O, "b2RevoluteJointDef_upperAngle_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_enableMotor_set", _wrap_b2RevoluteJointDef_enableMotor_set, METH_VARARGS, "b2RevoluteJointDef_enableMotor_set(b2RevoluteJointDef self, bool enableMotor)"},
	 { "b2RevoluteJointDef_enableMotor_get", _wrap_b2RevoluteJointDef_enableMotor_get, METH_O, "b2RevoluteJointDef_enableMotor_get(b2RevoluteJointDef self) -> bool"},
	 { "b2RevoluteJointDef_motorSpeed_set", _wrap_b2RevoluteJointDef_motorSpeed_set, METH_VARARGS, "b2RevoluteJointDef_motorSpeed_set(b2RevoluteJointDef self, float32 motorSpeed)"},
	 { "b2RevoluteJointDef_motorSpeed_get", _wrap_b2RevoluteJointDef_motorSpeed_get, METH_O, "b2RevoluteJointDef_motorSpeed_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef_maxMotorTorque_set", _wrap_b2RevoluteJointDef_maxMotorTorque_set, METH_VARARGS, "b2RevoluteJointDef_maxMotorTorque_set(b2RevoluteJointDef self, float32 maxMotorTorque)"},
	 { "b2RevoluteJointDef_maxMotorTorque_get", _wrap_b2RevoluteJointDef_maxMotorTorque_get, METH_O, "b2RevoluteJointDef_maxMotorTorque_get(b2RevoluteJointDef self) -> float32"},
	 { "b2RevoluteJointDef___hash__", _wrap_b2RevoluteJointDef___hash__, METH_O, "__hash__(b2RevoluteJointDef self) -> long"},
	 { "delete_b2RevoluteJointDef", _wrap_delete_b2RevoluteJointDef, METH_O, "delete_b2RevoluteJointDef(b2RevoluteJointDef self)"},
	 { "b2RevoluteJointDef_swigregister", b2RevoluteJointDef_swigregister, METH_O, NULL},
	 { "b2RevoluteJointDef_swiginit", b2RevoluteJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2RevoluteJoint_GetLocalAnchorA", _wrap_b2RevoluteJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2RevoluteJoint self) -> b2Vec2"},
	 { "b2RevoluteJoint_GetLocalAnchorB", _wrap_b2RevoluteJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2RevoluteJoint self) -> b2Vec2"},
	 { "b2RevoluteJoint_GetReferenceAngle", _wrap_b2RevoluteJoint_GetReferenceAngle, METH_O, "GetReferenceAngle(b2RevoluteJoint self) -> float32"},
	 { "b2RevoluteJoint___GetJointAngle", _wrap_b2RevoluteJoint___GetJointAngle, METH_O, "\n"
		"__GetJointAngle(b2RevoluteJoint self) -> float32\n"
		"Get the current joint angle in radians.\n"
		""},
	 { "b2RevoluteJoint___GetJointSpeed", _wrap_b2RevoluteJoint___GetJointSpeed, METH_O, "\n"
		"__GetJointSpeed(b2RevoluteJoint self) -> float32\n"
		"Get the current joint angle speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___IsLimitEnabled", _wrap_b2RevoluteJoint___IsLimitEnabled, METH_O, "\n"
		"__IsLimitEnabled(b2RevoluteJoint self) -> bool\n"
		"Is the joint limit enabled?\n"
		""},
	 { "b2RevoluteJoint___EnableLimit", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___EnableLimit, METH_VARARGS|METH_KEYWORDS, "\n"
		"__EnableLimit(b2RevoluteJoint self, bool flag)\n"
		"Enable/disable the joint limit.\n"
		""},
	 { "b2RevoluteJoint___GetLowerLimit", _wrap_b2RevoluteJoint___GetLowerLimit, METH_O, "\n"
		"__GetLowerLimit(b2RevoluteJoint self) -> float32\n"
		"Get the lower joint limit in radians.\n"
		""},
	 { "b2RevoluteJoint___GetUpperLimit", _wrap_b2RevoluteJoint___GetUpperLimit, METH_O, "\n"
		"__GetUpperLimit(b2RevoluteJoint self) -> float32\n"
		"Get the upper joint limit in radians.\n"
		""},
	 { "b2RevoluteJoint_SetLimits", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint_SetLimits, METH_VARARGS|METH_KEYWORDS, "\n"
		"SetLimits(b2RevoluteJoint self, float32 lower, float32 upper)\n"
		"Set the joint limits in radians.\n"
		""},
	 { "b2RevoluteJoint___IsMotorEnabled", _wrap_b2RevoluteJoint___IsMotorEnabled, METH_O, "\n"
		"__IsMotorEnabled(b2RevoluteJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2RevoluteJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"__EnableMotor(b2RevoluteJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2RevoluteJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMotorSpeed(b2RevoluteJoint self, float32 speed)\n"
		"Set the motor speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___GetMotorSpeed", _wrap_b2RevoluteJoint___GetMotorSpeed, METH_O, "\n"
		"__GetMotorSpeed(b2RevoluteJoint self) -> float32\n"
		"Get the motor speed in radians per second.\n"
		""},
	 { "b2RevoluteJoint___SetMaxMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint___SetMaxMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxMotorTorque(b2RevoluteJoint self, float32 torque)\n"
		"Set the maximum motor torque, usually in N-m.\n"
		""},
	 { "b2RevoluteJoint_GetMaxMotorTorque", _wrap_b2RevoluteJoint_GetMaxMotorTorque, METH_O, "GetMaxMotorTorque(b2RevoluteJoint self) -> float32"},
	 { "b2RevoluteJoint_GetMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2RevoluteJoint_GetMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetMotorTorque(b2RevoluteJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor torque given the inverse time step. Unit is N*m.\n"
		""},
	 { "b2RevoluteJoint___hash__", _wrap_b2RevoluteJoint___hash__, METH_O, "__hash__(b2RevoluteJoint self) -> long"},
	 { "delete_b2RevoluteJoint", _wrap_delete_b2RevoluteJoint, METH_O, "delete_b2RevoluteJoint(b2RevoluteJoint self)"},
	 { "b2RevoluteJoint_swigregister", b2RevoluteJoint_swigregister, METH_O, NULL},
	 { "new_b2RopeJointDef", _wrap_new_b2RopeJointDef, METH_NOARGS, "\n"
		"new_b2RopeJointDef() -> b2RopeJointDef\n"
		"Rope joint definition. This requires two body anchor points and a maximum lengths. Note: by default the connected objects will not collide. see collideConnected in  b2JointDef.\n"
		""},
	 { "b2RopeJointDef_localAnchorA_set", _wrap_b2RopeJointDef_localAnchorA_set, METH_VARARGS, "b2RopeJointDef_localAnchorA_set(b2RopeJointDef self, b2Vec2 localAnchorA)"},
	 { "b2RopeJointDef_localAnchorA_get", _wrap_b2RopeJointDef_localAnchorA_get, METH_O, "b2RopeJointDef_localAnchorA_get(b2RopeJointDef self) -> b2Vec2"},
	 { "b2RopeJointDef_localAnchorB_set", _wrap_b2RopeJointDef_localAnchorB_set, METH_VARARGS, "b2RopeJointDef_localAnchorB_set(b2RopeJointDef self, b2Vec2 localAnchorB)"},
	 { "b2RopeJointDef_localAnchorB_get", _wrap_b2RopeJointDef_localAnchorB_get, METH_O, "b2RopeJointDef_localAnchorB_get(b2RopeJointDef self) -> b2Vec2"},
	 { "b2RopeJointDef_maxLength_set", _wrap_b2RopeJointDef_maxLength_set, METH_VARARGS, "b2RopeJointDef_maxLength_set(b2RopeJointDef self, float32 maxLength)"},
	 { "b2RopeJointDef_maxLength_get", _wrap_b2RopeJointDef_maxLength_get, METH_O, "b2RopeJointDef_maxLength_get(b2RopeJointDef self) -> float32"},
	 { "b2RopeJointDef___hash__", _wrap_b2RopeJointDef___hash__, METH_O, "__hash__(b2RopeJointDef self) -> long"},
	 { "delete_b2RopeJointDef", _wrap_delete_b2RopeJointDef, METH_O, "delete_b2RopeJointDef(b2RopeJointDef self)"},
	 { "b2RopeJointDef_swigregister", b2RopeJointDef_swigregister, METH_O, NULL},
	 { "b2RopeJointDef_swiginit", b2RopeJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2RopeJoint_GetLocalAnchorA", _wrap_b2RopeJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2RopeJoint self) -> b2Vec2"},
	 { "b2RopeJoint_GetLocalAnchorB", _wrap_b2RopeJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2RopeJoint self) -> b2Vec2"},
	 { "b2RopeJoint_SetMaxLength", (PyCFunction)(void(*)(void))_wrap_b2RopeJoint_SetMaxLength, METH_VARARGS|METH_KEYWORDS, "SetMaxLength(b2RopeJoint self, float32 length)"},
	 { "b2RopeJoint___GetMaxLength", _wrap_b2RopeJoint___GetMaxLength, METH_O, "\n"
		"__GetMaxLength(b2RopeJoint self) -> float32\n"
		"Get the maximum length of the rope.\n"
		""},
	 { "b2RopeJoint___GetLimitState", _wrap_b2RopeJoint___GetLimitState, METH_O, "__GetLimitState(b2RopeJoint self) -> b2LimitState"},
	 { "b2RopeJoint___hash__", _wrap_b2RopeJoint___hash__, METH_O, "__hash__(b2RopeJoint self) -> long"},
	 { "delete_b2RopeJoint", _wrap_delete_b2RopeJoint, METH_O, "delete_b2RopeJoint(b2RopeJoint self)"},
	 { "b2RopeJoint_swigregister", b2RopeJoint_swigregister, METH_O, NULL},
	 { "new_b2WeldJointDef", _wrap_new_b2WeldJointDef, METH_NOARGS, "\n"
		"new_b2WeldJointDef() -> b2WeldJointDef\n"
		"Weld joint definition. You need to specify local anchor points where they are attached and the relative body angle. The position of the anchor points is important for computing the reaction torque.\n"
		""},
	 { "b2WeldJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WeldJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2WeldJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor)\n"
		"Initialize the bodies, anchors, and reference angle using a world anchor point.\n"
		""},
	 { "b2WeldJointDef_localAnchorA_set", _wrap_b2WeldJointDef_localAnchorA_set, METH_VARARGS, "b2WeldJointDef_localAnchorA_set(b2WeldJointDef self, b2Vec2 localAnchorA)"},
	 { "b2WeldJointDef_localAnchorA_get", _wrap_b2WeldJointDef_localAnchorA_get, METH_O, "b2WeldJointDef_localAnchorA_get(b2WeldJointDef self) -> b2Vec2"},
	 { "b2WeldJointDef_localAnchorB_set", _wrap_b2WeldJointDef_localAnchorB_set, METH_VARARGS, "b2WeldJointDef_localAnchorB_set(b2WeldJointDef self, b2Vec2 localAnchorB)"},
	 { "b2WeldJointDef_localAnchorB_get", _wrap_b2WeldJointDef_localAnchorB_get, METH_O, "b2WeldJointDef_localAnchorB_get(b2WeldJointDef self) -> b2Vec2"},
	 { "b2WeldJointDef_referenceAngle_set", _wrap_b2WeldJointDef_referenceAngle_set, METH_VARARGS, "b2WeldJointDef_referenceAngle_set(b2WeldJointDef self, float32 referenceAngle)"},
	 { "b2WeldJointDef_referenceAngle_get", _wrap_b2WeldJointDef_referenceAngle_get, METH_O, "b2WeldJointDef_referenceAngle_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef_frequencyHz_set", _wrap_b2WeldJointDef_frequencyHz_set, METH_VARARGS, "b2WeldJointDef_frequencyHz_set(b2WeldJointDef self, float32 frequencyHz)"},
	 { "b2WeldJointDef_frequencyHz_get", _wrap_b2WeldJointDef_frequencyHz_get, METH_O, "b2WeldJointDef_frequencyHz_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef_dampingRatio_set", _wrap_b2WeldJointDef_dampingRatio_set, METH_VARARGS, "b2WeldJointDef_dampingRatio_set(b2WeldJointDef self, float32 dampingRatio)"},
	 { "b2WeldJointDef_dampingRatio_get", _wrap_b2WeldJointDef_dampingRatio_get, METH_O, "b2WeldJointDef_dampingRatio_get(b2WeldJointDef self) -> float32"},
	 { "b2WeldJointDef___hash__", _wrap_b2WeldJointDef___hash__, METH_O, "__hash__(b2WeldJointDef self) -> long"},
	 { "delete_b2WeldJointDef", _wrap_delete_b2WeldJointDef, METH_O, "delete_b2WeldJointDef(b2WeldJointDef self)"},
	 { "b2WeldJointDef_swigregister", b2WeldJointDef_swigregister, METH_O, NULL},
	 { "b2WeldJointDef_swiginit", b2WeldJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2WeldJoint_GetLocalAnchorA", _wrap_b2WeldJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2WeldJoint self) -> b2Vec2"},
	 { "b2WeldJoint_GetLocalAnchorB", _wrap_b2WeldJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2WeldJoint self) -> b2Vec2"},
	 { "b2WeldJoint_GetReferenceAngle", _wrap_b2WeldJoint_GetReferenceAngle, METH_O, "GetReferenceAngle(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint_SetFrequency", (PyCFunction)(void(*)(void))_wrap_b2WeldJoint_SetFrequency, METH_VARARGS|METH_KEYWORDS, "SetFrequency(b2WeldJoint self, float32 hz)"},
	 { "b2WeldJoint_GetFrequency", _wrap_b2WeldJoint_GetFrequency, METH_O, "GetFrequency(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint_SetDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2WeldJoint_SetDampingRatio, METH_VARARGS|METH_KEYWORDS, "SetDampingRatio(b2WeldJoint self, float32 ratio)"},
	 { "b2WeldJoint_GetDampingRatio", _wrap_b2WeldJoint_GetDampingRatio, METH_O, "GetDampingRatio(b2WeldJoint self) -> float32"},
	 { "b2WeldJoint___hash__", _wrap_b2WeldJoint___hash__, METH_O, "__hash__(b2WeldJoint self) -> long"},
	 { "delete_b2WeldJoint", _wrap_delete_b2WeldJoint, METH_O, "delete_b2WeldJoint(b2WeldJoint self)"},
	 { "b2WeldJoint_swigregister", b2WeldJoint_swigregister, METH_O, NULL},
	 { "new_b2WheelJointDef", _wrap_new_b2WheelJointDef, METH_NOARGS, "\n"
		"new_b2WheelJointDef() -> b2WheelJointDef\n"
		"Line joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game.\n"
		""},
	 { "b2WheelJointDef_Initialize", (PyCFunction)(void(*)(void))_wrap_b2WheelJointDef_Initialize, METH_VARARGS|METH_KEYWORDS, "\n"
		"Initialize(b2WheelJointDef self, b2Body bodyA, b2Body bodyB, b2Vec2 anchor, b2Vec2 axis)\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { "b2WheelJointDef_localAnchorA_set", _wrap_b2WheelJointDef_localAnchorA_set, METH_VARARGS, "b2WheelJointDef_localAnchorA_set(b2WheelJointDef self, b2Vec2 localAnchorA)"},
	 { "b2WheelJointDef_localAnchorA_get", _wrap_b2WheelJointDef_localAnchorA_get, METH_O, "b2WheelJointDef_localAnchorA_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_localAnchorB_set", _wrap_b2WheelJointDef_localAnchorB_set, METH_VARARGS, "b2WheelJointDef_localAnchorB_set(b2WheelJointDef self, b2Vec2 localAnchorB)"},
	 { "b2WheelJointDef_localAnchorB_get", _wrap_b2WheelJointDef_localAnchorB_get, METH_O, "b2WheelJointDef_localAnchorB_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_localAxisA_set", _wrap_b2WheelJointDef_localAxisA_set, METH_VARARGS, "b2WheelJointDef_localAxisA_set(b2WheelJointDef self, b2Vec2 localAxisA)"},
	 { "b2WheelJointDef_localAxisA_get", _wrap_b2WheelJointDef_localAxisA_get, METH_O, "b2WheelJointDef_localAxisA_get(b2WheelJointDef self) -> b2Vec2"},
	 { "b2WheelJointDef_enableMotor_set", _wrap_b2WheelJointDef_enableMotor_set, METH_VARARGS, "b2WheelJointDef_enableMotor_set(b2WheelJointDef self, bool enableMotor)"},
	 { "b2WheelJointDef_enableMotor_get", _wrap_b2WheelJointDef_enableMotor_get, METH_O, "b2WheelJointDef_enableMotor_get(b2WheelJointDef self) -> bool"},
	 { "b2WheelJointDef_maxMotorTorque_set", _wrap_b2WheelJointDef_maxMotorTorque_set, METH_VARARGS, "b2WheelJointDef_maxMotorTorque_set(b2WheelJointDef self, float32 maxMotorTorque)"},
	 { "b2WheelJointDef_maxMotorTorque_get", _wrap_b2WheelJointDef_maxMotorTorque_get, METH_O, "b2WheelJointDef_maxMotorTorque_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_motorSpeed_set", _wrap_b2WheelJointDef_motorSpeed_set, METH_VARARGS, "b2WheelJointDef_motorSpeed_set(b2WheelJointDef self, float32 motorSpeed)"},
	 { "b2WheelJointDef_motorSpeed_get", _wrap_b2WheelJointDef_motorSpeed_get, METH_O, "b2WheelJointDef_motorSpeed_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_frequencyHz_set", _wrap_b2WheelJointDef_frequencyHz_set, METH_VARARGS, "b2WheelJointDef_frequencyHz_set(b2WheelJointDef self, float32 frequencyHz)"},
	 { "b2WheelJointDef_frequencyHz_get", _wrap_b2WheelJointDef_frequencyHz_get, METH_O, "b2WheelJointDef_frequencyHz_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef_dampingRatio_set", _wrap_b2WheelJointDef_dampingRatio_set, METH_VARARGS, "b2WheelJointDef_dampingRatio_set(b2WheelJointDef self, float32 dampingRatio)"},
	 { "b2WheelJointDef_dampingRatio_get", _wrap_b2WheelJointDef_dampingRatio_get, METH_O, "b2WheelJointDef_dampingRatio_get(b2WheelJointDef self) -> float32"},
	 { "b2WheelJointDef___hash__", _wrap_b2WheelJointDef___hash__, METH_O, "__hash__(b2WheelJointDef self) -> long"},
	 { "delete_b2WheelJointDef", _wrap_delete_b2WheelJointDef, METH_O, "delete_b2WheelJointDef(b2WheelJointDef self)"},
	 { "b2WheelJointDef_swigregister", b2WheelJointDef_swigregister, METH_O, NULL},
	 { "b2WheelJointDef_swiginit", b2WheelJointDef_swiginit, METH_VARARGS, NULL},
	 { "b2WheelJoint_GetLocalAnchorA", _wrap_b2WheelJoint_GetLocalAnchorA, METH_O, "GetLocalAnchorA(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint_GetLocalAnchorB", _wrap_b2WheelJoint_GetLocalAnchorB, METH_O, "GetLocalAnchorB(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint_GetLocalAxisA", _wrap_b2WheelJoint_GetLocalAxisA, METH_O, "GetLocalAxisA(b2WheelJoint self) -> b2Vec2"},
	 { "b2WheelJoint___GetJointTranslation", _wrap_b2WheelJoint___GetJointTranslation, METH_O, "\n"
		"__GetJointTranslation(b2WheelJoint self) -> float32\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { "b2WheelJoint___GetJointSpeed", _wrap_b2WheelJoint___GetJointSpeed, METH_O, "\n"
		"__GetJointSpeed(b2WheelJoint self) -> float32\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { "b2WheelJoint___IsMotorEnabled", _wrap_b2WheelJoint___IsMotorEnabled, METH_O, "\n"
		"__IsMotorEnabled(b2WheelJoint self) -> bool\n"
		"Is the joint motor enabled?\n"
		""},
	 { "b2WheelJoint___EnableMotor", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___EnableMotor, METH_VARARGS|METH_KEYWORDS, "\n"
		"__EnableMotor(b2WheelJoint self, bool flag)\n"
		"Enable/disable the joint motor.\n"
		""},
	 { "b2WheelJoint___SetMotorSpeed", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetMotorSpeed, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMotorSpeed(b2WheelJoint self, float32 speed)\n"
		"Set the motor speed, usually in radians per second.\n"
		""},
	 { "b2WheelJoint___GetMotorSpeed", _wrap_b2WheelJoint___GetMotorSpeed, METH_O, "\n"
		"__GetMotorSpeed(b2WheelJoint self) -> float32\n"
		"Get the motor speed, usually in radians per second.\n"
		""},
	 { "b2WheelJoint___SetMaxMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetMaxMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetMaxMotorTorque(b2WheelJoint self, float32 torque)\n"
		"Set/Get the maximum motor force, usually in N-m.\n"
		""},
	 { "b2WheelJoint___GetMaxMotorTorque", _wrap_b2WheelJoint___GetMaxMotorTorque, METH_O, "__GetMaxMotorTorque(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint_GetMotorTorque", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint_GetMotorTorque, METH_VARARGS|METH_KEYWORDS, "\n"
		"GetMotorTorque(b2WheelJoint self, float32 inv_dt) -> float32\n"
		"Get the current motor torque given the inverse time step, usually in N-m.\n"
		""},
	 { "b2WheelJoint___SetSpringFrequencyHz", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetSpringFrequencyHz, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetSpringFrequencyHz(b2WheelJoint self, float32 hz)\n"
		"Set/Get the spring frequency in hertz. Setting the frequency to zero disables the spring.\n"
		""},
	 { "b2WheelJoint___GetSpringFrequencyHz", _wrap_b2WheelJoint___GetSpringFrequencyHz, METH_O, "__GetSpringFrequencyHz(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint___SetSpringDampingRatio", (PyCFunction)(void(*)(void))_wrap_b2WheelJoint___SetSpringDampingRatio, METH_VARARGS|METH_KEYWORDS, "\n"
		"__SetSpringDampingRatio(b2WheelJoint self, float32 ratio)\n"
		"Set/Get the spring damping ratio.\n"
		""},
	 { "b2WheelJoint___GetSpringDampingRatio", _wrap_b2WheelJoint___GetSpringDampingRatio, METH_O, "__GetSpringDampingRatio(b2WheelJoint self) -> float32"},
	 { "b2WheelJoint___hash__", _wrap_b2WheelJoint___hash__, METH_O, "__hash__(b2WheelJoint self) -> long"},
	 { "delete_b2WheelJoint", _wrap_delete_b2WheelJoint, METH_O, "delete_b2WheelJoint(b2WheelJoint self)"},
	 { "b2WheelJoint_swigregister", b2WheelJoint_swigregister, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p__b2Vec2ArrayTo_p_b2Vec2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Vec2 *)  ((_b2Vec2Array *) x));
}
static void *_p_b2DrawExtendedTo_p_b2Draw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Draw *)  ((b2DrawExtended *) x));
}
static void *_p_b2DistanceJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2DistanceJoint *) x));
}
static void *_p_b2FrictionJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2FrictionJoint *) x));
}
static void *_p_b2GearJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2GearJoint *) x));
}
static void *_p_b2MotorJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2MotorJoint *) x));
}
static void *_p_b2MouseJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2MouseJoint *) x));
}
static void *_p_b2PrismaticJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2PrismaticJoint *) x));
}
static void *_p_b2PulleyJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2PulleyJoint *) x));
}
static void *_p_b2RevoluteJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2RevoluteJoint *) x));
}
static void *_p_b2RopeJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2RopeJoint *) x));
}
static void *_p_b2WeldJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2WeldJoint *) x));
}
static void *_p_b2WheelJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2WheelJoint *) x));
}
static void *_p_b2DistanceJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2DistanceJointDef *) x));
}
static void *_p_b2FrictionJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2FrictionJointDef *) x));
}
static void *_p_b2GearJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2GearJointDef *) x));
}
static void *_p_b2MotorJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2MotorJointDef *) x));
}
static void *_p_b2MouseJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2MouseJointDef *) x));
}
static void *_p_b2PrismaticJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2PrismaticJointDef *) x));
}
static void *_p_b2PulleyJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2PulleyJointDef *) x));
}
static void *_p_b2RevoluteJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2RevoluteJointDef *) x));
}
static void *_p_b2RopeJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2RopeJointDef *) x));
}
static void *_p_b2WeldJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2WeldJointDef *) x));
}
static void *_p_b2WheelJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2WheelJointDef *) x));
}
static void *_p_b2ChainShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2ChainShape *) x));
}
static void *_p_b2CircleShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2CircleShape *) x));
}
static void *_p_b2EdgeShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2EdgeShape *) x));
}
static void *_p_b2PolygonShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2PolygonShape *) x));
}
static swig_type_info _swigt__p__b2Vec2Array = {"_p__b2Vec2Array", "_b2Vec2Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2AABB = {"_p_b2AABB", "b2AABB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2AssertException = {"_p_b2AssertException", "b2AssertException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BlockAllocator = {"_p_b2BlockAllocator", "b2BlockAllocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Body = {"_p_b2Body", "b2Body *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BodyDef = {"_p_b2BodyDef", "b2BodyDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BroadPhase = {"_p_b2BroadPhase", "b2BroadPhase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ChainShape = {"_p_b2ChainShape", "b2ChainShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2CircleShape = {"_p_b2CircleShape", "b2CircleShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ClipVertex = {"_p_b2ClipVertex", "b2ClipVertex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Color = {"_p_b2Color", "b2Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Contact = {"_p_b2Contact", "b2Contact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactEdge = {"_p_b2ContactEdge", "b2ContactEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactFeature = {"_p_b2ContactFeature", "b2ContactFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactFilter = {"_p_b2ContactFilter", "b2ContactFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactID = {"_p_b2ContactID", "b2ContactID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactImpulse = {"_p_b2ContactImpulse", "b2ContactImpulse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactListener = {"_p_b2ContactListener", "b2ContactListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactManager = {"_p_b2ContactManager", "b2ContactManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactPoint = {"_p_b2ContactPoint", "b2ContactPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DestructionListener = {"_p_b2DestructionListener", "b2DestructionListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceInput = {"_p_b2DistanceInput", "b2DistanceInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceJoint = {"_p_b2DistanceJoint", "b2DistanceJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceJointDef = {"_p_b2DistanceJointDef", "b2DistanceJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceOutput = {"_p_b2DistanceOutput", "b2DistanceOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceProxy = {"_p_b2DistanceProxy", "b2DistanceProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Draw = {"_p_b2Draw", "b2Draw *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DrawExtended = {"_p_b2DrawExtended", "b2DrawExtended *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2EdgeShape = {"_p_b2EdgeShape", "b2EdgeShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Filter = {"_p_b2Filter", "b2Filter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Fixture = {"_p_b2Fixture", "b2Fixture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FixtureDef = {"_p_b2FixtureDef", "b2FixtureDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FixtureProxy = {"_p_b2FixtureProxy", "b2FixtureProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FrictionJoint = {"_p_b2FrictionJoint", "b2FrictionJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FrictionJointDef = {"_p_b2FrictionJointDef", "b2FrictionJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GearJoint = {"_p_b2GearJoint", "b2GearJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GearJointDef = {"_p_b2GearJointDef", "b2GearJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Jacobian = {"_p_b2Jacobian", "b2Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Joint = {"_p_b2Joint", "b2Joint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointDef = {"_p_b2JointDef", "b2JointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointEdge = {"_p_b2JointEdge", "b2JointEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Manifold = {"_p_b2Manifold", "b2Manifold *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ManifoldPoint = {"_p_b2ManifoldPoint", "b2ManifoldPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MassData = {"_p_b2MassData", "b2MassData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Mat22 = {"_p_b2Mat22", "b2Mat22 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Mat33 = {"_p_b2Mat33", "b2Mat33 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MotorJoint = {"_p_b2MotorJoint", "b2MotorJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MotorJointDef = {"_p_b2MotorJointDef", "b2MotorJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MouseJoint = {"_p_b2MouseJoint", "b2MouseJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MouseJointDef = {"_p_b2MouseJointDef", "b2MouseJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Pair = {"_p_b2Pair", "b2Pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PolygonShape = {"_p_b2PolygonShape", "b2PolygonShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Position = {"_p_b2Position", "b2Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PrismaticJoint = {"_p_b2PrismaticJoint", "b2PrismaticJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PrismaticJointDef = {"_p_b2PrismaticJointDef", "b2PrismaticJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Profile = {"_p_b2Profile", "b2Profile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PulleyJoint = {"_p_b2PulleyJoint", "b2PulleyJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PulleyJointDef = {"_p_b2PulleyJointDef", "b2PulleyJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2QueryCallback = {"_p_b2QueryCallback", "b2QueryCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RayCastCallback = {"_p_b2RayCastCallback", "b2RayCastCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RayCastInput = {"_p_b2RayCastInput", "b2RayCastInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RayCastOutput = {"_p_b2RayCastOutput", "b2RayCastOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJoint = {"_p_b2RevoluteJoint", "b2RevoluteJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJointDef = {"_p_b2RevoluteJointDef", "b2RevoluteJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RopeJoint = {"_p_b2RopeJoint", "b2RopeJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RopeJointDef = {"_p_b2RopeJointDef", "b2RopeJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Rot = {"_p_b2Rot", "b2Rot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Shape = {"_p_b2Shape", "b2Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2SolverData = {"_p_b2SolverData", "b2SolverData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Sweep = {"_p_b2Sweep", "b2Sweep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TOIInput = {"_p_b2TOIInput", "b2TOIInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TOIOutput = {"_p_b2TOIOutput", "b2TOIOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TimeStep = {"_p_b2TimeStep", "b2TimeStep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Transform = {"_p_b2Transform", "b2Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TreeNode = {"_p_b2TreeNode", "b2TreeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec2 = {"_p_b2Vec2", "b2Vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec3 = {"_p_b2Vec3", "b2Vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Velocity = {"_p_b2Velocity", "b2Velocity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Version = {"_p_b2Version", "b2Version *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2WeldJoint = {"_p_b2WeldJoint", "b2WeldJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2WeldJointDef = {"_p_b2WeldJointDef", "b2WeldJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2WheelJoint = {"_p_b2WheelJoint", "b2WheelJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2WheelJointDef = {"_p_b2WheelJointDef", "b2WheelJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2World = {"_p_b2World", "b2World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2WorldManifold = {"_p_b2WorldManifold", "b2WorldManifold *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "float64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_b2Contact_p_b2BlockAllocator__void = {"_p_f_p_b2Contact_p_b2BlockAllocator__void", "b2ContactDestroyFcn *|void (*)(b2Contact *,b2BlockAllocator *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact = {"_p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact", "b2ContactCreateFcn *|b2Contact *(*)(b2Fixture *,int32,b2Fixture *,int32,b2BlockAllocator *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32 *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8 *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p__b2Vec2Array,
  &_swigt__p_b2AABB,
  &_swigt__p_b2AssertException,
  &_swigt__p_b2BlockAllocator,
  &_swigt__p_b2Body,
  &_swigt__p_b2BodyDef,
  &_swigt__p_b2BroadPhase,
  &_swigt__p_b2ChainShape,
  &_swigt__p_b2CircleShape,
  &_swigt__p_b2ClipVertex,
  &_swigt__p_b2Color,
  &_swigt__p_b2Contact,
  &_swigt__p_b2ContactEdge,
  &_swigt__p_b2ContactFeature,
  &_swigt__p_b2ContactFilter,
  &_swigt__p_b2ContactID,
  &_swigt__p_b2ContactImpulse,
  &_swigt__p_b2ContactListener,
  &_swigt__p_b2ContactManager,
  &_swigt__p_b2ContactPoint,
  &_swigt__p_b2DestructionListener,
  &_swigt__p_b2DistanceInput,
  &_swigt__p_b2DistanceJoint,
  &_swigt__p_b2DistanceJointDef,
  &_swigt__p_b2DistanceOutput,
  &_swigt__p_b2DistanceProxy,
  &_swigt__p_b2Draw,
  &_swigt__p_b2DrawExtended,
  &_swigt__p_b2EdgeShape,
  &_swigt__p_b2Filter,
  &_swigt__p_b2Fixture,
  &_swigt__p_b2FixtureDef,
  &_swigt__p_b2FixtureProxy,
  &_swigt__p_b2FrictionJoint,
  &_swigt__p_b2FrictionJointDef,
  &_swigt__p_b2GearJoint,
  &_swigt__p_b2GearJointDef,
  &_swigt__p_b2Jacobian,
  &_swigt__p_b2Joint,
  &_swigt__p_b2JointDef,
  &_swigt__p_b2JointEdge,
  &_swigt__p_b2Manifold,
  &_swigt__p_b2ManifoldPoint,
  &_swigt__p_b2MassData,
  &_swigt__p_b2Mat22,
  &_swigt__p_b2Mat33,
  &_swigt__p_b2MotorJoint,
  &_swigt__p_b2MotorJointDef,
  &_swigt__p_b2MouseJoint,
  &_swigt__p_b2MouseJointDef,
  &_swigt__p_b2Pair,
  &_swigt__p_b2PolygonShape,
  &_swigt__p_b2Position,
  &_swigt__p_b2PrismaticJoint,
  &_swigt__p_b2PrismaticJointDef,
  &_swigt__p_b2Profile,
  &_swigt__p_b2PulleyJoint,
  &_swigt__p_b2PulleyJointDef,
  &_swigt__p_b2QueryCallback,
  &_swigt__p_b2RayCastCallback,
  &_swigt__p_b2RayCastInput,
  &_swigt__p_b2RayCastOutput,
  &_swigt__p_b2RevoluteJoint,
  &_swigt__p_b2RevoluteJointDef,
  &_swigt__p_b2RopeJoint,
  &_swigt__p_b2RopeJointDef,
  &_swigt__p_b2Rot,
  &_swigt__p_b2Shape,
  &_swigt__p_b2SolverData,
  &_swigt__p_b2Sweep,
  &_swigt__p_b2TOIInput,
  &_swigt__p_b2TOIOutput,
  &_swigt__p_b2TimeStep,
  &_swigt__p_b2Transform,
  &_swigt__p_b2TreeNode,
  &_swigt__p_b2Vec2,
  &_swigt__p_b2Vec3,
  &_swigt__p_b2Velocity,
  &_swigt__p_b2Version,
  &_swigt__p_b2WeldJoint,
  &_swigt__p_b2WeldJointDef,
  &_swigt__p_b2WheelJoint,
  &_swigt__p_b2WheelJointDef,
  &_swigt__p_b2World,
  &_swigt__p_b2WorldManifold,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_b2Contact_p_b2BlockAllocator__void,
  &_swigt__p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p__b2Vec2Array[] = {  {&_swigt__p__b2Vec2Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2AABB[] = {  {&_swigt__p_b2AABB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2AssertException[] = {  {&_swigt__p_b2AssertException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BlockAllocator[] = {  {&_swigt__p_b2BlockAllocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Body[] = {  {&_swigt__p_b2Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BodyDef[] = {  {&_swigt__p_b2BodyDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BroadPhase[] = {  {&_swigt__p_b2BroadPhase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ChainShape[] = {  {&_swigt__p_b2ChainShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2CircleShape[] = {  {&_swigt__p_b2CircleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ClipVertex[] = {  {&_swigt__p_b2ClipVertex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Color[] = {  {&_swigt__p_b2Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Contact[] = {  {&_swigt__p_b2Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactEdge[] = {  {&_swigt__p_b2ContactEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactFeature[] = {  {&_swigt__p_b2ContactFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactFilter[] = {  {&_swigt__p_b2ContactFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactID[] = {  {&_swigt__p_b2ContactID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactImpulse[] = {  {&_swigt__p_b2ContactImpulse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactListener[] = {  {&_swigt__p_b2ContactListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactManager[] = {  {&_swigt__p_b2ContactManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactPoint[] = {  {&_swigt__p_b2ContactPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DestructionListener[] = {  {&_swigt__p_b2DestructionListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceInput[] = {  {&_swigt__p_b2DistanceInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceJoint[] = {  {&_swigt__p_b2DistanceJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceJointDef[] = {  {&_swigt__p_b2DistanceJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceOutput[] = {  {&_swigt__p_b2DistanceOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceProxy[] = {  {&_swigt__p_b2DistanceProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Draw[] = {  {&_swigt__p_b2Draw, 0, 0, 0},  {&_swigt__p_b2DrawExtended, _p_b2DrawExtendedTo_p_b2Draw, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DrawExtended[] = {  {&_swigt__p_b2DrawExtended, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2EdgeShape[] = {  {&_swigt__p_b2EdgeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Filter[] = {  {&_swigt__p_b2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Fixture[] = {  {&_swigt__p_b2Fixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FixtureDef[] = {  {&_swigt__p_b2FixtureDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FixtureProxy[] = {  {&_swigt__p_b2FixtureProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FrictionJoint[] = {  {&_swigt__p_b2FrictionJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FrictionJointDef[] = {  {&_swigt__p_b2FrictionJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GearJoint[] = {  {&_swigt__p_b2GearJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GearJointDef[] = {  {&_swigt__p_b2GearJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Jacobian[] = {  {&_swigt__p_b2Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Joint[] = {  {&_swigt__p_b2Joint, 0, 0, 0},  {&_swigt__p_b2DistanceJoint, _p_b2DistanceJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2FrictionJoint, _p_b2FrictionJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2GearJoint, _p_b2GearJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2MotorJoint, _p_b2MotorJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2MouseJoint, _p_b2MouseJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2PrismaticJoint, _p_b2PrismaticJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2PulleyJoint, _p_b2PulleyJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2RevoluteJoint, _p_b2RevoluteJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2RopeJoint, _p_b2RopeJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2WeldJoint, _p_b2WeldJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2WheelJoint, _p_b2WheelJointTo_p_b2Joint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointDef[] = {  {&_swigt__p_b2JointDef, 0, 0, 0},  {&_swigt__p_b2DistanceJointDef, _p_b2DistanceJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2FrictionJointDef, _p_b2FrictionJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2GearJointDef, _p_b2GearJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2MotorJointDef, _p_b2MotorJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2MouseJointDef, _p_b2MouseJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2PrismaticJointDef, _p_b2PrismaticJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2PulleyJointDef, _p_b2PulleyJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2RevoluteJointDef, _p_b2RevoluteJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2RopeJointDef, _p_b2RopeJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2WeldJointDef, _p_b2WeldJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2WheelJointDef, _p_b2WheelJointDefTo_p_b2JointDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointEdge[] = {  {&_swigt__p_b2JointEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Manifold[] = {  {&_swigt__p_b2Manifold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ManifoldPoint[] = {  {&_swigt__p_b2ManifoldPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MassData[] = {  {&_swigt__p_b2MassData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Mat22[] = {  {&_swigt__p_b2Mat22, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Mat33[] = {  {&_swigt__p_b2Mat33, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MotorJoint[] = {  {&_swigt__p_b2MotorJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MotorJointDef[] = {  {&_swigt__p_b2MotorJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MouseJoint[] = {  {&_swigt__p_b2MouseJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MouseJointDef[] = {  {&_swigt__p_b2MouseJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Pair[] = {  {&_swigt__p_b2Pair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PolygonShape[] = {  {&_swigt__p_b2PolygonShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Position[] = {  {&_swigt__p_b2Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PrismaticJoint[] = {  {&_swigt__p_b2PrismaticJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PrismaticJointDef[] = {  {&_swigt__p_b2PrismaticJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Profile[] = {  {&_swigt__p_b2Profile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PulleyJoint[] = {  {&_swigt__p_b2PulleyJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PulleyJointDef[] = {  {&_swigt__p_b2PulleyJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2QueryCallback[] = {  {&_swigt__p_b2QueryCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RayCastCallback[] = {  {&_swigt__p_b2RayCastCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RayCastInput[] = {  {&_swigt__p_b2RayCastInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RayCastOutput[] = {  {&_swigt__p_b2RayCastOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJoint[] = {  {&_swigt__p_b2RevoluteJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJointDef[] = {  {&_swigt__p_b2RevoluteJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RopeJoint[] = {  {&_swigt__p_b2RopeJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RopeJointDef[] = {  {&_swigt__p_b2RopeJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Rot[] = {  {&_swigt__p_b2Rot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Shape[] = {  {&_swigt__p_b2Shape, 0, 0, 0},  {&_swigt__p_b2ChainShape, _p_b2ChainShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2CircleShape, _p_b2CircleShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2EdgeShape, _p_b2EdgeShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2PolygonShape, _p_b2PolygonShapeTo_p_b2Shape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2SolverData[] = {  {&_swigt__p_b2SolverData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Sweep[] = {  {&_swigt__p_b2Sweep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TOIInput[] = {  {&_swigt__p_b2TOIInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TOIOutput[] = {  {&_swigt__p_b2TOIOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TimeStep[] = {  {&_swigt__p_b2TimeStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Transform[] = {  {&_swigt__p_b2Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TreeNode[] = {  {&_swigt__p_b2TreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec2[] = {  {&_swigt__p_b2Vec2, 0, 0, 0},  {&_swigt__p__b2Vec2Array, _p__b2Vec2ArrayTo_p_b2Vec2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec3[] = {  {&_swigt__p_b2Vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Velocity[] = {  {&_swigt__p_b2Velocity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Version[] = {  {&_swigt__p_b2Version, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2WeldJoint[] = {  {&_swigt__p_b2WeldJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2WeldJointDef[] = {  {&_swigt__p_b2WeldJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2WheelJoint[] = {  {&_swigt__p_b2WheelJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2WheelJointDef[] = {  {&_swigt__p_b2WheelJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2World[] = {  {&_swigt__p_b2World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2WorldManifold[] = {  {&_swigt__p_b2WorldManifold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_b2Contact_p_b2BlockAllocator__void[] = {  {&_swigt__p_f_p_b2Contact_p_b2BlockAllocator__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact[] = {  {&_swigt__p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p__b2Vec2Array,
  _swigc__p_b2AABB,
  _swigc__p_b2AssertException,
  _swigc__p_b2BlockAllocator,
  _swigc__p_b2Body,
  _swigc__p_b2BodyDef,
  _swigc__p_b2BroadPhase,
  _swigc__p_b2ChainShape,
  _swigc__p_b2CircleShape,
  _swigc__p_b2ClipVertex,
  _swigc__p_b2Color,
  _swigc__p_b2Contact,
  _swigc__p_b2ContactEdge,
  _swigc__p_b2ContactFeature,
  _swigc__p_b2ContactFilter,
  _swigc__p_b2ContactID,
  _swigc__p_b2ContactImpulse,
  _swigc__p_b2ContactListener,
  _swigc__p_b2ContactManager,
  _swigc__p_b2ContactPoint,
  _swigc__p_b2DestructionListener,
  _swigc__p_b2DistanceInput,
  _swigc__p_b2DistanceJoint,
  _swigc__p_b2DistanceJointDef,
  _swigc__p_b2DistanceOutput,
  _swigc__p_b2DistanceProxy,
  _swigc__p_b2Draw,
  _swigc__p_b2DrawExtended,
  _swigc__p_b2EdgeShape,
  _swigc__p_b2Filter,
  _swigc__p_b2Fixture,
  _swigc__p_b2FixtureDef,
  _swigc__p_b2FixtureProxy,
  _swigc__p_b2FrictionJoint,
  _swigc__p_b2FrictionJointDef,
  _swigc__p_b2GearJoint,
  _swigc__p_b2GearJointDef,
  _swigc__p_b2Jacobian,
  _swigc__p_b2Joint,
  _swigc__p_b2JointDef,
  _swigc__p_b2JointEdge,
  _swigc__p_b2Manifold,
  _swigc__p_b2ManifoldPoint,
  _swigc__p_b2MassData,
  _swigc__p_b2Mat22,
  _swigc__p_b2Mat33,
  _swigc__p_b2MotorJoint,
  _swigc__p_b2MotorJointDef,
  _swigc__p_b2MouseJoint,
  _swigc__p_b2MouseJointDef,
  _swigc__p_b2Pair,
  _swigc__p_b2PolygonShape,
  _swigc__p_b2Position,
  _swigc__p_b2PrismaticJoint,
  _swigc__p_b2PrismaticJointDef,
  _swigc__p_b2Profile,
  _swigc__p_b2PulleyJoint,
  _swigc__p_b2PulleyJointDef,
  _swigc__p_b2QueryCallback,
  _swigc__p_b2RayCastCallback,
  _swigc__p_b2RayCastInput,
  _swigc__p_b2RayCastOutput,
  _swigc__p_b2RevoluteJoint,
  _swigc__p_b2RevoluteJointDef,
  _swigc__p_b2RopeJoint,
  _swigc__p_b2RopeJointDef,
  _swigc__p_b2Rot,
  _swigc__p_b2Shape,
  _swigc__p_b2SolverData,
  _swigc__p_b2Sweep,
  _swigc__p_b2TOIInput,
  _swigc__p_b2TOIOutput,
  _swigc__p_b2TimeStep,
  _swigc__p_b2Transform,
  _swigc__p_b2TreeNode,
  _swigc__p_b2Vec2,
  _swigc__p_b2Vec3,
  _swigc__p_b2Velocity,
  _swigc__p_b2Version,
  _swigc__p_b2WeldJoint,
  _swigc__p_b2WeldJointDef,
  _swigc__p_b2WheelJoint,
  _swigc__p_b2WheelJointDef,
  _swigc__p_b2World,
  _swigc__p_b2WorldManifold,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_b2Contact_p_b2BlockAllocator__void,
  _swigc__p_f_p_b2Fixture_int32_p_b2Fixture_int32_p_b2BlockAllocator__p_b2Contact,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "b2Globals", globals);
  SWIG_addvarlink(globals, "b2_toiMaxIters", Swig_var_b2_toiMaxIters_get, Swig_var_b2_toiMaxIters_set);
  SWIG_addvarlink(globals, "b2_toiMaxRootIters", Swig_var_b2_toiMaxRootIters_get, Swig_var_b2_toiMaxRootIters_set);
  SWIG_Python_SetConstant(d, "RAND_LIMIT",SWIG_From_int(static_cast< int >(32767)));
  SWIG_Python_SetConstant(d, "b2_pi",SWIG_From_double(static_cast< double >(3.14159265359)));
  SWIG_Python_SetConstant(d, "b2_maxManifoldPoints",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "b2_maxPolygonVertices",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "b2_aabbExtension",SWIG_From_double(static_cast< double >(0.1)));
  SWIG_Python_SetConstant(d, "b2_aabbMultiplier",SWIG_From_double(static_cast< double >(2.0)));
  SWIG_Python_SetConstant(d, "b2_linearSlop",SWIG_From_double(static_cast< double >(0.005)));
  SWIG_Python_SetConstant(d, "b2_angularSlop",SWIG_From_double(static_cast< double >((2.0/180.0*3.14159265359))));
  SWIG_Python_SetConstant(d, "b2_polygonRadius",SWIG_From_double(static_cast< double >((2.0*0.005))));
  SWIG_Python_SetConstant(d, "b2_maxSubSteps",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "b2_maxTOIContacts",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "b2_velocityThreshold",SWIG_From_double(static_cast< double >(1.0)));
  SWIG_Python_SetConstant(d, "b2_maxLinearCorrection",SWIG_From_double(static_cast< double >(0.2)));
  SWIG_Python_SetConstant(d, "b2_maxAngularCorrection",SWIG_From_double(static_cast< double >((8.0/180.0*3.14159265359))));
  SWIG_Python_SetConstant(d, "b2_maxTranslation",SWIG_From_double(static_cast< double >(2.0)));
  SWIG_Python_SetConstant(d, "b2_maxTranslationSquared",SWIG_From_double(static_cast< double >((2.0*2.0))));
  SWIG_Python_SetConstant(d, "b2_maxRotation",SWIG_From_double(static_cast< double >((0.5*3.14159265359))));
  SWIG_Python_SetConstant(d, "b2_maxRotationSquared",SWIG_From_double(static_cast< double >(((0.5*3.14159265359)*(0.5*3.14159265359)))));
  SWIG_Python_SetConstant(d, "b2_baumgarte",SWIG_From_double(static_cast< double >(0.2)));
  SWIG_Python_SetConstant(d, "b2_toiBaugarte",SWIG_From_double(static_cast< double >(0.75)));
  SWIG_Python_SetConstant(d, "b2_timeToSleep",SWIG_From_double(static_cast< double >(0.5)));
  SWIG_Python_SetConstant(d, "b2_linearSleepTolerance",SWIG_From_double(static_cast< double >(0.01)));
  SWIG_Python_SetConstant(d, "b2_angularSleepTolerance",SWIG_From_double(static_cast< double >((2.0/180.0*3.14159265359))));
  SWIG_addvarlink(globals, "b2_version", Swig_var_b2_version_get, Swig_var_b2_version_set);
  SWIG_addvarlink(globals, "b2Vec2_zero", Swig_var_b2Vec2_zero_get, Swig_var_b2Vec2_zero_set);
  SWIG_addvarlink(globals, "b2_nullFeature", Swig_var_b2_nullFeature_get, Swig_var_b2_nullFeature_set);
  SWIG_Python_SetConstant(d, "b2ContactFeature_e_vertex",SWIG_From_int(static_cast< int >(b2ContactFeature::e_vertex)));
  SWIG_Python_SetConstant(d, "b2ContactFeature_e_face",SWIG_From_int(static_cast< int >(b2ContactFeature::e_face)));
  SWIG_Python_SetConstant(d, "b2Manifold_e_circles",SWIG_From_int(static_cast< int >(b2Manifold::e_circles)));
  SWIG_Python_SetConstant(d, "b2Manifold_e_faceA",SWIG_From_int(static_cast< int >(b2Manifold::e_faceA)));
  SWIG_Python_SetConstant(d, "b2Manifold_e_faceB",SWIG_From_int(static_cast< int >(b2Manifold::e_faceB)));
  SWIG_Python_SetConstant(d, "b2_nullState",SWIG_From_int(static_cast< int >(b2_nullState)));
  SWIG_Python_SetConstant(d, "b2_addState",SWIG_From_int(static_cast< int >(b2_addState)));
  SWIG_Python_SetConstant(d, "b2_persistState",SWIG_From_int(static_cast< int >(b2_persistState)));
  SWIG_Python_SetConstant(d, "b2_removeState",SWIG_From_int(static_cast< int >(b2_removeState)));
  SWIG_Python_SetConstant(d, "e_convertVertices",SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Python_SetConstant(d, "b2Draw_e_shapeBit",SWIG_From_int(static_cast< int >(b2Draw::e_shapeBit)));
  SWIG_Python_SetConstant(d, "b2Draw_e_jointBit",SWIG_From_int(static_cast< int >(b2Draw::e_jointBit)));
  SWIG_Python_SetConstant(d, "b2Draw_e_aabbBit",SWIG_From_int(static_cast< int >(b2Draw::e_aabbBit)));
  SWIG_Python_SetConstant(d, "b2Draw_e_pairBit",SWIG_From_int(static_cast< int >(b2Draw::e_pairBit)));
  SWIG_Python_SetConstant(d, "b2Draw_e_centerOfMassBit",SWIG_From_int(static_cast< int >(b2Draw::e_centerOfMassBit)));
  SWIG_addvarlink(globals, "b2_chunkSize", Swig_var_b2_chunkSize_get, Swig_var_b2_chunkSize_set);
  SWIG_addvarlink(globals, "b2_maxBlockSize", Swig_var_b2_maxBlockSize_get, Swig_var_b2_maxBlockSize_set);
  SWIG_addvarlink(globals, "b2_blockSizes", Swig_var_b2_blockSizes_get, Swig_var_b2_blockSizes_set);
  SWIG_addvarlink(globals, "b2_chunkArrayIncrement", Swig_var_b2_chunkArrayIncrement_get, Swig_var_b2_chunkArrayIncrement_set);
  SWIG_Python_SetConstant(d, "b2Shape_e_circle",SWIG_From_int(static_cast< int >(b2Shape::e_circle)));
  SWIG_Python_SetConstant(d, "b2Shape_e_edge",SWIG_From_int(static_cast< int >(b2Shape::e_edge)));
  SWIG_Python_SetConstant(d, "b2Shape_e_polygon",SWIG_From_int(static_cast< int >(b2Shape::e_polygon)));
  SWIG_Python_SetConstant(d, "b2Shape_e_chain",SWIG_From_int(static_cast< int >(b2Shape::e_chain)));
  SWIG_Python_SetConstant(d, "b2Shape_e_typeCount",SWIG_From_int(static_cast< int >(b2Shape::e_typeCount)));
  SWIG_Python_SetConstant(d, "b2_nullNode",SWIG_From_int(static_cast< int >((-1))));
  SWIG_Python_SetConstant(d, "b2BroadPhase_e_nullProxy",SWIG_From_int(static_cast< int >(b2BroadPhase::e_nullProxy)));
  SWIG_Python_SetConstant(d, "b2TOIOutput_e_unknown",SWIG_From_int(static_cast< int >(b2TOIOutput::e_unknown)));
  SWIG_Python_SetConstant(d, "b2TOIOutput_e_failed",SWIG_From_int(static_cast< int >(b2TOIOutput::e_failed)));
  SWIG_Python_SetConstant(d, "b2TOIOutput_e_overlapped",SWIG_From_int(static_cast< int >(b2TOIOutput::e_overlapped)));
  SWIG_Python_SetConstant(d, "b2TOIOutput_e_touching",SWIG_From_int(static_cast< int >(b2TOIOutput::e_touching)));
  SWIG_Python_SetConstant(d, "b2TOIOutput_e_separated",SWIG_From_int(static_cast< int >(b2TOIOutput::e_separated)));
  SWIG_Python_SetConstant(d, "b2_staticBody",SWIG_From_int(static_cast< int >(b2_staticBody)));
  SWIG_Python_SetConstant(d, "b2_kinematicBody",SWIG_From_int(static_cast< int >(b2_kinematicBody)));
  SWIG_Python_SetConstant(d, "b2_dynamicBody",SWIG_From_int(static_cast< int >(b2_dynamicBody)));
  SWIG_addvarlink(globals, "b2_stackSize", Swig_var_b2_stackSize_get, Swig_var_b2_stackSize_set);
  SWIG_addvarlink(globals, "b2_maxStackEntries", Swig_var_b2_maxStackEntries_get, Swig_var_b2_maxStackEntries_set);
  SWIG_Python_SetConstant(d, "e_wheelJoint",SWIG_From_int(static_cast< int >(e_wheelJoint)));
  SWIG_Python_SetConstant(d, "e_ropeJoint",SWIG_From_int(static_cast< int >(e_ropeJoint)));
  SWIG_addvarlink(globals, "b2_minPulleyLength", Swig_var_b2_minPulleyLength_get, Swig_var_b2_minPulleyLength_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

